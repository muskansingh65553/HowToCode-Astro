[{"slug":"adonis-js-1-intro-and-setup","category":"blog","title":"Adonis JS - 1. Intro and Setup","description":"In this tutorial series, we are going to be learning the fundamentals of Adonis JS, a full-stack framework for Node JS.","tags":["adonis-fundamentals"],"body":"\nIn this tutorial series, we are going to be learning the fundamentals of [Adonis JS](https://adonisjs.com/), a full-stack framework for Node JS. We will be building a library application called \"Alexandria\" which will serve as an admin application for managing books for a library.\n\nHere are some of the features of the application and the Adonis JS concepts you are going to learn in this series.\n\n- MVC - Models, Views & Controllers\n- CRUD - how to create, read, update & delete books\n- User Authentication - only logged in users can create, edit, and delete books.\n- Validation - form validation\n- Postgres - we will be using Postgres for our database\n- Migrations, Factories & Seeds - for populating our database with dummy data while developing our app.\n- Bootstrap - we will be using bootstrap for the layout & styles\n\n---\n\n## Install Node JS\n\nI will be developing this application on Windows 10, and so many of the tools I recommend are for that operating system. If you are on a Mac or Linux, you will need to find comparable tools, I will try to provide links for those systems when I can.\n\nFirst, you will need to install [NodeJS ](https://nodejs.org/en/).\n\n## Install PostgreSQL\n\nNext, you will need to install [PostgreSQL](https://www.enterprisedb.com/downloads/postgres-postgresql-downloads)\n\n_**For this tutorial, I am using version 10.12 which also comes with PG admin 4, which is a GUI for managing our database.**_\n\nIf you are on a mac, the link below is by far the easiest way to get Postgres installed on your system: [Postgres.app](http://postgresapp.com)\n\n## Install Adonis JS\n\nNext, open up your terminal and run the following commands to install Adonis JS CLI and create our project.\n\n```bash\n  npm i -g @adonisjs/cli\n  adonis new alexandria\n  cd alexandria\n  adonis serve --dev\n```\n\n_**I am using version 4.0.12 of Adonis JS CLI at the time of writing this tutorial**_\n\nIf all goes well, you should see the following at [http://127.0.0.1:3333/](http://127.0.0.1:3333/)\n\n![](/images/adonis-tutorial/adonis-works-screen.JPG)\n\n## Database Setup\n\nFinally, we need to connect our new application to our PostgreSQL database.\n\nIf you are on windows and using PG Admin 4, here is how to do it. After launching PG Admin 4, you will be prompted to enter your master password which you created during the installation of it. In the left hand column, select Servers > PostgreSQL 10 > right-click on \"Databases\" Create > Database\n\nGive your database a name and click \"save\"\n\n![Creating our database with PG admin](/images/adonis-tutorial/creating-the-database-in-pg-admin-4.JPG)\n\nYour new database should now be under \"databases\" in the left hand column.\n\nNext, we need to connect Adonis to our new db.\n\nOpen up the Adonis project in your text editor and open the `.env` file. In here, we will need to add our database connection details. Here are mine for reference:\n\n```env\nHOST=127.0.0.1\nPORT=3333\nNODE_ENV=development\nAPP_URL=http://${HOST}:${PORT}\nCACHE_VIEWS=false\nAPP_KEY=YnBDIQ9voPywctDwCpFKu5B3EH4GQKDX\nDB_CONNECTION=pg\nDB_HOST=127.0.0.1\nDB_PORT=5433\nDB_USER=postgres\nDB_PASSWORD=password123\nDB_DATABASE=adonis_alexandria\nSESSION_DRIVER=cookie\nHASH_DRIVER=bcrypt\n```\n\nYour `APP_KEY` should be different, and is automatically configured by Adonis, **don't change this**. Also, your `DB_PORT` might be different than mine. Postgres typically defaults to `5432`, so make sure you are using the correct port for your system. Also, make sure to enter your `DB_PASSWORD`. The one I have above is just an example.\n\nWe will also need to install the `pg` npm package. Run the following command in your terminal\n\n```bash\nnpm i pg\n```\n\nNext run the following command to run the migrations that come by default with each Adonis install.\n\n```bash\nadonis migration:run\n```\n\nIf everything worked you should see the following output in your terminal.\n\n![](/images/adonis-tutorial/adonis-migration-run.JPG)\n\n## Repo\n\n[Project Repo](https://github.com/robertguss/howtocode.io-adonis-js-fundamentals)\n\nThe code for this section can be found at the link above under the `master` branch.\n\n## Wrap Up\n\nWe have now successfully setup our new application and connected it to PostgreSQL. In the next lesson, we will learn about routes, layouts, views and create our Book controller for managing books.\n"},{"slug":"adonis-js-2-routes-layouts","category":"blog","title":"Adonis JS - 2. Routes, Layouts, Controllers","description":"In this section, we will be learning how to create and use routes, layouts, views, and controllers in Adonis JS.","tags":["adonis-fundamentals"],"body":"\nIn this section, we will be learning about routes, layouts, views and controllers. To begin, let's first setup and configure Bootstrap which will be using for the layout and styling of our application.\n\nRun the following command to create our layouts directory and our `default.edge` file.\n\n```bash\nadonis make:view layouts/default\n```\n\nThis will create a new file at `resources/views/layouts/default.edge`\n\nOpen this file in your text editor and add the following.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Alexandria</title>\n    {{\n    style('https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css')\n    }}\n  </head>\n  <body>\n    <div class=\"container\">@!section('content')</div>\n\n    {{ script('https://code.jquery.com/jquery-3.4.1.slim.min.js') }} {{\n    script('https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js')\n    }} {{\n    script('https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js')\n    }}\n  </body>\n</html>\n```\n\nLet's break this file down a little bit...\n\nFirst, we are creating a basic html page. The `{{ style() }}` is a special method in Adonis to pull in our stylesheets. The `{{ script() }}` does the same, but for JavaScript. I am including the CDN files for [Bootstrap 4](https://getbootstrap.com/docs/4.4/getting-started/introduction/).\n\nThe following code is what is used to 'inject\" markup from other files into this layout file:\n\n```html\n<div class=\"container\">@!section('content')</div>\n```\n\nHow this layout file works, will make more sense once we create our first view.\n\n## Navigation\n\nNext, let's add a [navbar](https://getbootstrap.com/docs/4.4/components/navbar/) from bootstrap to our layouts, as we are going to need this for our application.\n\nLet's create a partials directory inside of our layouts folder for this component.\n\n```bash\nadonis make:view layouts/_partials/nav\n```\n\nInside of this `nav.edge` file paste the following markup.\n\n```html\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a class=\"navbar-brand\" href=\"/\">Alexandria</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link\" href=\"#\">Home</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"#\">Link</a>\n      </li>\n  </div>\n</nav>\n```\n\nWe now need to include this partial in our `default.edge` layout. Add the following to `default.edge`.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Alexandria</title>\n    {{\n    style('https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css')\n    }}\n  </head>\n  <body>\n    @include('layouts/_partials/nav')\n\n    <div class=\"container\">@!section('content')</div>\n\n    {{ script('https://code.jquery.com/jquery-3.4.1.slim.min.js') }} {{\n    script('https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js')\n    }} {{\n    script('https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js')\n    }}\n  </body>\n</html>\n```\n\nYou will notice that I have added `@include('layous/_partials/nav')` this include helper provided by Adonis will allow us to include other `.edge` files.\n\nIf you refresh the application, you will notice that nothing changes. We need to now configure our routes to use this new layout.\n\nOpen `start/routes.js` in your text editor. You should see the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\nRoute.on(\"/\").render(\"welcome\");\n```\n\nThere is currently only a single route, which is rendering the `welcome.edge` template located at `resources/views/welcome.edge`. Let's modify this template to use our new layout.\n\nAdd the following markup to `welcome.edge`:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Alexandria</h1>\n@endsection\n```\n\n`@layout('layouts.default')` is telling Adonis to use our new layout file. This syntax can also be `@layout('layouts/default')`\n\nEverything that exists between the `@section()` and `@endsection()` will be injected into the `default.edge` template, which if you recall looks like this:\n\n```markup\n<div class=\"container\">\n  @!section('content')\n</div>\n```\n\nNow if you refresh the page you should see the following.\n\n![](/images/adonis-tutorial/default-layout-with-navbar.JPG)alexandria application home page\n\n## Book Controller\n\nNow let's create our first controller for our books. Run the following command.\n\n```bash\nadonis make:controller Book\n```\n\nSelect \"For HTTP requests\" when the terminal prompts you.\n\nThis will create a new file at `app/Controllers/Http/BookController.js` and looks like the following:\n\n```js\n\"use strict\";\n\nclass BookController {}\n\nmodule.exports = BookController;\n```\n\nWe will now create our `index()` action which will return a list of all of our books. The data will be hard-coded for now, but soon we will be returning data from our database.\n\nAdd the following to `BookController.js`\n\n```js\n\"use strict\";\n\nclass BookController {\n  async index({ view }) {\n    const books = [\n      { title: \"Book 1\", author: \"John Doe\" },\n      { title: \"Book 2\", author: \"Jane Doe\" },\n      { title: \"Book 3\", author: \"Adam Smith\" },\n    ];\n\n    return view.render(\"book.index\", {\n      books: books,\n    });\n  }\n}\n\nmodule.exports = BookController;\n```\n\nWe have created a new method called `index()` and are passing in a `view` object. This tells Adonis that this method will be returning a `.edge` view file. We then create a simple array called `books` that contains 3 objects with `title` and `author`. At the end of this method we are returning a view called `index` which is located inside of the `book` directory (this does not exist yet!) and then passing the view an object with a property of books, whose value is our `books` array. You can use some ES6 syntactic sugar like so:\n\n```js\nreturn view.render(\"book.index\", {\n  books,\n});\n```\n\n_**When the property and value of a JS object have the same name, you just need to add the name once.**_\n\nNow, let's create this view.\n\n```bash\nadonis make:view book/index\n```\n\nThis will create an `index.edge` file at `resources/views/book/index.edge`\n\nAdd the following markup to this file:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Books Index</h1>\n\n  <ul>\n    @each(book in books)\n  <li>{{ book.title }} - {{ book.author }}</li>\n    @endeach\n  </ul>\n@endsection\n```\n\nWe are using our `default.edge` layout and using [Edge's templating](https://edge.adonisjs.com/docs/syntax-guide) shorthand for a for loop to loop through our books array.\n\nNow, we need to create a new route, which will load this view. Open up `start/routes.js` and add the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\nRoute.on(\"/\").render(\"welcome\");\nRoute.get(\"/books\", \"BookController.index\");\n```\n\nNow, go to [`http://127.0.0.1:3333/books`](http://127.0.0.1:3333/books) and you should see the following:\n\n![](/images/adonis-tutorial/books-route.JPG)\n\n## Wrap Up\n\nIn this lesson, we learned about layouts, routes, views, Edge templating and Controllers. In the next lesson, we will add more methods to our controller to create books, forms, validation and create a book model to interact with our database.\n\n---\n\n## Repo\n\nThe code for this section can be found in the [repo](https://github.com/robertguss/howtocode.io-adonis-js-fundamentals)\nunder the branch `2-routes-layouts-views-controllers`.\n"},{"slug":"adonis-js-3-migrations-models","category":"blog","title":"Adonis JS - 3. Migrations, Models, Forms","description":"In this section, we will learn all about how to interact with our database using migrations, models, forms, seeds, and factories in Adonis JS.","tags":["adonis-fundamentals"],"body":"\nIn this section, we will learn all about how to interact with our database using migrations, models, forms, seeds and factories.\n\nSince we are building an application for a library, we need a way to manage books, which means we are going to need a way to store and retrieve books from our database.\n\n## Migrations\n\n[Migrations](https://adonisjs.com/docs/4.1/migrations) are JavaScript files that allow us to create or modify tables in our database. Since we will need a \"books\" table in our database, we will need to create a migration to create this new table, which we can do by running the following command:\n\n```bash\nadonis make:migration books\n```\n\nThen select \"Create table\" from the options presented in your terminal.\n\nThis will create a new file in `database/migrations/1586779432763_books_schema`.\n\n**The name of your file will be slightly different.**\n\nWhen we open this file up, we should see the following:\n\n```js\n\"use strict\";\n\n/** @type {import('@adonisjs/lucid/src/Schema')} */\nconst Schema = use(\"Schema\");\n\nclass BooksSchema extends Schema {\n  up() {\n    this.create(\"books\", (table) => {\n      table.increments();\n      table.timestamps();\n    });\n  }\n\n  down() {\n    this.drop(\"books\");\n  }\n}\n\nmodule.exports = BooksSchema;\n```\n\nThis is the migration boilerplate that Adonis generates for us. We now need to describe the various attributes and properties that are associated with our books, which will then be turned into columns in our new \"books\" table.\n\n**The API for various data types can be found [here](https://adonisjs.com/docs/4.1/migrations#_column_typesmodifiers)**\n\nEach book will have a title, author, cover_image, and ISBN number. To keep things simple for now, the cover_image will be a string that is a URL to a image of the book. Let's update our migration to add these new types.\n\n```js\n\"use strict\";\n\n/** @type {import('@adonisjs/lucid/src/Schema')} */\nconst Schema = use(\"Schema\");\n\nclass BooksSchema extends Schema {\n  up() {\n    this.create(\"books\", (table) => {\n      table.increments();\n      table.string(\"title\");\n      table.string(\"author\");\n      table.string(\"cover_image\");\n      table.string(\"isbn\");\n      table.timestamps();\n    });\n  }\n\n  down() {\n    this.drop(\"books\");\n  }\n}\n\nmodule.exports = BooksSchema;\n```\n\nNow we need to run this migration in order to create our new table.\n\n```bash\nadonis migration:run\n```\n\nIf we inspect our database, we should now see our new table and our new columns.\n\n![](/images/adonis-tutorial/1-books-migration.JPG)\n\n## Models\n\nNow we are going to need to create a Book [model](https://adonisjs.com/docs/4.1/lucid) so that Adonis can interact with our new table.\n\n```bash\nadonis make:model Book\n```\n\nThis will create a new file in `app/Models/Book.js`\n\n```js\n\"use strict\";\n\n/** @type {typeof import('@adonisjs/lucid/src/Lucid/Model')} */\nconst Model = use(\"Model\");\n\nclass Book extends Model {}\n\nmodule.exports = Book;\n```\n\nFor now, we do not need to do anything to this file as we have all of the methods we are going to need as our Book model `extends` the Lucid Model.\n\n## Forms\n\nNow that our database and model are setup, we need a way to create our books and add them to our database. Let's create a simple form to create a new book. To do this, we are going to need to create a new view for our form and also the `create` and `store` methods on our book controller.\n\nFirst, we will create our new form with the following command:\n\n```bash\nadonis make:view book/create\n```\n\nOpen up `resources/views/book/create.edge` and add the following:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Add a Book</h1>\n\n  <form>\n    <div class=\"form-group\">\n      <label for=\"\">Title</label>\n      <input type=\"text\" name=\"title\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Author</label>\n      <input type=\"text\" name=\"author\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Cover Image</label>\n      <input type=\"text\" name=\"cover_image\" class=\"form-control\" placeholder=\"image URL\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">ISBN</label>\n      <input type=\"text\" name=\"isbn\" class=\"form-control\">\n    </div>\n\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n  </form>\n@endsection\n```\n\n**This is just a simple form with various bootstrap classes**\n\nNow we need to create a route in order to access our new form. Open up `routes.js` and add the following `Route.get(\"books/create\", \"BookController.create\");`\n\nYour entire `routes.js` file should look like the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\nRoute.on(\"/\").render(\"welcome\");\nRoute.get(\"/books\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\n```\n\nNow we need to update our Book controller and add the `create` method, which will return our `create.edge` view we made earlier.\n\n```js\n\"use strict\";\n\nclass BookController {\n  async index({ view }) {\n    const books = [\n      { title: \"Book 1\", author: \"John Doe\" },\n      { title: \"Book 2\", author: \"Jane Doe\" },\n      { title: \"Book 3\", author: \"Adam Smith\" },\n    ];\n\n    return view.render(\"book.index\", {\n      books,\n    });\n  }\n\n  async create({ view }) {\n    return view.render(\"book.create\");\n  }\n}\n\nmodule.exports = BookController;\n```\n\nIf you open your browser to [`http://127.0.0.1:3333/books/create`](http://127.0.0.1:3333/books/create) you should see the following:\n![](/images/adonis-tutorial/2-create-view.JPG)\n\nWe now need to create our `store` method on our Book controller that will take the data we fill out in this form and write it to our database.\n\nIn our book controller, we are going to need to import our Book model which we made earlier. This will allow the `store` method to interact with our Book model and write data to our database.\n\n```js\n\"use strict\";\n\nconst Book = use(\"App/Models/Book\");\n\nclass BookController {\n// ...\n```\n\nNow let's add our `store` method.\n\n```js\nasync store({ request, response }) {\n  const book = new Book();\n\n  book.title: request.input(\"title\");\n  book.author = request.input(\"author\");\n  book.cover_image = request.input(\"cover_image\");\n  book.isbn = request.input(\"isbn\");\n\n  await book.save();\n\n  return response.redirect(\"/\");\n}\n```\n\nThis method needs access to the `request` and `response` objects, so we are passing those in. Then we are instantiating a new instance of our `Book` model. We are then assigning our various book properties from our form to this new `Book` object.\n\n_**`request.input('title')` grabs the input field on our form with the `name=\"title\"` attribute, same is true for the other respective attributes**_\n\nWe then save our book to the database `await book.save()` and finally we redirect to the home route `return response.redirect(\"/\")`.\n\nNow we need to create a new route to handle this new request. Since we are creating a book, this needs to be a `POST` request.\n\nUpdated `routes.js` with the following:\n\n```js\nRoute.post(\"books\", \"BookController.store\");\n\n(\"use strict\");\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\nRoute.on(\"/\").render(\"welcome\");\nRoute.get(\"/books\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\n```\n\nFinally, we need to tell our `create.edge` form to use this new route.\n\n```html\n<form action=\"/books\" method=\"POST\"></form>\n```\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Add a Book</h1>\n\n  <form action=\"/books\" method=\"POST\">\n    {{ csrfField() }}\n\n    <div class=\"form-group\">\n      <label for=\"\">Title</label>\n      <input type=\"text\" name=\"title\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Author</label>\n      <input type=\"text\" name=\"author\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Cover Image</label>\n      <input type=\"text\" name=\"cover_image\" class=\"form-control\" placeholder=\"image URL\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">ISBN</label>\n      <input type=\"text\" name=\"isbn\" class=\"form-control\">\n    </div>\n\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n  </form>\n@endsection\n```\n\n_**I also added `{{ csrfField() }}` just below our `<form>` element as this is a special method in Adonis that will prevent [Cross Site Request Forgery](https://owasp.org/www-community/attacks/csrf). Adonis will throw an error if we do not include this.**_\n\nLet's fill out our form and see if our book is saved.\n\n![](/images/adonis-tutorial/3-filled-out-form.JPG)\n\nAfter clicking submit, you should be redirected to the home page.\n\n![](/images/adonis-tutorial/4-store-redirect-to-home-page.JPG)\n\nLet's check our database and see if our new book has been added.\n\n![](/images/adonis-tutorial/5-book-stored-in-db.JPG)\n\nGreat! We have now successfully added a new book to our database. However, there is a lot more we can do to improve the experience.\n\n## Validations\n\nCurrently, our form to create a new book can accept any kind of input, and even be empty. To prevent this, we will add some form [validation](https://adonisjs.com/docs/4.1/validator), which we can do quite easily, as [validation ](https://adonisjs.com/docs/4.1/validator)is built into Adonis.\n\nFirst, we need to install the Validator package, as it does not come with Adonis by default.\n\n```bash\nadonis install @adonisjs/validator\n```\n\nNext, we need to register this package within our `app/start.js` file:\n\n```js\nconst providers = [\n  \"@adonisjs/framework/providers/AppProvider\",\n  \"@adonisjs/framework/providers/ViewProvider\",\n  \"@adonisjs/lucid/providers/LucidProvider\",\n  \"@adonisjs/bodyparser/providers/BodyParserProvider\",\n  \"@adonisjs/cors/providers/CorsProvider\",\n  \"@adonisjs/shield/providers/ShieldProvider\",\n  \"@adonisjs/session/providers/SessionProvider\",\n  \"@adonisjs/auth/providers/AuthProvider\",\n  \"@adonisjs/validator/providers/ValidatorProvider\", // our new validator package\n];\n```\n\nThen, we need to modify our `create.edge` view with the following:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Add a Book</h1>\n\n  <form action=\"/books\" method=\"POST\">\n    {{ csrfField() }}\n\n    <div class=\"form-group\">\n      <label for=\"\">Title</label>\n      <input type=\"text\" name=\"title\" class=\"form-control\" value=\"{{ old('title', '') }}\">\n      {{ elIf('<span class=\"text-danger\">$self</span>', getErrorFor('title'), hasErrorFor('title')) }}\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Author</label>\n      <input type=\"text\" name=\"author\" class=\"form-control\" value=\"{{ old('author', '') }}\">\n      {{ elIf('<span class=\"text-danger\">$self</span>', getErrorFor('author'), hasErrorFor('author')) }}\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Cover Image</label>\n      <input type=\"text\" name=\"cover_image\" class=\"form-control\" placeholder=\"image URL\" value=\"{{ old('cover_image','') }}\">\n      {{ elIf('<span class=\"text-danger\">$self</span>', getErrorFor('cover_image'), hasErrorFor('cover_image')) }}\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">ISBN</label>\n      <input type=\"text\" name=\"isbn\" class=\"form-control\" value=\"{{ old('isbn', '') }}\">\n      {{ elIf('<span class=\"text-danger\">$self</span>', getErrorFor('isbn'), hasErrorFor('isbn')) }}\n    </div>\n\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n  </form>\n@endsection\n```\n\nThe syntax for validation within Adonis, is arguably a bit strange and funky in my opinion. The most important pieces are:\n\n```html\nvalue=\"{{ old('title', '') }}\n```\n\n_**This is how the validator library validates the `value` of the input with the requirements within our controller's `store` method.**_\n\nand\n\n```html\n{{ elIf('<span class=\"text-danger\">$self</span>', getErrorFor('title'),\nhasErrorFor('title')) }}\n```\n\n_**This is what will output the validation error message just below the input with the error.**_\n\nFinally, we need to update the Book controller's `store` method with our validation rules.\n\nWe need to include the validation library in our controller, like so:\n\n```js\n\"use strict\";\n\nconst Book = use(\"App/Models/Book\");\nconst { validate } = use(\"Validator\");\n\n// ...\n```\n\nThen we need to update our `store` method:\n\n```js\nasync store({ request, response, session }) {\n  const validation = await validate(request.all(), {\n    title: \"required\",\n    author: \"required\",\n    cover_image: \"required\",\n    isbn: \"required|min:10|max:10\",\n  });\n\n  if (validation.fails()) {\n    session.withErrors(validation.messages()).flashAll();\n    return response.redirect(\"back\");\n  }\n\n  const book = new Book();\n\n  book.title: request.input(\"title\");\n  book.author = request.input(\"author\");\n  book.cover_image = request.input(\"cover_image\");\n  book.isbn = request.input(\"isbn\");\n\n  await book.save();\n\n  return response.redirect(\"/\");\n}\n```\n\nWe are making sure that all fields are required and that the ISBN number is exactly 10 numbers. If the validation fails, we are going to redirect the user \"back,\" which refreshes the page to the current view they are on, which in this case is the `create.edge` view.\n\nWe are also passing in the session object which we need access to in order to grab any error messages that occur.\n\nLet's test out our validation, and see if it is working properly.\n\n![](/images/adonis-tutorial/6-validation-error.JPG)\n\nLooks like everything is working as expected! If there are multiple errors, it will display the first error, one at a time.\n\n## Flash Messages\n\nThere is still one problem which we need to address before we wrap up this section. The user has no idea whether or not a book has been added successfully. The only way one can tell, is if they check the database manually. Instead, we are going to flash a message to the user if the book was added successfully.\n\nIf a book has been added successfully, we are currently redirecting the user to the home page. Which is done via `*return* response.redirect(\"/\");` at the bottom of our `store` method. We therefore need to display a success message once they land on this page to let them know the books has been added successfully.\n\nLet's first update our root route, to the book index. Update `routes.js` with the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Route.on(\"/\").render(\"welcome\");\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\n```\n\nNow, if we go to [`http://127.0.0.1:3333/`](http://127.0.0.1:3333/) we will land our Book index view.\n\nAdd the following to `book/index.edge`:\n\n```markup\n@layout('layouts.default')\n@section('content')\n\n<h1>Books Index</h1>\n\n@if(old('notification'))\n<div class=\"alert alert-success\">{{ old('notification') }}</div>\n@endif\n\n<ul>\n  @each(book in books)\n  <li>{{ book.title }} - {{ book.author }}</li>\n  @endeach\n</ul>\n@endsection\n```\n\nThe `@if(old('notification'))` conditional is what will display our flash notice if there is any.\n\nNext, we need to update our `store` method. Add the following just before our `return` statement that redirects the user back to the home page.\n\n```js\nsession.flash({ notification: \"Book Created\" });\n```\n\nOur entire `store` method now looks like:\n\n```js\nasync store({ request, response, session }) {\n  const validation = await validate(request.all(), {\n    title: \"required\",\n    author: \"required\",\n    cover_image: \"required\",\n    isbn: \"required|min:10|max:10\",\n  });\n\n  if (validation.fails()) {\n    session.withErrors(validation.messages()).flashAll();\n    return response.redirect(\"back\");\n  }\n\n  const book = new Book();\n\n  book.title: request.input(\"title\");\n  book.author = request.input(\"author\");\n  book.cover_image = request.input(\"cover_image\");\n  book.isbn = request.input(\"isbn\");\n\n  await book.save();\n\n  session.flash({ notification: \"Book Created\" });\n  return response.redirect(\"/\");\n}\n```\n\nFill out the form, with all the required fields and an ISBN number that is 10 digits and submit. We should see a flash\nmessage now on the home page.\n\n![](/images/adonis-tutorial/7-flash-message.JPG)\n\n## Repo\n\nThe code for this section can be found in the [repo](https://github.com/robertguss/howtocode.io-adonis-js-fundamentals)\nunder the branch `3-forms-validation-models`.\n\n## Wrap Up\n\nIn this section, we learned about migrations, models, forms, validation and flash messages. In the next section, we will\nlearn about seeds, factories and how to edit and delete books.\n"},{"slug":"adonis-js-4-seeds-factories","category":"blog","title":"Adonis JS - 4. Seeds, Factories","description":"In this section, we will be learning about seeds, factories, and how to edit and delete our books in Adonis JS.","tags":["adonis-fundamentals"],"body":"\nIn this section, we will be learning about seeds, factories, and how to edit and delete our books.\n\n## Seeds &  Factories\n\n[Seeds & Factories](https://adonisjs.com/docs/4.1/seeds-and-factories) allow us to populate our databases with \"dummy\" data which makes building and prototyping our application much easier. Let's create a seed and factory to populate our books table with more books.\n\nTo create a seed for our books, run the following command:\n\n```bash\nadonis make:seed Book\n```\n\nThis will create a new file `database/seeds/BookSeeder.js` which looks like:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | BookSeeder\n    |--------------------------------------------------------------------------\n    |\n    | Make use of the Factory instance to seed database with dummy data or\n    | make use of Lucid models directly.\n    |\n    */\n\n/** @type {import('@adonisjs/lucid/src/Factory')} */\nconst Factory = use(\"Factory\");\n\nclass BookSeeder {\n  async run() {}\n}\n\nmodule.exports = BookSeeder;\n```\n\nWe now need to make a `factory` which will generate our dummy data for our books. Under the hood, Adonis uses [Chance.js](https://chancejs.com/) to generate this dummy data.\n\nUpdate `database/factory.js` with the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Factory\n    |--------------------------------------------------------------------------\n    |\n    | Factories are used to define blueprints for database tables or Lucid\n    | models. Later you can use these blueprints to seed your database\n    | with dummy data.\n    |\n    */\n\n/** @type {import('@adonisjs/lucid/src/Factory')} */\nconst Factory = use(\"Factory\");\n\nFactory.blueprint(\"App/Models/Book\", (faker) => {\n  return {\n    title: faker.sentence({ words: 5 }),\n    author: faker.name(),\n    cover_image:\n      \"https://ismbook.com/wp-content/uploads/2018/12/best-philosophy-books.jpg\",\n    isbn: faker.string({ length: 10, numeric: true }),\n  };\n});\n```\n\nFirst, we are telling the factory to use our Book model `Factory.blueprint(\"App/Models/Book\", (faker) =>`\n\nThen we are populating the book properties with dummy data generated by Chance.js.\n\n1. `title: faker.sentence({ words: 5 })` - title - is going to be a sentence of 5 random words:\n2. `author: faker.name(),` - author - is going to be a random fake name\n3. `cover_image: \"https://ismbook.com/wp-content/uploads/2018/12/best-philosophy-books.jpg\",` - is simply a url of an image of some books I found on google. You can replace this with whatever book image you would like.\n4. `isbn: faker.string({ length: 10, numeric: true }),` - isbn - random number which is 10 numbers long.\n\nNow we need to tell our `BookSeeder.js` file to use this factory. Update it with the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | BookSeeder\n    |--------------------------------------------------------------------------\n    |\n    | Make use of the Factory instance to seed database with dummy data or\n    | make use of Lucid models directly.\n    |\n    */\n\n/** @type {import('@adonisjs/lucid/src/Factory')} */\nconst Factory = use(\"Factory\");\n\nclass BookSeeder {\n  async run() {\n    const booksArray = await Factory.model(\"App/Models/Book\").createMany(7);\n  }\n}\n\nmodule.exports = BookSeeder;\n```\n\nWe are telling the book seeder to use the factory we just created and to create 7 books. Feel free to generate as many or as few books as you would like.\n\nNow run the following command to execute our seeder and generate our books\n\n```bash\nadonis seed\n```\n\nIf all goes well you should see a message like `Seeded database in 200ms` output into the console. Let's check our database to see our new books.\n![](/images/adonis-tutorial/1-seeds-in-database.JPG)seeded books in database\nNow that we have some books in our database, let's update our homepage to display these books. Currently, we are still showing hard coded data.\n\n## Index view\n\nLet's update our `book/index.edge` view to display all of the properties of our books in a table.\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Books Index</h1>\n\n  @if(old('notification'))\n    <div class=\"alert alert-success\">\n      {{ old('notification') }}\n    </div>\n  @endif\n\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Cover Image</th>\n        <th scope=\"col\">Title</th>\n        <th scope=\"col\">Author</th>\n        <th scope=\"col\">ISBN</th>\n      </tr>\n    </thead>\n    <tbody>\n      @each(book in books)\n        <tr>\n          <td><img src=\"{{ book.cover_image }}\" alt=\"{{ book.title }}\" style=\"width: 100px;\"></td>\n          <td scope=\"row\">{{ book.title }}</td>\n          <td>{{ book.author }}</td>\n          <td>{{ book.isbn }}</td>\n        </tr>\n      @endeach\n\n    </tbody>\n  </table>\n@endsection\n```\n\nNext, we need to update our `index` method to query our `books` table in the database.\n\n```js\nasync index({ view }) {\n  const books = await Book.all();\n\n  return view.render(\"book.index\", {\n    books: books.toJSON(),\n  });\n}\n```\n\nWe are grabbing all of the books and then passing them to our view. We need to use the `.toJSON()` method when accessing data from our database.\n\nOur home page now looks like this:\n![](/images/adonis-tutorial/2-home-page-with-book-from-db.JPG)\n\n## Edit Books\n\nNow that we have the ability to create books, we also need to be able to edit them. First, let's create a new route and view to display a single book.\n\n```bash\nadonis make:view book/show\n```\n\nWithin our new `show.edge` file, add the following:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Cover Image</th>\n        <th scope=\"col\">Title</th>\n        <th scope=\"col\">Author</th>\n        <th scope=\"col\">ISBN</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td><img src=\"{{ book.cover_image }}\" alt=\"{{ book.title }}\" style=\"width: 100px;\"></td>\n        <th scope=\"row\">{{ book.title }}</th>\n        <td>{{ book.author }}</td>\n        <td>{{ book.isbn }}</td>\n      </tr>\n    </tbody>\n  </table>\n@endsection\n```\n\nNext, add the following route to the bottom of `routes.js`\n\n```js\nRoute.get(\"books/:id\", \"BookController.show\");\n```\n\nThe `/:id` allows us to take data passed into the url and use it in our views. In this case when a user navigates to `/books/1` the will be taken to our `show.edge` view and the book with the id of `1` will be displayed.\n\nTo make viewing each book easier, without having to know the book id, we will update our homepage so that clicking on a book will take you to the books show view.\n\nUpdated `book/index.edge` with the following:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Books Index</h1>\n\n  @if(old('notification'))\n    <div class=\"alert alert-success\">\n      {{ old('notification') }}\n    </div>\n  @endif\n\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Cover Image</th>\n        <th scope=\"col\">Title</th>\n        <th scope=\"col\">Author</th>\n        <th scope=\"col\">ISBN</th>\n      </tr>\n    </thead>\n    <tbody>\n      @each(book in books)\n        <tr>\n          <td><a href=\"/books/{{ book.id }}\"><img src=\"{{ book.cover_image }}\" alt=\"{{ book.title }}\" style=\"width: 100px;\"></a></td>\n          <td scope=\"row\"><a href=\"/books/{{ book.id }}\">{{ book.title }}</a></td>\n          <td>{{ book.author }}</td>\n          <td>{{ book.isbn }}</td>\n        </tr>\n      @endeach\n\n    </tbody>\n  </table>\n@endsection\n```\n\nWe have added links for both the cover image and book title, so that clicking on either of them will take the user to the show view.\n\nNow let's update our controller with a new `show()` method.\n\n```js\nasync show({ params, view }) {\n  const book = await Book.find(params.id);\n\n  return view.render(\"book.show\", {\n    book,\n  });\n}\n```\n\nIn this new method, we are looking up a particular Book by using `Book.find(params.id)`. The `params.id` is the id that gets passed into the URL, which we are grabbing from our route with `Route.get(\"books/:id\", \"BookController.show\")`. `/:id` becomes `params.id`\n\nNow if we click on the cover image or title we should be taken to the show view, which looks like this:\n\n![](/images/adonis-tutorial/3-show-view.JPG)\n\nLet's add an edit button to this view, which we will then create the appropriate view, route & controller methods for.\n\nUpdate `show.edge` with the following:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Cover Image</th>\n        <th scope=\"col\">Title</th>\n        <th scope=\"col\">Author</th>\n        <th scope=\"col\">ISBN</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td><img src=\"{{ book.cover_image }}\" alt=\"{{ book.title }}\" style=\"width: 100px;\"></td>\n        <th scope=\"row\">{{ book.title }}</th>\n        <td>{{ book.author }}</td>\n        <td>{{ book.isbn }}</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <hr>\n  <a href=\"/books/{{ book.id }}/edit\" class=\"btn btn-dark d-block float-left\">Edit Book</a>\n@endsection\n```\n\nOur show view now looks like:\n\n![](/images/adonis-tutorial/4-edit-button.JPG)\n\nNext, we need to create a new route to match the buttons URL `/books/{{ book.id }}/edit`\n\nUpdate `routes.js` with the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Route.on(\"/\").render(\"welcome\");\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\nRoute.get(\"books/:id\", \"BookController.show\");\nRoute.get(\"/books/:id/edit\", \"BookController.edit\");\n```\n\nNow we need to create an `edit()` method on our controller.\n\n```js\nasync edit({ params, view }) {\n  const book = await Book.find(params.id);\n\n  return view.render(\"book.edit\", {\n    book,\n  });\n}\n```\n\nIt looks almost identical to our `show()` method. The only difference is it is rendering a new `edit` view. Which we need to create.\n\n```bash\nadonis make:view book/edit\n```\n\nWithin `edit.edge` add the following:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Edit {{ book.title }}</h1>\n\n  <form>\n    {{ csrfField() }}\n\n    <div class=\"form-group\">\n      <label for=\"\">Title</label>\n      <input type=\"text\" name=\"title\" class=\"form-control\" value=\"{{ book.title }}\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Author</label>\n      <input type=\"text\" name=\"author\" class=\"form-control\" value=\"{{ book.author }}\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Cover Image</label>\n      <input type=\"text\" name=\"cover_image\" class=\"form-control\" placeholder=\"image URL\" value=\"{{ book.cover_image }}\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">ISBN</label>\n      <input type=\"text\" name=\"isbn\" class=\"form-control\" value=\"{{ book.isbn }}\">\n    </div>\n\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n  </form>\n@endsection\n```\n\nNow if you click on the edit book for any book you should see the following:\n\n![](/images/adonis-tutorial/5-edit-view.JPG)\n\nThe form should look just like our form to create a new book, however, each field will be pre-populated with the books data.\n\nWe can now makes edits to our book. However, if we click the submit button, nothing is going to happen. We need to create a new route and method to `update()` our edits.\n\nUpdate `routes.js` with the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Route.on(\"/\").render(\"welcome\");\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\nRoute.get(\"books/:id\", \"BookController.show\");\nRoute.get(\"/books/:id/edit\", \"BookController.edit\");\nRoute.put(\"/books/:id\", \"BookController.update\");\n```\n\nNow let's create our `update()` on our controller.\n\n```js\nasync update({ params, request, response, session }) {\n  const book = await Book.find(params.id);\n\n  book.title: request.input(\"title\");\n  book.author = request.input(\"author\");\n  book.cover_image = request.input(\"cover_image\");\n  book.isbn = request.input(\"isbn\");\n\n  await book.save();\n\n  session.flash({ notification: \"Book Updated\" });\n\n  return response.redirect(\"/\");\n}\n```\n\nFinally, we need to update our `edit.edge` form action to submit to our new route.\n\nUpdate `edit.edge` with the following:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Edit {{ book.title }}</h1>\n\n  <form action=\"/books/{{ book.id }}?_method=PUT\" method=\"POST\">\n    {{ csrfField() }}\n\n    <div class=\"form-group\">\n      <label for=\"\">Title</label>\n      <input type=\"text\" name=\"title\" class=\"form-control\" value=\"{{ book.title }}\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Author</label>\n      <input type=\"text\" name=\"author\" class=\"form-control\" value=\"{{ book.author }}\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Cover Image</label>\n      <input type=\"text\" name=\"cover_image\" class=\"form-control\" placeholder=\"image URL\" value=\"{{ book.cover_image }}\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">ISBN</label>\n      <input type=\"text\" name=\"isbn\" class=\"form-control\" value=\"{{ book.isbn }}\">\n    </div>\n\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n  </form>\n@endsection\n```\n\nYou may be wondering what this odd syntax is in our form action:\n\n```html\n<form action=\"/books/{{ book.id }}?_method=PUT\" method=\"POST\"></form>\n```\n\nAdonis calls this [Method Spoofing](https://adonisjs.com/docs/4.1/request#_method_spoofing) which makes it very easy for our forms to make `PUT` requests, since HTML forms can only make `GET` & `POST` requests.\n\nLet's alter some of the data in our form and see if our changes are being persisted in our database.\n\n![](/images/adonis-tutorial/6-book-edited.JPG)\n\nIf you see the flash message with \"Book updated\" everything should be working and you should see your edited book on the home page with your new information.\n\n_**Challenge: Add validation to the `edit.edge` view and the `update()` method. Take a look at how we are doing this for our `create.edge` and `store()` method.**_\n\n## Delete Books\n\nFinally we need the ability to delete a book from our database. This will be much easier than our edit functionality.\n\nFirst, let's add a delete button to our `show.edge` view.\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Books Index</h1>\n\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Title</th>\n        <th scope=\"col\">Author</th>\n        <th scope=\"col\">Cover Image</th>\n        <th scope=\"col\">ISBN</th>\n        <th scope=\"col\">Available</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">{{ book.title }}</th>\n        <td>{{ book.author }}</td>\n        <td><img src=\"{{ book.cover_image }}\" alt=\"{{ book.title }}\" style=\"width: 300px;\"></td>\n        <td>{{ book.isbn }}</td>\n        <td>{{ book.available }}</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <hr>\n  <a href=\"/books/{{ book.id }}/edit\" class=\"btn btn-dark d-block float-left\">Edit Book</a>\n\n  <form action=\"/books/{{ book.id }}?_method=DELETE\" method=\"POST\">\n    {{ csrfField() }}\n\n    <input type=\"submit\" class=\"btn btn-danger d-block float-right\" value=\"Delete Book\">\n  </form>\n@endsection\n```\n\n**Notice that for our Delete button we are nesting it inside of a form, that adds method spoofing for the `DELETE` request.**\n\n![](/images/adonis-tutorial/7-delete-button.JPG)\n\nNext, let's create our delete route.\n\nWithin `routes.js` add the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Route.on(\"/\").render(\"welcome\");\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\nRoute.get(\"books/:id\", \"BookController.show\");\nRoute.get(\"/books/:id/edit\", \"BookController.edit\");\nRoute.put(\"/books/:id\", \"BookController.update\");\nRoute.delete(\"/books/:id\", \"BookController.destroy\");\n```\n\nNow let's create this new `destroy()` method on our controller.\n\n```js\nasync destroy({ params, session, response }) {\n  const book = await Book.find(params.id);\n\n  await book.delete();\n\n  session.flash({ notification: \"Book Deleted\" });\n\n  return response.redirect(\"/\");\n}\n```\n\nOur entire Book Controller should look like this:\n\n```js\n\"use strict\";\n\nconst Book = use(\"App/Models/Book\");\nconst { validate } = use(\"Validator\");\n\nclass BookController {\n  async index({ view }) {\n    const books = await Book.all();\n\n    return view.render(\"book.index\", {\n      books: books.toJSON(),\n    });\n  }\n\n  async create({ view }) {\n    return view.render(\"book.create\");\n  }\n\n  async store({ request, response, session }) {\n    const validation = await validate(request.all(), {\n      title: \"required\",\n      author: \"required\",\n      cover_image: \"required\",\n      isbn: \"required|min:10|max:10\",\n    });\n\n    if (validation.fails()) {\n      session.withErrors(validation.messages()).flashAll();\n      return response.redirect(\"back\");\n    }\n\n    const book = new Book();\n\n    book.title: request.input(\"title\");\n    book.author = request.input(\"author\");\n    book.cover_image = request.input(\"cover_image\");\n    book.isbn = request.input(\"isbn\");\n\n    await book.save();\n\n    session.flash({ notification: \"Book Created\" });\n    return response.redirect(\"/\");\n  }\n\n  async show({ params, view }) {\n    const book = await Book.find(params.id);\n\n    return view.render(\"book.show\", {\n      book,\n    });\n  }\n\n  async edit({ params, view }) {\n    const book = await Book.find(params.id);\n\n    return view.render(\"book.edit\", {\n      book,\n    });\n  }\n\n  async update({ params, request, response, session }) {\n    const book = await Book.find(params.id);\n\n    book.title: request.input(\"title\");\n    book.author = request.input(\"author\");\n    book.cover_image = request.input(\"cover_image\");\n    book.isbn = request.input(\"isbn\");\n\n    await book.save();\n\n    session.flash({ notification: \"Book Updated\" });\n\n    return response.redirect(\"/\");\n  }\n\n  async destroy({ params, session, response }) {\n    const book = await Book.find(params.id);\n\n    await book.delete();\n\n    session.flash({ notification: \"Book Deleted\" });\n\n    return response.redirect(\"/\");\n  }\n}\n\nmodule.exports = BookController;\n```\n\nLet's try to delete a book and make sure everything is working properly.\n\n![](/images/adonis-tutorial/8-book-deleted.JPG)\n\nYou should see the \"Book Deleted\" and the book should no longer be displayed on the homepage.\n\n## Repo\n\nThe code for this section can be found in the [repo](https://github.com/robertguss/howtocode.io-adonis-js-fundamentals)\nunder the branch `4-seeds-factories-edit-delete`.\n\n## Wrap Up\n\nIn this section we learned how to create seeds and factories to populate our database with dummy data and how to edit\nand delete books.\n"},{"slug":"adonis-js-5-user-authentication","category":"blog","title":"Adonis JS - 5. User Authentication","description":"How to setup and configure user authentication in Adonis JS. In this section, we are going to learn how to set up user authentication so only registered and logged in users are able to create, edit & delete books.","tags":["adonis-fundamentals"],"body":"\nIn this section we are going to learn how to setup user authentication so only registered and logged in users are able to create, edit & delete books. In a real world library, these users would be the staff of the library. Non registered users are able to view all of the books.\n\n## Create Users\n\nIf you remember back to the first section of this tutorial, we ran the migrations that Adonis provides \"out of the box\" for us to test that our database was connected properly. One of these migrations was for a users table. It also created a user model, so much of the groundwork has already been laid for us!\n\nLet's create a form that will allow users to register and sign up for our application.\n\n```bash\nadonis make:view user/create\n```\n\nAdd the following markup to our new `user/create.edge` view:\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Register User</h1>\n\n  <form action=\"/register\" method=\"POST\">\n    {{ csrfField() }}\n\n    <div class=\"form-group\">\n      <label for=\"\">Username</label>\n      <input type=\"text\" name=\"username\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Email</label>\n      <input type=\"text\" name=\"email\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Password</label>\n      <input type=\"password\" name=\"password\" class=\"form-control\">\n    </div>\n\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n  </form>\n@endsection\n```\n\n**Challenge: Add form validation to the user form to make sure all of the required data is entered and formatted properly**\n\nYou will notice the form action is making a `POST` request to `/register` so let's create this route in our `routes.js` in addition to our `GET` route.\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Route.on(\"/\").render(\"welcome\");\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\nRoute.get(\"books/:id\", \"BookController.show\");\nRoute.get(\"/books/:id/edit\", \"BookController.edit\");\nRoute.put(\"/books/:id\", \"BookController.update\");\nRoute.delete(\"/books/:id\", \"BookController.destroy\");\n\n// Register Users\nRoute.get(\"register\", \"UserController.create\");\nRoute.post(\"register\", \"UserController.store\");\n```\n\nOur route is using a new UserController which does not exist yet, so let's create it now.\n\n```bash\nadonis make:controller User\n```\n\n_**Select \"For HTTP requests\" in the prompt in your terminal**_\n\nNow let's add our `create()` method:\n\n```js\n\"use strict\";\n\nclass UserController {\n  create({ view }) {\n    return view.render(\"user.create\");\n  }\n}\n\nmodule.exports = UserController;\n```\n\nGo to [`http://127.0.0.1:3333/register`](http://127.0.0.1:3333/register) in your browser and you should see the\nfollowing:\n\n![](/images/adonis-tutorial/1-register-user-form.JPG)\n\nNext, we need to add our `store()` method on our user controller to actually save this user in our database.\n\n```js\n\"use strict\";\n\nconst User = use(\"App/Models/User\");\n\nclass UserController {\n  create({ view }) {\n    return view.render(\"user.create\");\n  }\n\n  async store({ auth, session, request, response }) {\n    const data = request.only([\"username\", \"email\", \"password\"]);\n\n    const user = await User.create(data);\n\n    session.flash({ notification: \"User created successfully\" });\n\n    return response.redirect(\"/\");\n  }\n}\n\nmodule.exports = UserController;\n```\n\nRefresh the page and fill out the user information and hit submit. If all goes well you should see the following:\n\n![](/images/adonis-tutorial/2-user-logged-in-flash.JPG)\n\nLet's double-check and make sure our new user is in our database.\n\n![](/images/adonis-tutorial/3-user-in-database.JPG)\n\nAdonis hashes passwords for us automatically... one less thing for us to worry about.\n\n**Challenge: create the ability to edit and delete users. Look at how we are doing this for our books and modify the code as needed for users.**\n\n## User Login\n\nNow that we can create our users, we need a way for them to login and logout of our application.\n\nFirst, let's create a `SessionContoller` that will handle the logging in and out of users.\n\n````bash\nadonis make:controller Session\n```**_\n\n_**Select \"For HTTP requests\" in the prompt in your terminal**_\n\nWe are also going to need a form for users to login with:\n\n```bash\nadonis make:view session/create\n````\n\nFinally, we are going to need some new routes.\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Route.on(\"/\").render(\"welcome\");\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\nRoute.get(\"books/:id\", \"BookController.show\");\nRoute.get(\"/books/:id/edit\", \"BookController.edit\");\nRoute.put(\"/books/:id\", \"BookController.update\");\nRoute.delete(\"/books/:id\", \"BookController.destroy\");\n\n// Register Users\nRoute.get(\"register\", \"UserController.create\");\nRoute.post(\"register\", \"UserController.store\");\n\n// Session\nRoute.get(\"login\", \"SessionController.create\");\nRoute.post(\"login\", \"SessionController.store\");\n```\n\nWith all that in place, let's create our our login form. Add the following markup to `session/create.edge`\n\n```markup\n@layout('layouts.default')\n\n@section('content')\n  <h1>Login</h1>\n\n  @if(old('notification'))\n    <div class=\"alert alert-danger\">\n      {{ old('notification') }}\n    </div>\n  @endif\n\n  <form action=\"/login\" method=\"POST\">\n    {{ csrfField() }}\n\n    <div class=\"form-group\">\n      <label for=\"\">Email</label>\n      <input type=\"text\" name=\"email\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"\">Password</label>\n      <input type=\"password\" name=\"password\" class=\"form-control\">\n    </div>\n\n    <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n  </form>\n@endsection\n```\n\nNow let's update our controller:\n\n```js\n\"use strict\";\n\nclass SessionController {\n  create({ view }) {\n    return view.render(\"session.create\");\n  }\n\n  async store({ auth, request, response, session }) {\n    const { email, password } = request.all();\n\n    try {\n      await auth.attempt(email, password);\n    } catch (e) {\n      session.flashExcept([\"password\"]);\n\n      session.flash({\n        error: \"We cannot find any account with these credentials.\",\n      });\n\n      return response.redirect(\"login\");\n    }\n\n    session.flash({ notification: \"Logged in successfully\" });\n    return response.redirect(\"/\");\n  }\n}\n\nmodule.exports = SessionController;\n```\n\nGo to [`http://127.0.0.1:3333/login`](http://127.0.0.1:3333/login) and try and login with the user you created in the\nprevious step:\n\n![](/images/adonis-tutorial/4-login-form.JPG)\n\n![](/images/adonis-tutorial/5-login-success.JPG)\n\nGreat! Now we are logged in.\n\n## User Logout\n\nLet's also add the ability for users to logout. First we need to create a new `logout` route:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Route.on(\"/\").render(\"welcome\");\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/create\", \"BookController.create\");\nRoute.post(\"books\", \"BookController.store\");\nRoute.get(\"books/:id\", \"BookController.show\");\nRoute.get(\"/books/:id/edit\", \"BookController.edit\");\nRoute.put(\"/books/:id\", \"BookController.update\");\nRoute.delete(\"/books/:id\", \"BookController.destroy\");\n\n// Register Users\nRoute.get(\"register\", \"UserController.create\");\nRoute.post(\"register\", \"UserController.store\");\n\n// Session\nRoute.get(\"login\", \"SessionController.create\");\nRoute.post(\"login\", \"SessionController.store\");\nRoute.get(\"logout\", \"SessionController.delete\");\n```\n\nThen we need to create a `delete()` method on our controller:\n\n```js\n\"use strict\";\n\nclass SessionController {\n  create({ view }) {\n    return view.render(\"session.create\");\n  }\n\n  async store({ auth, request, response, session }) {\n    const { email, password } = request.all();\n\n    try {\n      await auth.attempt(email, password);\n    } catch (e) {\n      session.flashExcept([\"password\"]);\n\n      session.flash({\n        error: \"We cannot find any account with these credentials.\",\n      });\n\n      return response.redirect(\"login\");\n    }\n\n    session.flash({ notification: \"Logged in successfully\" });\n    return response.redirect(\"/\");\n  }\n\n  async delete({ auth, response, session }) {\n    await auth.logout();\n    session.flash({ notification: \"Logged out successfully\" });\n\n    return response.redirect(\"/\");\n  }\n}\n\nmodule.exports = SessionController;\n```\n\nNow if we refresh the page, and then go to [`http://127.0.0.1:3333/logout`](http://127.0.0.1:3333/logout) we should see\nthe following:\n\n![](/images/adonis-tutorial/6-logged-out-flash.JPG)\n\n## Protecting Routes\n\nNow that we need to secure certain routes so that only logged in users are able to create, edit & delete books. We can do this with [route groups](https://adonisjs.com/docs/4.1/routing#_route_groups) in Adonis.\n\nWe are going to wrap various routes in the following groups:\n\n```js\nRoute.group(() => {}).middleware([\"auth\"]);\n```\n\nRoutes that are inside of the \"auth\" group will only be accessible to logged in users.\n\nUpdate your `routes.js` file with the following:\n\n```js\n\"use strict\";\n\n/*\n    |--------------------------------------------------------------------------\n    | Routes\n    |--------------------------------------------------------------------------\n    |\n    | Http routes are entry points to your web application. You can create\n    | routes for different URL's and bind Controller actions to them.\n    |\n    | A complete guide on routing is available here.\n    | http://adonisjs.com/docs/4.1/routing\n    |\n    */\n\n/** @type {typeof import('@adonisjs/framework/src/Route/Manager')} */\nconst Route = use(\"Route\");\n\n// Must be logged in\nRoute.group(() => {\n  // Session\n  Route.get(\"logout\", \"SessionController.delete\");\n\n  // Register Users\n  Route.get(\"register\", \"UserController.create\");\n  Route.post(\"register\", \"UserController.store\");\n\n  // Books\n  Route.get(\"books/create\", \"BookController.create\");\n  Route.post(\"books\", \"BookController.store\");\n  Route.get(\"/books/:id/edit\", \"BookController.edit\");\n  Route.put(\"/books/:id\", \"BookController.update\");\n  Route.delete(\"/books/:id\", \"BookController.destroy\");\n}).middleware([\"auth\"]);\n\n// Books\nRoute.get(\"/\", \"BookController.index\");\nRoute.get(\"books/:id\", \"BookController.show\");\n\n// Session\nRoute.get(\"login\", \"SessionController.create\");\nRoute.post(\"login\", \"SessionController.store\");\n```\n\n_**The order of your routes is important! This file is read from top to bottom, so it is important that you pay close attention to the order in which you list all of your routes**_\n\nSo now a user must be logged in to register a new user or create, edit or delete books. You can test this by trying to visit any of these routes when not logged in and then visiting the same routes again after logging in.\n\nTo make this easier, let's update our navigation with links to these various routes. Add the following to `resources/views/layouts/_partials/nav.edge`\n\n```html\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a class=\"navbar-brand\" href=\"/\">Alexandria</a>\n  <button\n    class=\"navbar-toggler\"\n    type=\"button\"\n    data-toggle=\"collapse\"\n    data-target=\"#navbarSupportedContent\"\n    aria-controls=\"navbarSupportedContent\"\n    aria-expanded=\"false\"\n    aria-label=\"Toggle navigation\"\n  >\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      @loggedIn\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/books/create\">Add a Book</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/register\">Create a User</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/logout\">Logout</a>\n      </li>\n      @else\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/login\">Login</a>\n      </li>\n      @endloggedIn\n    </ul>\n  </div>\n</nav>\n```\n\nNotice the `@loggedIn` helper method. Anything inside of this will only be shown to logged in users and the routes in the `@else` will be shown to all.\n\nNow our homepage nav bar should look like this:\n\n![](/images/adonis-tutorial/7-login-nav-links.JPG)\n\nClick on the login link, login and the navbar should now look like:\n\n![](/images/adonis-tutorial/8-logged-in-links.JPG)\n\n## Repo\n\nThe code for this section can be found in the [repo](https://github.com/robertguss/howtocode.io-adonis-js-fundamentals)\nunder the branch `5-user-authentication`.\n\n## Wrap Up\n\nIn this lesson, we learned how to create & authenticate users. We also learned how to protect certain routes from non-authenticated users and hide certain portions of our views with built in edge templating methods.\n\nThis wraps up the Adonis JS Fundamentals tutorial. I hope you enjoyed building this application and will continue to build more with this awesome framework!\n"},{"slug":"elixir-basics-basic-data-types","category":"blog","title":"Elixir Basics - 1. Basic Data Types","description":"In this article, we are going to learn the basic data types in Elixir.","tags":["elixir-basics"],"body":"\n## Integers\n\nElixir supports a variety of different Integers.\n\n### Decimal\n\n```elixir\niex(1)> 14\n14\n```\n\n```elixir\niex(19)> i(14)\nTerm\n  14\nData type\n  Integer\nReference modules\n  Integer\nImplemented protocols\n  IEx.Info, Inspect, List.Chars, String.Chars\n```\n\nUnderscores can also be used with Decimal numbers when writing large numbers, making them easier to read.\n\nFor example, one million can be written like so\n\n```elixir\niex(5)> 1_000_000\n1000000\n```\n\n### Hexadecimal\n\n```elixir\niex(2)> 0xcafe\n51966\n```\n\n### Octal\n\n```elixir\niex(3)> 0o765\n501\n```\n\n### Binary\n\n```elixir\niex(4)> 0b1010\n10\n```\n\n## Floats\n\nA Float or Floating-point number is denoted by using a decimal point.\n\n```elixir\niex(6)> 5.0\n5.0\n```\n\n```elixir\nTerm\n  5.0\nData type\n  Float\nReference modules\n  Float\nImplemented protocols\n  IEx.Info, Inspect, List.Chars, String.Chars\n```\n\nFloats also support exponents by using the letter `e` after the last number.\n\n```elixir\niex(16)> 3.14e-2\n0.0314\n```\n\n## Booleans\n\nElixir supports both `true` and `false` as booleans\n\n```elixir\niex(17)> true\ntrue\niex(18)> false\nfalse\niex(19)>\n```\n\n```elixir\nTerm\n  true\nData type\n  Atom\nReference modules\n  Atom\nImplemented protocols\n  IEx.Info, Inspect, List.Chars, String.Chars\n```\n\nIf you are paying attention, you will notice that when you inspect `i(true)` Elixir says that its data type is of type `Atom`. This is because booleans in Elixir are also `atoms`\n\n```elixir\niex(25)> is_atom(true)\ntrue\niex(26)> is_atom(false)\ntrue\n```\n\n## Atoms\n\nAn Atom is a constant whose name is its value.\n\n```elixir\niex(27)> :foo\n:foo\n```\n\n```elixir\niex(37)> i(:foo)\nTerm\n  :foo\nData type\n  Atom\nReference modules\n  Atom\nImplemented protocols\n  IEx.Info, Inspect, List.Chars, String.Chars\n```\n\n```elixir\niex(33)> is_boolean(:true)\ntrue\niex(34)> is_boolean(:false)\ntrue\n```\n\n```elixir\niex(35)> :true === true\ntrue\niex(36)> :false === false\ntrue\n```\n\n## Strings\n\nStrings are denoted with double quotes.\n\n```elixir\niex(38)> \"Hello, World\"\n\"Hello, World\"\n```\n\n```elixir\niex(39)> i(\"Hello, World\")\nTerm\n  \"Hello, World\"\nData type\n  BitString\nByte size\n  12\nDescription\n  This is a string: a UTF-8 encoded binary. It's printed surrounded by\n  \"double quotes\" because all UTF-8 encoded code points in it are printable.\nRaw representation\n  <<72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100>>\nReference modules\n  String, :binary\nImplemented protocols\n  Collectable, IEx.Info, Inspect, List.Chars, String.Chars\n```\n\nElixir also supports string interpolation, like so:\n\n```elixir\niex(41)> string = \"World\"\n\"World\"\niex(42)> \"Hello, #{string}\"\n\"Hello, World\"\n```\n\nStrings can be printed using `IO.puts()` from the `IO` module.\n\n```elixir\niex(43)> IO.puts(\"Hello, World\")\nHello, World\n:ok\n```\n\n## Sources\n\n- [Elixir Docs - Basic Types](https://elixir-lang.org/getting-started/basic-types.html)\n- [Elixir School - Basic Data Types](https://elixirschool.com/en/lessons/basics/basics/#basic-data-types)\n- [Programming Elixir](https://pragprog.com/titles/elixir16/programming-elixir-1-6/)\n"},{"slug":"elixir-basics-lists","category":"blog","title":"Elixir Basics - 2. Lists","description":"In this article, we are going to learn how lists work in Elixir.","tags":["elixir-basics"],"body":"\nLists in Elixir are collections of values and can include multiple types.\n\n```elixir\niex(1)> [5.0, \"Hello, World\", :false]\n[5.0, \"Hello, World\", false]\n```\n\n## Lists are NOT arrays\n\nIt may be tempting to think that lists in Elixir are similar to arrays in other languages, but they are **nothing like arrays**. Lists in Elixir are implemented as \"linked lists\" because they are linked data structures. What exactly does this mean?\n\nTypically with arrays you can access elements within that array via its index. Let's see what happens when we try this with a list in Elxir.\n\n```elixir\niex(3)> list = [5.0, \"Hello, World\", :false]\n[5.0, \"Hello, World\", false]\niex(4)> list[1]\n** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 1\n    (elixir 1.12.3) lib/access.ex:310: Access.get/3\n```\n\nThe reason this does not work is because of the underlying \"link\" or connection/relationship each element within the list has to one another. In a list, each element contains a pointer to the next element in the list. Elements within Lists are not typically stored right next to each other in memory, like they are in arrays.\n\nThis has some performance implications.\n\nIf we want to determine the length of a list, we have to traverse through each and every element to find out how many there are in the list, because they are linked together. After the first element in list, we need to see where its pointer is pointing to, then find that elements pointer to the next element and so on. This means the longer the list is, the more expensive the operation is to calculate its length.\n\nCompare this with arrays.\n\nWhen asking for the length of an array, it simply tells you its length as the length of an array is a known attribute, which means no calculation is necessary.\n\n## Head & Tail\n\nLists in Elixir have both a `head` and `tail`. The head is the first element within the list and the tail is all of the remaining elements within the list.\n\nWe can use the `hd()` function to grab the head of a list.\n\n```elixir\niex(5)> hd([5.0, \"Hello, World\", :false])\n5.0\n```\n\nRemeber, parantheses are optional in Elixir, so you can also do this.\n\n```elixir\niex(6)> hd [5.0, \"Hello, World\", :false]\n5.0\n```\n\nSimilarly, we can get the tail of the list using the `tl()` function.\n\n```elixir\niex(7)> tl [5.0, \"Hello, World\", :false]\n[\"Hello, World\", false]\n```\n\nOk, so why is this important? Understanding the head & tail of lists is helpful for when you need to add or remove elements from a list as some of these operations are more expensive than others. To be clear, when I say more expensive, I mean it will require more computer resources and time to perform the operation.\n\n## Prepend vs Append\n\nOften times you will need to add a new element to an already existing list. Prepending the element onto a list, meaning the element is added to the beginning of the list is a cheap operation. The reason why it is cheap, is because all that is required is knowing where the first element of the list is and adding a new element in front of it.\n\nThis is not the case then appending to a list. When you need to add an element to the end of a list, the entire list has to be traversed to find the last element first, and then the new element can be added after it. Since all of the elements in a list are linked together this is the only way to find out where the last element is.\n\n### Prepend\n\nYou can prepend a new element onto a list like so:\n\n```elixir\niex(9)> list = [5.0, \"Hello, World\", :false]\n[5.0, \"Hello, World\", false]\niex(10)> [14 | list]\n[14, 5.0, \"Hello, World\", false]\n```\n\nThe way this works, is that we are creating a new list using brackets `[]` and placing new element `14` folowed by a pipe `|` and then the list we want to append onto.\n\n`[14 | list]` basically says create a new list where `14` is the first element and the remaning elements are whatever is stored inside of the `list` variable.\n\nRemember, that data structures in Elixir are immutable so this operation has not changed our `list` variable. Rather what is returned is an entirely new list, the original `list` variable has not been modified.\n\n```elixir\niex(9)> list = [5.0, \"Hello, World\", :false]\n[5.0, \"Hello, World\", false]\niex(10)> [14 | list]\n[14, 5.0, \"Hello, World\", false]\niex(11)> list\n[5.0, \"Hello, World\", false]\n```\n\n### Append\n\nYou can append a new element onto a list using the `++` operator.\n\n```elixir\niex(1)> list = [5.0, \"Hello, World\", :false]\n[5.0, \"Hello, World\", false]\niex(2)> list ++ [14]\n[5.0, \"Hello, World\", false, 14]\n```\n\n## List Subtraction\n\nYou can remove elements from a list using the `--` operator.\n\n```elixir\niex(1)> list = [5.0, \"Hello, World\", :false]\niex(3)> list -- [false]\n[5.0, \"Hello, World\"]\n```\n\nList subtraction also uses \"strict comparison\" to match the values.\n\n```elixir\niex(5)> list = [5.0, \"Hello, World\", :false]\n[5.0, \"Hello, World\", false]\niex(6)> list -- [5]\n[5.0, \"Hello, World\", false]\n```\n\nThis does not work, because we are trying to subtract the interger `5` where our list has a `float` of `5.0`.\n\n```elixir\niex(7)> list = [5.0, \"Hello, World\", :false]\n[5.0, \"Hello, World\", false]\niex(8)> list -- [5.0]\n[\"Hello, World\", false]\n```\n\n## Charlists\n\nOne thing to keep in mind regarding lists, is that Elixir is built ontop of Erlang. Erlang has something known as a Charlist which to use looks like a list of integers, but Erlang sees those numbers are representations of ASCII characters.\n\n```elixir\niex(13)> [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100]\n'Hello, World'\n```\n\nIf we inspect `'hello'` you will see that Erlang sees it as a Charlist.\n\n```elixir\niex(12)> i 'Hello, World'\nTerm\n  'Hello, World'\nData type\n  List\nDescription\n  This is a list of integers that is printed as a sequence of characters\n  delimited by single quotes because all the integers in it represent printable\n  ASCII characters. Conventionally, a list of Unicode code points is known as a\n  charlist and a list of ASCII characters is a subset of it.\nRaw representation\n  [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100]\nReference modules\n  List\nImplemented protocols\n  Collectable, Enumerable, IEx.Info, Inspect, List.Chars, String.Chars\n```\n\n## Charlists vs Strings\n\nIt is important to remember that single quotes `''` and double quotes `\"\"` are not the same thing in Elixir. Single quotes are `charlists` while double quotes are `strings`.\n\n```elixir\niex(14)> 'Hello, World' == \"Hello, World\"\nfalse\n```\n\n## Sources\n\n- [Elixir Docs - Linked Lists](https://elixir-lang.org/getting-started/basic-types.html#linked-lists)\n- [Elixir School - Lists](https://elixirschool.com/en/lessons/basics/collections/#lists)\n- [Elixir & Phoenix for Beginners](https://www.knowthen.com/elixir-and-phoenix-for-beginners)\n"},{"slug":"go-basics-1-installing-go-on-a-mac","category":"blog","title":"Go Basics - 1. Installing Go on a Mac","description":"In this article, I am going to show you how to install & setup Go (Golang) on Mac and also setup/configure VS Code for writing Go (Golang) code.","tags":["go-basics"],"body":"\nIn this article, I am going to show you how to install & setup Go on Mac and also setup/configure VS Code for writing Go code.\n\n## Install\n\nThe easiest way to install go is via go's website [Golang.org](https://golang.org/dl). After going to this page, click on the link for 'Apple macOS' and run the installer.\n\nIf you have [Homebrew](https://brew.sh/) installed you can run the command `brew install golang`\n\nAfter you have installed, let's verify and test that everything is working.\n\nRun this command in your terminal:\n\n```bash\ngo version\n\n# You should see an output similar to the following:\n# go version go1.13.7 darwin/amd64\n```\n\n## Workspace Setup\n\nGo has this concept of a 'workspace,' which is where all of your source code and 3rd party packages, binaries etc. are all stored. On a mac this location is under:\n\n```bash\n/Users/<your mac username>/go\n\n# mine is: /Users/rguss/go/src\n```\n\nThis location is also known as your `GOPATH`. The location of this path and various other Go specific ENV Variables can be located with the command:\n\n```bash\ngo env\n```\n\nYou will also need to create 3 directories inside of your `$GOPATH` with the following:\n\n```bash\nmkdir -p $GOPATH $GOPATH/src $GOPATH/pkg $GOPATH/bin\n```\n\n## Hello World\n\nLet's create a simple hello world program and build it to make sure we have everything configured correctly.\n\nInside of your `$GOPATH/src` directory create a directory called `hello` and then a file called `hello.go` inside of it.\n\nIt should look like this `$GOPATH/src/hello/hello.go`\n\nThen paste the following into `hello.go`:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Printf(\"Hello, World!\")\n}\n```\n\nThen build it with the go tool:\n\n```bash\ncd $HOME/go/src/hello\ngo build\n```\n\nThen:\n\n```bash\n./hello\n\n# Output should be:\n# Hello, World!\n```\n\nIf you see `Hello, World!` output to the console, you are all set!\n\n## VS Code\n\nThe final step is to set up and configure [VS Code](https://code.visualstudio.com/) to write Go code. It is as simple as\ninstalling a single extension called [Go](https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go). Once installed, you are all set and ready to start writing Go.\n\n## Additional Resources\n\n- [Golang.org](https://golang.org/)\n- [Go.dev](https://go.dev/)\n"},{"slug":"go-basics-10-pointers-in-go","category":"blog","title":"Go Basics - 10. Pointers in Go","description":"In this article, we are going to explore how pointers work in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how pointers work in the Go programming language.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\ta := 14\n\tb := a\n\n\tfmt.Println(a, b)\n}\n\n/*\n  The result of the code above is:\n  14 14\n*/\n```\n\nIn this first example, we declare the variable `a` to be an `int` of 14. Then we assign the variable `b` to be the value of `a`. Since Go is passing by `value` and not by `reference` in this example, the variable `b` is a copy of `a`.\n\nWe can prove this with the following example.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\ta := 14\n\tb := a\n\n\tfmt.Println(a, b)\n\n\ta = 55\n\n\tfmt.Println(a, b)\n}\n\n/*\n  The result of the code above is:\n  14 14\n  55 14\n*/\n```\n\n## Pointers\n\nWe can use `pointers` to make the `b` variable 'point' to the value of `a`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tvar a int = 14\n\tvar b *int = &a\n\n\tfmt.Println(a, b)\n}\n\n/*\n  The result of the code above is:\n  14 0x40e020\n*/\n```\n\nThe variable `b` now holds the location in memory where the value of the variable `a` is stored. So, the variable `b` now 'points' to the same location in memory as the variable `a`.\n\nLet's break down this new syntax:\n\n```go\nvar b *int = &a\n```\n\nThe `*` symbol is a pointer, and the `&` gives the memory address of the variable that comes after it. So in this example we are saying that variable `b` is a `pointer` to an `int` and it is equal to the same location in memory as the variable `a`.\n\n## Dereferencing pointers\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tvar a int = 14\n\tvar b *int = &a\n\n\tfmt.Println(a, *b)\n}\n\n/*\n  The result of the code above is:\n  14 14\n*/\n```\n\nNotice in this example that the only change made from the previous example is this line:\n\n```go\nfmt.Println(a, *b)\n```\n\nPutting the `*` in front of the variable `b` is called `dereferencing`. This might seem a little confusing because in this line\n\n```go\nvar b *int = &a\n```\n\nthe `*` is a pointer. However, when you then use the same `*` in front\nof a pointer, it is called `dereferencing`, which means **give me the value of this pointer**.\n\nSo to reiterate this example one more time:\n\n```go\nvar b *int = &a\n```\n\nThe `*` symbol is a pointer, and the `&` gives the memory address of the variable that comes after it. So in this example we are saying that variable `b` is a `pointer` to an `int` and it is equal to the same location in memory as the variable `a`.\n\n```go\nfmt.Println(a, *b)\n```\n\nThe `*` symbol, in this case, says `dereference` the pointer `b` and give me the value that it is 'pointing' to.\n\nSo if we modify our earlier example using `pointers` and `dereference` we see that by re-declaring the variable `a` changes the value of the variable `b` since `b` is 'pointing' to the same value as `a`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tvar a int = 14\n\tvar b *int = &a\n\n\tfmt.Println(a, *b)\n\n\ta = 55\n\n\tfmt.Println(a, *b)\n}\n\n/*\n  The result of the code above is:\n  14 14\n  55 55\n*/\n```\n\n## Wrap Up\n\nIn this article, we learned how to create and work with pointers in Go.\n\n## Additional Resources\n\n- [Go by Example](https://gobyexample.com/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-11-functions-in-go","category":"blog","title":"Go Basics - 11. Functions in Go","description":"In this article, we are going to explore how functions work in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how functions work in the Go programming language.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc greeting(msg string) {\n\tfmt.Println(msg)\n}\n\nfunc main() {\n\tgreeting(\"Hello, World!\")\n}\n\n/*\n  The result of the code above is:\n  Hello, World!\n*/\n```\n\nIn this example, we have a function called `greeting()` that takes a `msg` as a parameter, which is of type `string`. The function takes whatever `string` is passed into it and prints it out.\n\nLet's break down the function syntax so we can see all the necessary parts when creating a function in Go.\n\n1. All functions in Go begin with the `func` keyword.\n2. After the `func` keyword comes the name of the function. Which is 'greeting' in the above example.\n3. After the name of the function, a pair of `()` contains the parameters the functions accepts, if there are any.\n4. After the `()` comes a pair of `{}` which contains the functions body, or the code the function executes.\n\n> The `main()` function in Go is a special function as it is the entry point to every single Go application. It does not take any parameters and it cannot return anything.\n\n---\n\n## Parameters of the same type\n\nIn this example, I have modified the `greeting` function to accept two parameters that are both of type `string`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc greeting(greeting string, name string) {\n\tfmt.Println(greeting, name)\n}\n\nfunc main() {\n\tgreeting(\"Hello\", \"Bob\")\n}\n\n/*\n  The result of the code above is:\n  Hello Bob\n*/\n```\n\nHowever, Go provides some helpful 'syntactic sugar' when passing in multiple parameters of the same type, which allows us to do this instead:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc greeting(greeting, name string) {\n\tfmt.Println(greeting, name)\n}\n\nfunc main() {\n\tgreeting(\"Hello\", \"Bob\")\n}\n\n/*\n  The result of the code above is:\n  Hello Bob\n*/\n```\n\n## Variadic functions\n\nA variadic function is a function that can accept any arbitrary number of arguments.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sum(nums ...int) {\n\tfmt.Print(nums, \"\\n\")\n\ttotal := 0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\tfmt.Println(\"Total: \", total)\n}\n\nfunc main() {\n\tsum(1, 2)\n\tsum(1, 2, 3)\n}\n\n/*\n  The result of the code above is:\n  [1 2]\n  Total:  3\n  [1 2 3]\n  Total:  6\n*/\n```\n\nUnder the hood, the Go compiler converts the 'variadic arguments' into a slice. If you are using 'variadic parameters' **you can only have one, and it has to be the last parameter**.\n\nWe can modify our example above to accept additional parameters as well as the 'variadic parameters.'\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sum(msg string, nums ...int) {\n\tfmt.Print(nums, \"\\n\")\n\ttotal := 0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\tfmt.Println(msg, total)\n}\n\nfunc main() {\n\tsum(\"Total: \", 1, 2)\n\tsum(\"Total: \", 1, 2, 3)\n}\n\n/*\n  The result of the code above is:\n  [1 2]\n  Total:  3\n  [1 2 3]\n  Total:  6\n*/\n```\n\n## Return values\n\nFunctions in Go can also `return` data from a function. Since Go is a typed language, we also need to specify the type we expect the function to `return`. We specify the `return` type between the `()` and the `{}`. In this example we are expecting the `sum` function to `return` a type of `int`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sum(nums ...int) int {\n\tfmt.Print(nums, \"\\n\")\n\ttotal := 0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\treturn total\n}\n\nfunc main() {\n\ts := sum(1, 2, 4, 5)\n\tfmt.Println(\"Total: \", s)\n}\n\n/*\n  The result of the code above is:\n  [1 2 4 5]\n  Total:  12\n*/\n```\n\n## Returning pointers\n\nGo is unique in that it allows you to return a pointer to a value, like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sum(nums ...int) *int {\n\tfmt.Print(nums, \"\\n\")\n\ttotal := 0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\treturn &total\n}\n\nfunc main() {\n\ts := sum(1, 2, 4, 5)\n\tfmt.Println(\"Total: \", *s)\n}\n\n/*\n  The result of the code above is:\n  [1 2 4 5]\n  Total:  12\n*/\n```\n\nThe result is the same as the previous example; however, in the previous example, we were returning a copy of `total`. In this example, we are returning a `pointer` to `total` and therefore are modifying the original value.\n\n## Multiple return values\n\nFunctions in Go can also return more than one value at a time.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc divide(a, b int) (int, error) {\n\tif b == 0 {\n\t\treturn 0, fmt.Errorf(\"Cannot divide by zero\")\n\t}\n\n\treturn a / b, nil // return nil since there is no error at this point\n}\n\nfunc main() {\n\td, err := divide(5, 0)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(d)\n}\n\n/*\n  The result of the code above is:\n  Cannot divide by zero\n*/\n```\n\nMultiple return values are used often in Go, especially functions that return not only a value, but also an error if something went wrong.\n\n## Methods\n\nFunctions that are attached to `types` are called `methods`. Typically, you will most often see `methods` that are attached to `structs`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype greeter struct {\n\tgreeting string\n\tname     string\n}\n\nfunc (g greeter) greet() {\n\tfmt.Println(g.greeting, g.name)\n}\n\nfunc main() {\n\tg := greeter{\n\t\tgreeting: \"Hello\",\n\t\tname:     \"John\",\n\t}\n\n\tg.greet()\n}\n\n/*\n  The result of the code above is:\n  Hello John\n*/\n```\n\nLet's break down the method syntax:\n\n```go\nfunc (g greeter) greet() {\n\tfmt.Println(g.greeting, g.name)\n}\n```\n\n1. Like any other function, we begin with the `func` keyword\n2. `(g greeter)` tells Go which type this method is attached to. This method will received the greeter `struct` and will\n   set it to the variable `g`.\n3. `greet()` - the name of the function.\n4. `fmt.Println(g.greeting, g.name)` - since we are passing in the `greeter` struct, we have access to its properties,\n   like `greeting` and `name`.\n\n## Wrap Up\n\nIn this article, we learned how to create and work with functions in Go.\n\n## Additional Resources\n\n- [Go by Example](https://gobyexample.com/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-2-variables-in-go","category":"blog","title":"Go Basics - 2. Variables in Go","description":"In this article, I am going to be covering how variables work in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, I am going to be covering how variables work in Golang. Here are some of the topics that are discussed.\n\n- Variable declaration\n- Variable shadowing\n- Variable Scope\n- Variable Type conversion\n\n## Variable declaration\n\nThere are 3 different ways you can declare variables in Go.\n\n### Variable declaration - Method 1\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar foo string\n\tfoo = \"Hello, World!\"\n\n\tfmt.Println(foo)\n}\n\n/*\n  The result of the code above is: Hello, World!\n*/\n```\n\n### Variable declaration - Method 2\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar foo string = \"Hello, World!\"\n\n\tfmt.Println(foo)\n}\n\n/*\n  The result of the code above is: Hello, World!\n*/\n```\n\n### Variable declaration - Method 3 (The most common and widely used)\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfoo := \"Hello, World!\"\n\n\tfmt.Println(foo)\n}\n\n/*\n  The result of the code above is: Hello, World!\n*/\n```\n\nLet's look at some common reasons why you might use one method vs another.\n\n```go\n// Method #1\nvar foo string\n```\n\nThis method is useful when you want to initialize a variable and then set it sometime later on in your code. Say for instance after looping through something.\n\n```go\n// Method #2\nvar foo float32 = 14\n```\n\nThis method is useful when you want to be very specific about the type that the variable is. Sometimes the Go compiler will not correctly infer the type you want. Using this method ensures the Go compiler knows the exact type you want.\n\n```go\n// Method #3\nfoo := 14\n```\n\nThis is the most common method of declaring variables. If you are comfortable with the types that the Go compiler infers, use this method.\n\n## Package Level Variables\n\nIn the previous examples, all of our variables are declared inside of the main function, like so:\n\n```go\npackage main\n\nfunc main() {\n\tfoo := \"Hello, World!\"\n\n}\n```\n\nHowever, we can also declare variables at the `package` level, a.k.a. outside of the `func main()` or any function for that matter, like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nvar foo string = \"Hello, World!\"\n\nfunc main() {\n\tfmt.Println(foo)\n\n}\n\n/*\n  The result of the code above is: Hello, World!\n*/\n```\n\n_**Note: We cannot use the `:=` syntax to declare variables outside of functions!**_\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfoo := \"Hello, World!\"\n\nfunc main() {\n\tfmt.Println(foo)\n\n}\n\n/*\n  The result of the code above is:\n  syntax error: non-declaration statement outside function body\n*/\n```\n\n## Declaring multiple variables at the same time\n\nYou can also declare multiple variables, at the package level, at the same time, like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nvar (\n  name string = \"Robert\"\n  age int = 34\n  favoriteFood string = \"Sushi\"\n)\n\nfunc main() {\n\tfmt.Printf(\"My name is %v, I am %v, and my favorite food is %v\", name, age, favoriteFood)\n}\n\n/*\n  The result of the code above is:\n  My name is Robert, I am 34, and my favorite food is Sushi\n*/\n```\n\n## Variable shadowing\n\nVariable shadowing has to do with `scope`. Let's take a look at an example:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nvar name string = \"Robert\"\n\nfunc main() {\n  var name string = \"John\"\n\n\tfmt.Printf(name)\n}\n\n/*\n  The result of the code above is: John\n*/\n```\n\nGo uses the variable that is closest in `scope`, which in this case is the string `John`. This works, because one variable is declared at the `package` level, while the other is declared inside of a `function`, a.k.a. `shadowing`.\n\nYou **cannot** however, do this:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  var name string = \"John\"\n  name := \"Robert\"\n\n\tfmt.Printf(name)\n}\n\n/*\n  The result of the code above is:\n  no new variables on left side of :=\n*/\n```\n\nThis does not work because both of these variables are within the same `scope`.\n\n## Unused variables\n\nGo has some great features that help to keep your code clean. If you declare a variable, you must use it. Otherwise, the compiler will throw an error, like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  age := 50\n  name := \"Robert\"\n\n\tfmt.Printf(name)\n}\n\n/*\n  The result of the code above is:\n  age declared and not used\n*/\n```\n\n## Variable Scope\n\n```go\npackage main\n\nvar name string = \"Robert\"\n\nfunc main() {\n\n}\n```\n\nVariables that being with a lowercase letter, like the `name` variable above, are scoped to the `package`, ie: it can only be used inside of this `package`.\n\nHowever, if I use an upper case letter, like so:\n\n```go\npackage main\n\nvar Name string = \"Robert\"\n\nfunc main() {\n\n}\n```\n\nThe Go compiler will `export` or `expose` this function outside of this package for use inside of other packages.\n\nIf a variable is declared inside of a function, like so:\n\n```go\npackage main\n\nfunc main() {\n  var name string = \"Robert\"\n}\n```\n\nThen the variable is `block` scoped and can only be accessed inside of the `main()` function.\n\n## Variable Type conversion\n\nTake a look at this exmaple:\n\n```go\npackage main\n\nimport(\"fmt\")\n\nfunc main() {\n  age := 14\n  fmt.Printf(\"%v, %T\\n\", age, age)\n\n  var ageFloat float32 = float32(age)\n  fmt.Printf(\"%v, %T\", ageFloat, ageFloat)\n}\n\n/*\n  The result of the code above is:\n  14, int\n  14, float32\n*/\n```\n\n_**`%v` stands for value and `%T` stands for type**_\n\nUsing the `float32()` function, I can easily change the type of `int` to a `float32`.\n\n## Converting numbers to strings\n\nA `string` in Go is a `string` of `bytes`. So if we wanted to convert an `int` to a `string`, we would need to use an additional package, like so:\n\n```go\npackage main\n\nimport(\n  \"fmt\"\n  \"strconv\"\n)\n\nfunc main() {\n  age := 14\n  fmt.Printf(\"%v, %T\\n\", age, age)\n\n  var ageString string = strconv.Itoa(age)\n  fmt.Printf(\"%v, %T\", ageString, ageString)\n}\n\n/*\n  The result of the code above is:\n  14, int\n  14, string\n*/\n```\n\nOtherwise, you get an unexpected result, like this:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tage := 47\n\tfmt.Printf(\"%v, %T\\n\", age, age)\n\n\tvar ageString string = string(age)\n\tfmt.Printf(\"%v, %T\", ageString, ageString)\n}\n\n\n/*\n  The result of the code above is:\n  14, int\n\u000e, string\n*/\n```\n\nThe reason is that since a `string` in Go is a `string` of `bytes` it is looking for the ascii character represented by the number 14, which in this case is the character `/`.\n\n## Wrap Up\n\nIn this article, we discussed the following topics when it comes to variables:\n\n- Variable declaration\n- Variable shadowing\n- Variable Scope\n- Variable Type conversion\n\n## Additional Resources\n\n- [Golang.org](https://golang.org/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-3-primitives-in-go","category":"blog","title":"Go Basics - 3. Primitives in Go","description":"In this article, we are going to explore some of the primitives of the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore some of the primitives of the Go programming language.\n\n## Bool type\n\nBooleans are in just about every single programming language, and Go is no exception. They represent the value of either `true` or `false`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  var b bool = true\n\tfmt.Printf(\"%v, %T\", b, b)\n}\n\n/*\n  The result of the code above is:\n  true, bool\n*/\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  var b bool = false\n\tfmt.Printf(\"%v, %T\", b, b)\n}\n\n/*\n  The result of the code above is:\n  false, bool\n*/\n```\n\nAn interesting thing to note is that booleans are given a `zero` value when they are initialized. This means that the `bool` type is given the value of `false` unless otherwise specified.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  var b bool\n\tfmt.Printf(\"%v, %T\", b, b)\n}\n\n/*\n  The result of the code above is:\n  false, bool\n*/\n```\n\n## Numeric Types\n\nGolang has several different numeric types. The first one we are going to learn about is the `int` type.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  i := 14\n\tfmt.Printf(\"%v, %T\", i, i)\n}\n\n/*\n  The result of the code above is:\n  14, int\n*/\n```\n\nThere are 4 different `signed` integer types in the language, each representing a specific range of numbers.\n\n| Int Type | Minimum                    | Maximum                   |\n| -------- | -------------------------- | ------------------------- |\n| int8     | -128                       | 127                       |\n| int16    | -32,768                    | 32,767                    |\n| int32    | -2,147,483,648             | 2,147,483,647             |\n| int64    | -9,223,372,036,854,775,808 | 9,223,372,036,854,775,807 |\n\nThere are 4 different `unsigned` integer types in the language, each representing a specific range of numbers.\n\n| Int Type | Minimum | Maximum                    |\n| -------- | ------- | -------------------------- |\n| uint8    | 0       | 255                        |\n| uint16   | 0       | 65,535                     |\n| uint32   | 0       | 4,294,967,295              |\n| uint64   | 0       | 18,446,744,073,709,551,615 |\n\n- source: [I Spy Code - Go](https://ispycode.com/GO/Types/Integer-Min-Max-Ranges)\n\nLet's now look at some basic mathematical operations we can perform upon these numbers.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  a := 10\n  b := 2\n\tfmt.Println(a + b) // addition\n\tfmt.Println(a - b) // subtraction\n\tfmt.Println(a * b) // multiplication\n\tfmt.Println(a / b) // division\n\tfmt.Println(a % b) // remainder (sometimes called modulus in other languages)\n}\n\n/*\n  The result of the code above is:\n  12\n  8\n  20\n  5\n  0\n*/\n```\n\n## Floating point numbers or decimals\n\n| Float Type | Minimum                                        | Maximum                                        |\n| ---------- | ---------------------------------------------- | ---------------------------------------------- |\n| float32    | 1.401298464324817070923729583289916131280e-45  | 3.40282346638528859811704183484516925440e+38   |\n| float64    | 4.940656458412465441765687928682213723651e-324 | 1.797693134862315708145274237317043567981e+308 |\n\n- source [Golang.org Math package](https://golang.org/pkg/math/#pkg-constants)\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  i := 3.14 // defaults to a float64 type\n\tfmt.Printf(\"%v, %T\", i, i)\n}\n\n/*\n  The result of the code above is:\n  3.14, float64\n*/\n```\n\nBasic mathematical operations with floats:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  a := 3.14\n  b := 2.5\n\tfmt.Println(a + b) // addition\n\tfmt.Println(a - b) // subtraction\n\tfmt.Println(a * b) // multiplication\n\tfmt.Println(a / b) // division\n}\n\n/*\n  The result of the code above is:\n  5.640000000000001\n  0.6400000000000001\n  7.8500000000000005\n  1.256\n*/\n```\n\n_**The remainder operator `%` is only available on integer types, **not** floats.**_\n\n## String Type\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  s := \"Hello, World!\"\n  fmt.Printf(\"%v, %T\", s, s)\n}\n\n/*\n  The result of the code above is:\n  Hello, World!, string\n*/\n```\n\nStrings in Go are collections of bytes. You can access individual characters in a string just like you would access items in an array.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  s := \"Hello, World!\"\n  fmt.Printf(\"%v, %T\", s[3], s[3])\n}\n\n/*\n  The result of the code above is:\n  108, uint8\n*/\n```\n\nStrings are concatenated with the `+` operator.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  s := \"Hello\"\n  w := \", World!\"\n  fmt.Println(s + w)\n}\n\n/*\n  The result of the code above is:\n  Hello, World!\n*/\n```\n\nYou can also convert a string to a collection of bytes, known as a `slice` in Go.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  s := \"Hello, World!\"\n  b := []byte(s)\n  fmt.Printf(\"%v, %T\", b, b)\n}\n\n/*\n  The result of the code above is:\n  [72 101 108 108 111 44 32 87 111 114 108 100 33], []uint8\n*/\n```\n\n## Rune Type\n\nThe difference between a `string` and a `rune` is that a `string` represents any UTF-8 character and a `rune` represents any UTF-32 character or an `int32` type.\n\nA `string` is declared with `\"\"` double quotes while a `rune` is declared with `''` single quotes\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  r := 't'\n  fmt.Printf(\"%v, %T\", r, r)\n}\n\n/*\n  The result of the code above is:\n  116, int32\n*/\n```\n\n## Wrap Up\n\nIn this article, we learned about the following primitives in Go.\n\n- Boolean Type\n- Integers (signed & unsigned)\n- Arithmetic Operations\n- Floating point numbers (32bit & 64bit)\n- Strings\n- Runes\n\n## Additional Resources\n\n- [Golang.org Packages](https://golang.org/pkg)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-4-constants-in-go","category":"blog","title":"Go Basics - 4. Constants in Go","description":"In this article, we are going to explore how to work with constants in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how to work with constants in the Go programming language. We will discuss the\nfollowing topics:\n\n- Naming convention\n- Typed constants\n- Untyped constants\n- Enumerated constants\n\n## Naming convention\n\nIn many languages, `constants` are typically named with Capital letters. However, remember that in Go, anything that begins with a Capital letter will be exported. So unless you want to export a constant, you should follow the same naming conventions with constants as you do with variables.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  const helloConst string = \"Hello!\"\n\tfmt.Printf(\"%v, %T\", helloConst, helloConst)\n}\n\n/*\n  The result of the code above is:\n  Hello!, string\n*/\n```\n\nConstants cannot be altered or re-assigned, hence the name `constant`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  const helloConst string = \"Hello!\"\n  helloConst = \"Hi!\"\n\tfmt.Printf(\"%v, %T\", helloConst, helloConst)\n}\n\n/*\n  The result of the code above is:\n  cannot assign to helloConst\n*/\n```\n\nInterestingly, `constants` in Go can be `shadowed` just like [variables](/go-basics-2-variables-in-go).\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nconst helloConst string = \"Hello!\"\n\nfunc main() {\n  const helloConst = \"Hi!\"\n\tfmt.Printf(\"%v, %T\", helloConst, helloConst)\n}\n\n/*\n  The result of the code above is:\n  Hi!, string\n*/\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nconst helloConst string = \"Hello!\"\n\nfunc main() {\n  // const helloConst = \"Hi!\"\n\tfmt.Printf(\"%v, %T\", helloConst, helloConst)\n}\n\n/*\n  The result of the code above is:\n  Hello!, string\n*/\n```\n\n## Untyped constants\n\nIn the previous examples, I have been using `typed` constants. Meaning that I am explicitly declaring the type of a constant.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  const helloConst string = \"Hi!\"\n\tfmt.Printf(\"%v, %T\", helloConst, helloConst)\n}\n\n/*\n  The result of the code above is:\n  Hi!, string\n*/\n```\n\nHowever, we can let the Go compiler infer the constant type, similar to how we declare variables with the `:=` operator.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  const helloConst = \"Hi!\"\n\tfmt.Printf(\"%v, %T\", helloConst, helloConst)\n}\n\n/*\n  The result of the code above is:\n  Hi!, string\n*/\n```\n\n## Enumerated constants\n\nIn this next example, we are going to use a special symbol called `iota` which is a counter which we can use when creating `enumerated constants`\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nconst a = iota\n\nfunc main() {\n\tfmt.Printf(\"%v, %T\", a, a)\n}\n\n/*\n  The result of the code above is:\n  0, int\n*/\n```\n\nWe can also declare multiple `constants` just like `variables` like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nconst(\n  a = iota\n  b = iota\n  c = iota\n)\n\nfunc main() {\n\tfmt.Printf(\"%v, %T\\n\", a, a)\n\tfmt.Printf(\"%v, %T\\n\", b, b)\n\tfmt.Printf(\"%v, %T\\n\", c, c)\n}\n\n/*\n  The result of the code above is:\n  0, int\n  1, int\n  2, int\n*/\n```\n\nAnother interesting thing we can do is allow the compiler to infer the other constants that follow the first constant declaration.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nconst(\n  a = iota\n  b\n  c\n)\n\nfunc main() {\n\tfmt.Printf(\"%v, %T\\n\", a, a)\n\tfmt.Printf(\"%v, %T\\n\", b, b)\n\tfmt.Printf(\"%v, %T\\n\", c, c)\n}\n\n/*\n  The result of the code above is:\n  0, int\n  1, int\n  2, int\n*/\n```\n\n`iota` is scoped to the constant block in which it is used.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nconst (\n\ta = iota\n\tb\n\tc\n)\n\nconst (\n\ta2 = iota\n\tb2\n\tc2\n)\n\nfunc main() {\n\tfmt.Printf(\"%v, %T\\n\", a, a)\n\tfmt.Printf(\"%v, %T\\n\", b, b)\n\tfmt.Printf(\"%v, %T\\n\", c, c)\n\n\tfmt.Printf(\"%v, %T\\n\", a2, a2)\n\tfmt.Printf(\"%v, %T\\n\", b2, b2)\n\tfmt.Printf(\"%v, %T\\n\", c2, c2)\n}\n\n/*\n  The result of the code above is:\n  0, int\n  1, int\n  2, int\n  0, int\n  1, int\n  2, int\n*/\n```\n\n## Wrap Up\n\nIn this article, we learned about the following about constants in Go.\n\n- Naming convention\n- Typed constants\n- Untyped constants\n- Enumerated constants\n\n## Additional Resources\n\n- [Golang.org Packages](https://golang.org/pkg)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-5-arrays-and-slices-in-go","category":"blog","title":"Go Basics - 5. Arrays & Slices in Go","description":"In this article, we are going to explore how to work with arrays & slices in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how to work with arrays & slices in the Go programming language.\n\n## Arrays\n\nArrays, unlike slices, are fixed in length. Meaning, that when you create them, you need to specify how many elements are within the array. Arrays can only contain one type, meaning you **cannot** have an array with both `string` and `int` types.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ti := [3]int{1, 2, 3}\n\tfmt.Printf(\"%v, %T\", i, i)\n}\n\n/*\n  The result of the code above is:\n  [1 2 3], [3]int\n*/\n```\n\nThe syntax for an array in Go works like this. We first use `[]` which represents the array. `[3]` says that there are 3 elements in this array. `[3]int` says that the 3 items in the array are of the type `int`. `{1, 2, 3}` are the values within the array.\n\nSo in the example above, we are telling the compiler that variable `i` is an array that contains 3 `int`'s whose values are 1, 2, 3.\n\nYou can also create arrays with an alternative syntax like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ti := [...]int{1, 2, 3}\n\tfmt.Printf(\"%v, %T\", i, i)\n}\n\n/*\n  The result of the code above is:\n  [1 2 3], [3]int\n*/\n```\n\nThe `[...]` tells the compiler to create an array to the exact length of the values I am creating it with. Since this array contains three values, the length is also 3.\n\nArrays can also be initialized without values as well.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar i [3]int\n\tfmt.Printf(\"%v, %T\", i, i)\n}\n\n/*\n  The result of the code above is:\n  [0 0 0], [3]int\n*/\n```\n\nSince we are creating an array with the type of `int` the compiler fills it with and `int`'s zero value, which in this case is zero. If we do the same thing with strings, we get the following:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar s [3]string\n\tfmt.Printf(\"%v, %T\", s, s)\n}\n\n/*\n  The result of the code above is:\n  [  ], [3]string\n*/\n```\n\nTo populate our array, we need to specify the index in the array and then give it a value.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  var s [3]string\n  s[0] = \"Hello\" // place the string \"Hello\" as the 1st item\n  s[1] = \"World\" // place the string \"World\" as the 2nd item\n\tfmt.Printf(\"%v, %T\", s, s)\n}\n\n/*\n  The result of the code above is:\n  [Hello World ], [3]string\n*/\n```\n\nTo get an element out of the array, we use the same `[]` syntax to specify which element we want from the array.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  var s [3]string\n  s[0] = \"Hello\"\n  s[1] = \"World\"\n\tfmt.Printf(\"%v\", s[0]) // s[0] says give me the first item in the array\n}\n\n/*\n  The result of the code above is:\n  Hello\n*/\n```\n\nIf we need to get the length of an array, we can use the built-in `len()` function.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  var s [3]string\n  s[0] = \"Hello\"\n  s[1] = \"World\"\n\tfmt.Printf(\"%v\", len(s))\n}\n\n/*\n  The result of the code above is:\n  3\n*/\n```\n\n_**Remember that even though there are only 2 elements in the example above, when we created the array we specified that it would contain 3 elements of type `string`.**_\n\nArrays can also contain other arrays.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar a [3][3]int\n\ta[0] = [3]int{1, 2, 3}\n\ta[1] = [3]int{4, 5, 6}\n\ta[2] = [3]int{7, 8, 9}\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  [[1 2 3] [4 5 6] [7 8 9]]\n*/\n```\n\nArrays are also passed by value in Go. So when you make a copy of the array, you make a copy and do not reference the original.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := [3]int{1, 2, 3}\n\tb := a\n\tb[1] = 14\n\n\tfmt.Println(a)\n\tfmt.Println(b)\n\tfmt.Println(a)\n}\n\n\n\n/*\n  The result of the code above is:\n  [1 2 3]\n  [1 14 3]\n  [1 2 3]\n*/\n```\n\nIf you need to modify the original array, you can use a `pointer`. You can learn more about pointers in [Go Basics - 10. Pointers in Go](/go-basics-10-pointers-in-go).\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := [3]int{1, 2, 3}\n\tb := &a // & is the reference operator\n\tb[1] = 14\n\n\tfmt.Println(a)\n\tfmt.Println(b)\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  [1 14 3]\n  &[1 14 3] // this means that the variable b is 'pointing' to a, not making a copy of it like earlier\n  [1 14 3]\n*/\n```\n\n## Slice\n\nSlices are more common in Go, as they behave similarly to arrays. However, they **are not** initialized with a specific length.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ts := []int{1, 2, 3}\n\tfmt.Printf(\"%v, %T\", s, s)\n}\n\n/*\n  The result of the code above is:\n  [1 2 3], []int\n*/\n```\n\nWe use the same syntax as arrays **without** specifying the length.\n\nIf we need to get the length of a slice, we can use the built-in `len()` function.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ts := []int{1, 2, 3}\n\tfmt.Printf(\"%v\", len(s))\n}\n\n/*\n  The result of the code above is:\n  3\n*/\n```\n\nSlices, unlike arrays, are passed by reference, **not by value**. This means that when you make a copy of a slice, you are pointing to the original.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := []int{1, 2, 3}\n\tb := a\n\tb[1] = 14\n\n\tfmt.Println(a)\n\tfmt.Println(b)\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  [1 14 3]\n  [1 14 3]\n  [1 14 3]\n*/\n```\n\nSlices can also be created with a special syntax when you want to only get some of the elements out of the original array, like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := []int{1, 2, 3, 4, 5}\n\tb := a[:]   // all of the elements in a\n\tc := a[1:]  // start from the 2nd element to the end\n\td := a[:3]  // the first 3 elements\n\te := a[2:4] // start from the 3rd element to the 4th\n\n\tfmt.Println(a)\n\tfmt.Println(b)\n\tfmt.Println(c)\n\tfmt.Println(d)\n\tfmt.Println(e)\n}\n\n/*\n  The result of the code above is:\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [2 3 4 5]\n  [1 2 3]\n  [3 4]\n*/\n```\n\nThe number on the left side, `3:` is **inclusive**, while the number on the right side `:3` is **exclusive**.\n\n> These same slicing operations also work for arrays!\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := [...]int{1, 2, 3, 4, 5}\n\tb := a[:]   // all of the elements in a\n\tc := a[1:]  // start from the 2nd element to the end\n\td := a[:3]  // the first 3 elements\n\te := a[2:4] // start from the 3rd element to the 4th\n\n\tfmt.Printf(\"%v, %T\\n\", a, a)\n\tfmt.Println(b)\n\tfmt.Println(c)\n\tfmt.Println(d)\n\tfmt.Println(e)\n}\n\n/*\n  The result of the code above is:\n  [1 2 3 4 5], [5]int\n  [1 2 3 4 5]\n  [2 3 4 5]\n  [1 2 3]\n  [3 4]\n*/\n```\n\nTo add items to our slice, we can use the `append()` function.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := []int{}\n\n\tfmt.Println(a)\n\n\ta = append(a, 1)\n\ta = append(a, 2)\n\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  []\n  [1 2]\n*/\n```\n\n`append()` can also take multiple values at the same time, also known as `variadic arguments`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := []int{}\n\n\tfmt.Println(a)\n\n\ta = append(a, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  []\n  [1 2 3 4 5 6 7 8 9 10]\n*/\n```\n\nyou can also concatenate 2 slices together like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n  a := []int{4, 5, 6}\n  b := []int{1, 2, 3}\n\n\tfmt.Println(a)\n\n\ta = append(a, b...) // the ... operator extracts all of the values from the slice b\n\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  [4 5 6]\n  [4 5 6 1 2 3]\n*/\n```\n\nSince `a` is a `slice` of `int`, it can only accept the `int` type. If we try to append `b`, which is a `slice` of `int` the compiler fails. However, we can use `...` to extract or `destructure` the `slice` to get all of the\nvalues from it and append those values to `a`.\n\n## Wrap Up\n\nIn this article, we learned about how to create and work with arrays and slices in go.\n\n## Additional Resources\n\n- [Golang.org Packages](https://golang.org/pkg)\n- [Go by Example](https://gobyexample.com/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-6-maps-in-go","category":"blog","title":"Go Basics - 6. Maps in Go","description":"In this article, we are going to explore how to work with maps in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how to work with maps in the Go programming language.\n\n## Maps\n\nMaps in go are `key` `value` data types.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tfmt.Println(ages)\n}\n\n/*\n  The result of the code above is:\n  map[Bob:76 Emily:21 Joe:33 John:22 Mary:45]\n*/\n```\n\nWhen declaring a map, the `key` and `value` data types must be consistent. So in the above example, all of the `keys` must be of type `string`, and all of the `values` must be of type `int`.\n\nYou can create maps with the `make()` function as well.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := make(map[string]int)\n\n\tages = map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tfmt.Println(ages)\n}\n\n/*\n  The result of the code above is:\n  map[Bob:76 Emily:21 Joe:33 John:22 Mary:45]\n*/\n```\n\nThis syntax is helpful if you want to create a map but populate the data for it at a later time and not immediately upon creation like we did in the previous example.\n\nWe can get data out of a map, using the `[]` syntax, like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tfmt.Println(ages[\"Joe\"])\n}\n\n/*\n  The result of the code above is:\n  33\n*/\n```\n\nWe can also add data to our maps like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tages[\"Elliot\"] = 55\n\n\tfmt.Println(ages[\"Elliot\"])\n}\n\n/*\n  The result of the code above is:\n  55\n*/\n```\n\nSomething important to keep in mind is that when printing out a map, the order of the elements inside of the map is not guaranteed to be the same way in which they were added or declared, unlike `slices` or `arrays`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tfmt.Println(ages)\n\n\tages[\"Elliot\"] = 55\n\n\tfmt.Println(ages)\n}\n\n/*\n  The result of the code above is:\n  map[Bob:76 Emily:21 Joe:33 John:22 Mary:45]\n  map[Bob:76 Elliot:55 Emily:21 Joe:33 John:22 Mary:45]\n*/\n```\n\nWe can remove items from a `map` using the `delete()` function.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tdelete(ages, \"Mary\")\n\n\tfmt.Println(ages)\n}\n\n/*\n  The result of the code above is:\n  map[Bob:76 Emily:21 Joe:33 John:22]\n*/\n```\n\nSomething to keep in mind when deleting items from a map is if you\ntry to access a deleted item again; the compiler gives you a value of `0`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tdelete(ages, \"Mary\")\n\n\tfmt.Println(ages[\"Mary\"])\n}\n\n/*\n  The result of the code above is:\n  0\n*/\n```\n\nOr let's say you make a typo when trying to access a key.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tdelete(ages, \"Mary\")\n\n\tfmt.Println(ages[\"May\"])\n}\n\n/*\n  The result of the code above is:\n  0\n*/\n```\n\nThis can potentially be very problematic and confusing, so we can also use the `ok` variable to make sure the item is not in the map.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tdelete(ages, \"Mary\")\n\n\tmary, ok := ages[\"Mary\"]\n\n\tfmt.Println(mary, ok)\n}\n\n/*\n  The result of the code above is:\n  0 false\n*/\n```\n\nThe `ok` variable is false if the item does not exist in the map. True, if found.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tjohn, ok := ages[\"John\"]\n\n\tfmt.Println(john, ok)\n}\n\n/*\n  The result of the code above is:\n  22 true\n*/\n```\n\n_**`ok` is not a special keyword or variable in Go, it is simply a convention that Go programmers follow.**_\n\nIf we need to get the length of our `map` we can use the `len()` function just like we do for `arrays` & `slices`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tfmt.Println(len(ages))\n}\n\n/*\n  The result of the code above is:\n  5\n*/\n```\n\nMaps are passed by reference, so if you make a copy of a map and change that copies data, you modify the original map.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tages := map[string]int{\n\t\t\"John\":  22,\n\t\t\"Mary\":  45,\n\t\t\"Joe\":   33,\n\t\t\"Bob\":   76,\n\t\t\"Emily\": 21,\n\t}\n\n\tages2 := ages\n\n\tdelete(ages2, \"Bob\")\n\n\tfmt.Println(ages2)\n\tfmt.Println(ages)\n}\n\n/*\n  The result of the code above is:\n  map[Emily:21 Joe:33 John:22 Mary:45]\n  map[Emily:21 Joe:33 John:22 Mary:45]\n*/\n```\n\n## Wrap Up\n\nIn this article, we learned about how to create and work with maps in go.\n\n## Additional Resources\n\n- [Golang.org Packages](https://golang.org/pkg)\n- [Go by Example](https://gobyexample.com/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-7-structs-in-go","category":"blog","title":"Go Basics - 7. Structs in Go","description":"In this article, we are going to explore how to work with structs in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how to work with structs in the Go programming language.\n\n## Structs\n\n`Structs` are a data type in Go that allow you to create custom 'objects' to represent your data however you like. Since they are a [typed collection of fields](https://gobyexample.com/structs), they are incredibly flexible, because a `struct` can contain multiple different `types`. Whereas, a `slice` `array` or `map` must contain the same `type`.\n\nYou can think of `structs` as 'structured data.'\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Person struct {\n\tname          string\n\tage           int\n\toccupation    string\n\tfavoriteFoods []string\n}\n\nfunc main() {\n\trobert := Person{\n\t\tname:       \"Robert Guss\",\n\t\tage:        34,\n\t\toccupation: \"Developer\",\n\t\tfavoriteFoods: []string{\n\t\t\t\"Sushi\",\n\t\t\t\"Steak\",\n\t\t\t\"Pasta\",\n\t\t},\n\t}\n\n\tfmt.Println(robert)\n}\n\n/*\n  The result of the code above is:\n  {Robert Guss 34 Developer [Sushi Steak Pasta]}\n*/\n```\n\nTo access or get data out of our `struct` we use the `.` syntax.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Person struct {\n\tname          string\n\tage           int\n\toccupation    string\n\tfavoriteFoods []string\n}\n\nfunc main() {\n\trobert := Person{\n\t\tname:       \"Robert Guss\",\n\t\tage:        34,\n\t\toccupation: \"Developer\",\n\t\tfavoriteFoods: []string{\n\t\t\t\"Sushi\",\n\t\t\t\"Steak\",\n\t\t\t\"Pasta\",\n\t\t},\n\t}\n\n\tfmt.Println(robert.occupation)\n}\n\n/*\n  The result of the code above is:\n  Developer\n*/\n```\n\nWhen creating or instantiating our `structs` we can also use what is known as the 'positional syntax,' which saves us some keystrokes.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Person struct {\n\tname          string\n\tage           int\n\toccupation    string\n\tfavoriteFoods []string\n}\n\nfunc main() {\n\trobert := Person{\n\t\t\"Robert Guss\",\n\t\t34,\n\t\t\"Developer\",\n\t\t[]string{\n\t\t\t\"Sushi\",\n\t\t\t\"Steak\",\n\t\t\t\"Pasta\",\n\t\t},\n\t}\n\n\tfmt.Println(robert)\n}\n\n/*\n  The result of the code above is:\n  {Robert Guss 34 Developer [Sushi Steak Pasta]}\n*/\n```\n\nEven though this syntax is possible, it is recommended **not** to use it, as it is not clear what those values are. In this trivial example, it is not a big deal, but within the context of a larger Go program, it can be a maintenance nightmare. If, at some point, our original `struct` changes or a new `type` is added, the positional syntax causes the compile to throw errors and break our program.\n\n## Naming Conventions\n\nStructs follow the same naming convention as variables in Go. Uppercase names are exported and lower case names will only be available within the package.\n\n```go\npackage main\n\ntype Person struct {\n\tname          string\n\tage           int\n\toccupation    string\n\tfavoriteFoods []string\n}\n\nfunc main() {\n}\n```\n\nSo in this example, the Person `struct` is exported, however, the fields are. So another package would see that there is a `struct` called Person, however, another package would not be able to access the fields of it. If you wanted to export the person `struct` and its fields, you would need to capitalize each field. Like so:\n\n```go\npackage main\n\ntype Person struct {\n\tName          string\n\tAge           int\n\tOccupation    string\n\tFavoriteFoods []string\n}\n\nfunc main() {\n\n}\n```\n\n## Anonymous structs\n\nStructs can also be declared as anonymous structs, but they are not common. You most often see `structs` with names like in the examples above, i.e, Person. Typically, anonymous `structs` are used when a `struct` is short\nlived; meaning it is used very quickly and then thrown away.\n\nHere is what an anonymous `struct` looks like.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\trobert := struct {\n\t\tname       string\n\t\tage        int\n\t\toccupation string\n\t}{name: \"Robert\", age: 34, occupation: \"Developer\"}\n\n\tfmt.Println(robert)\n}\n\n/*\n  The result of the code above is:\n  {Robert 34 Developer}\n*/\n```\n\n_**Notice how the types are separated with a semi-colon `;` instead of a comma `,` when declaring an anonymous struct.**_\n\n## Structs are passed by value\n\nStructs are passed by `value`. Therefore, if you create a copy of one, and modify that copy, you won't alter the original; unlike [maps](/go-basics-6-maps-in-go) or [slices](go-basics-5-arrays-and-slices-in-go) which are passed by `reference`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\trobert := struct {\n\t\tname       string\n\t\tage        int\n\t\toccupation string\n\t}{name: \"Robert\", age: 34, occupation: \"Developer\"}\n\n\tjohn := robert\n\n\tjohn.name = \"John\"\n\tjohn.age = 50\n\tjohn.occupation = \"Lawyer\"\n\n\tfmt.Println(robert)\n\tfmt.Println(john)\n}\n\n\n/*\n  The result of the code above is:\n  {Robert 34 Developer}\n  {John 50 Lawyer}\n*/\n```\n\nWe can alter the original by using a `pointer` like so:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\trobert := struct {\n\t\tname       string\n\t\tage        int\n\t\toccupation string\n\t}{name: \"Robert\", age: 34, occupation: \"Developer\"}\n\n\tjohn := &robert\n\n\tjohn.name = \"John\"\n\tjohn.age = 50\n\tjohn.occupation = \"Lawyer\"\n\n\tfmt.Println(robert)\n\tfmt.Println(john)\n}\n\n\n/*\n  The result of the code above is:\n  {John 50 Lawyer}\n  &{John 50 Lawyer}\n*/\n```\n\n## Struct composition\n\nGo does not have 'objects' like you would typically find in an OOP or Object Oriented Programming language. So there is no concept of `inheritance`. Instead, Go uses a method known as `composition`. Composition is where you `compose` structs together to create new `structs`. Combining `structs` in Go is also known as `embedding`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Fruit struct {\n\tName           string\n\tClassification string\n}\n\ntype Apple struct {\n\tFruit  // 'embedding' the Fruit struct inside of the Apple struct\n\tcolor  string\n\tflavor string\n\tweight int\n}\n\nfunc main() {\n\ta := Apple{}\n\ta.Name = \"Granny Smith\"\n\ta.color = \"Green\"\n\ta.flavor = \"Sour\"\n\ta.weight = 1\n\ta.Classification = \"Malus domestica\"\n\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  { {Granny Smith Malus domestica} Green Sour 1}\n*/\n```\n\nIt may look like the Apple `struct` is inheriting properties from the Fruit `struct`, however, that is not the case in Go. In a typical OOP language, we would say that an Apple **is a** Fruit. In Go, we say that the Apple **has a** Fruit. The Apple, in this case, is not a type of Fruit, it is still a type of Apple. The apple does not have any relationship to the Fruit other than the fact that it `embeds` it.\n\nIf we want to use the `literal` syntax when declaring our `embedded structs` the syntax is slightly different.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Fruit struct {\n\tName           string\n\tClassification string\n}\n\ntype Apple struct {\n\tFruit  // 'embedding' the Fruit struct inside of the Apple struct\n\tcolor  string\n\tflavor string\n\tweight int\n}\n\nfunc main() {\n\ta := Apple{\n\t\tFruit:  Fruit{Name: \"Granny Smith\", Classification: \"Malus domestica\"},\n\t\tcolor:  \"green\",\n\t\tflavor: \"sour\",\n\t\tweight: 1,\n\t}\n\n\tfmt.Println(a)\n}\n\n/*\n  The result of the code above is:\n  { {Granny Smith Malus domestica} green sour 1}\n*/\n```\n\n## Tags\n\nTags are a way to add additional data to your fields on a `struct`. Let's look at an example.\n\n```go\npackage main\n\ntype Fruit struct {\n\tName           string `required:\"true\" max:\"100\"` // tag\n\tClassification string\n}\n\nfunc main() {\n}\n```\n\nLet's say that for this example, I want to make sure that the name of a Fruit is required, and it cannot exceed a maximum length of 100 characters. This is handy if a user is filling out a form in a web application to provide this information. The `tag` contains the validation info for the field.\n\n`Tags` are basically meta data fields.\n\nTo get access to the `tag` information, we need to use the `reflect` package in Go.\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\ntype Fruit struct {\n\tName           string `required:\"true\" max:\"100\"` // tag\n\tClassification string\n}\n\nfunc main() {\n  t := reflect.TypeOf(Fruit{})\n  field, _ := t.FieldByName(\"Name\")\n\n\tfmt.Println(field.Tag)\n}\n\n/*\n  The result of the code above is:\n  required:\"true\" max:\"100\"\n*/\n```\n\n_\\*\\*In case you are wondering what the `_` underscore symbol means a.k.a the Blank Identifier, it essentially tells the Go compiler that we are expecting a value here, but we don't care about it, so throw it away.\\*\\*\\_\n\nYou can read more about it here: [What is Blank Identifier(underscore) in Golang?](https://www.geeksforgeeks.org/what-is-blank-identifierunderscore-in-golang/)\n\n## Wrap Up\n\nIn this article, we learned how to create and work with structs in go.\n\n## Additional Resources\n\n- [Golang.org Packages](https://golang.org/pkg)\n- [Go by Example](https://gobyexample.com/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-8-control-flow-in-go","category":"blog","title":"Go Basics - 8. Control flow in Go","description":"In this article, we are going to explore how if and switch statements work in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how control flow, a.k.a. if and switch statements, work in the Go programming language.\n\n## If statements\n\nIn Go, if statements behave just like they do in most programming languages.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tif true {\n\t\tfmt.Println(robert)\n\t}\n}\n\n/*\n  The result of the code above is: Hi\n*/\n```\n\nor\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tif false {\n\t\tfmt.Println(robert)\n\t}\n}\n\n/*\n  nothing happens when this is program runs since the fmt.Println() is never   executed\n*/\n```\n\n## Comparison operators\n\nGo has the following comparison operators.\n\n| Operator | Definition            |\n| -------- | --------------------- |\n| ==       | equal                 |\n| !=       | not equal             |\n| <        | less than             |\n| <=       | less than or equal    |\n| >        | greater than          |\n| >=       | greater than or equal |\n\nMore info: [Golang.org Comparison Operators](https://golang.org/ref/spec#Comparison_operators)\n\n## Logical operators\n\nGo has the following logical operators.\n\n**&&** - is known as the **AND** operator:\n\n```go\np && q\n\n// \"if p AND q are both True\"\n```\n\n**||** - is known as the **OR** operator:\n\n```go\np || q\n\n// \"if either p OR q is true\"\n```\n\n**!** - is known as the **NOT** operator:\n\n```go\n!p\n\n// \"if NOT p\"\n```\n\nMore info: [Golang.org Logical Operators](https://golang.org/ref/spec#Logical_operators)\n\n## Switch statements\n\nSwitch statements in Go behave like most other programming languages. If the `case` matches, then the code within it is executed. If nothing matches, then the `default` code is executed.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tswitch 4 {\n\tcase 1:\n\t\tfmt.Println(\"one\")\n\tcase 4:\n\t\tfmt.Println(\"four\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is: four\n*/\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tswitch 7 {\n\tcase 1:\n\t\tfmt.Println(\"one\")\n\tcase 4:\n\t\tfmt.Println(\"four\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is: default\n*/\n```\n\nGo also allows you to check for multiple cases at the same time.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tswitch 2 {\n\tcase 1, 2, 3:\n\t\tfmt.Println(\"one two or three\")\n\tcase 4, 5, 6:\n\t\tfmt.Println(\"four five or six\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is: one two or three\n*/\n```\n\nCases in Go must be unique, meaning you cannot test for the same value more than once.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tswitch 2 {\n\tcase 1:\n\t\tfmt.Println(\"one\")\n\tcase 1:\n\t\tfmt.Println(\"one\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is: duplicate case 1 in switch\n*/\n```\n\nYou can also use what is known as `tagless` switch statements, meaning there is no value after the `switch` keyword.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\ti := 14\n\n\tswitch {\n\tcase i < 10:\n\t\tfmt.Println(\"less than 10\")\n\tcase i > 10:\n\t\tfmt.Println(\"greater than 10\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is: greater than 10\n*/\n```\n\nGo allows you to 'fallthrough' the various cases by using the `fallthrough` keyword.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\ti := 4\n\n\tswitch {\n\tcase i < 10:\n\t\tfmt.Println(\"less than 10\")\n\t\tfallthrough\n\tcase i < 20:\n\t\tfmt.Println(\"less than 20\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is:\n  less than 10\n  less than 20\n*/\n```\n\nIt is important to remember that when using the `fallthrough` keyword, the following case after it is always executed, even if the case doesn't match, so be careful when using it.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\ti := 4\n\n\tswitch {\n\tcase i < 10:\n\t\tfmt.Println(\"less than 10\")\n\t\tfallthrough\n\tcase i > 20:\n\t\tfmt.Println(\"greater than 20\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is:\n  less than 10\n  greater than 20\n*/\n```\n\nSwitch statements can also check the `type` of an `interface`. This is known as a 'type switch.' **This only works when checking interfaces.**\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tvar i interface{} = 4\n\n\tswitch i.(type) {\n\tcase int:\n\t\tfmt.Println(\"int\")\n\tcase float32:\n\t\tfmt.Println(\"float32\")\n\tcase string:\n\t\tfmt.Println(\"string\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is: int\n*/\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tvar i int = 4\n\n\tswitch i.(type) {\n\tcase int:\n\t\tfmt.Println(\"int\")\n\tcase float32:\n\t\tfmt.Println(\"float32\")\n\tcase string:\n\t\tfmt.Println(\"string\")\n\tdefault:\n\t\tfmt.Println(\"default\")\n\t}\n}\n\n/*\n  The result of the code above is:\n  cannot type switch on non-interface value i (type int)\n*/\n```\n\n## Wrap Up\n\nIn this article, we learned how to create and work if statements, comparison operators, logical operators, and switch statements in Go.\n\n## Additional Resources\n\n- [Go by Example](https://gobyexample.com/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"go-basics-9-loops-in-go","category":"blog","title":"Go Basics - 9. Loops in Go","description":"In this article, we are going to explore how loops work in the Go (Golang) programming language.","tags":["go-basics"],"body":"\nIn this article, we are going to explore how loops work in the Go programming language.\n\n## For loop\n\nLooping in Go is rather straightforward as there is only one kind of loop in Go, the `for` loop.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tfor i := 0; i < 7; i++ {\n\t\tfmt.Println(i)\n\t}\n}\n\n/*\n  The result of the code above is:\n  0\n  1\n  2\n  3\n  4\n  5\n  6\n*/\n```\n\nYou can also initialize more than one variable within your `for` loop.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\n\tfor i, j := 0, 0; i < 7; i, j = i+1, j+1 {\n\t\tfmt.Println(i, j)\n\t}\n}\n\n/*\n  The result of the code above is:\n  0 0\n  1 1\n  2 2\n  3 3\n  4 4\n  5 5\n  6 6\n*/\n```\n\nGo also provides some nice 'syntactic sugar' to write our `for` loops to make them a little cleaner and easier to read.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ti := 0\n\tfor i < 7 {\n\t\tfmt.Println(i)\n\t\ti++\n\t}\n}\n\n/*\n  The result of the code above is:\n  0\n  1\n  2\n  3\n  4\n  5\n  6\n*/\n```\n\nIt is also important to note that in the above example we are initializing the variable `i` above the `for` loop so we can get access to it later on.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ti := 0\n\tfor i < 7 {\n\t\ti++\n\t}\n\tfmt.Println(i)\n}\n\n/*\n  The result of the code above is: 7\n*/\n```\n\nIn we initialize our variable, in this case `i`, within the `for` loop, then `i` is `scoped` to the loop and is not accessible outside of it.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfor i := 0; i < 7; i++ {\n\n\t}\n\n\tfmt.Println(i)\n}\n\n/*\n  The result of the code above is:\n  undefined: i\n*/\n```\n\n## Infinite Loops\n\nOther programming languages have additional loops like `while` or `do` loops. These loops continue to loop for an indeterminate amount of time until some logic within the loop tells it to stop. We can achieve this same behavior using the `break` keyword.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ti := 0\n\tfor {\n\t\ti++\n\n\t\tif i == 7 {\n\t\t\tbreak\n\t\t}\n\t}\n\tfmt.Println(i)\n}\n\n/*\n  The result of the code above is: 7\n*/\n```\n\n_**If we forget to put in the `break` keyword this loop becomes an 'infinite loop' and causes our program to run out of memory and crash.**_\n\nGo also has a `continue` keyword that allows us to have more control of when the code within our `for` loop executes.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfor i := 0; i < 7; i++ {\n\n\t\t// if the number is even, continue the loop\n\t\tif i%2 == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\t// if the number is odd, print the number\n\t\tfmt.Println(i)\n\t}\n}\n\n/*\n  The result of the code above is:\n  1\n  3\n  5\n*/\n```\n\n## Looping through collections\n\nWhen looping through collections, we use a 'modified' `for` loop and introduce a new keyword called `range`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ts := []int{1, 2, 3, 4, 5, 6, 7}\n\n\tfor k, v := range s {\n\t\tfmt.Println(k, v)\n\t}\n}\n\n/*\n  The result of the code above is:\n  0 1\n  1 2\n  2 3\n  3 4\n  4 5\n  5 6\n  6 7\n*/\n```\n\nIf you are not concerned about the `key` of the item in the collection, you can use `_` to ignore it.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ts := []int{1, 2, 3, 4, 5, 6, 7}\n\n\tfor _, v := range s {\n\t\tfmt.Println(v)\n\t}\n}\n\n/*\n  The result of the code above is:\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n*/\n```\n\nThis kind of loop can be used with `slices`, `arrays`, `maps`, and even `strings`.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ts := \"Hello, World!\"\n\n\tfor k, v := range s {\n\t\tfmt.Println(k, v)\n\t}\n}\n\n/*\n  The result of the code above is:\n  0 72\n  1 101\n  2 108\n  3 108\n  4 111\n  5 44\n  6 32\n  7 87\n  8 111\n  9 114\n  10 108\n  11 100\n  12 33\n*/\n```\n\n> Characters within a string are Unicode numbers in Go\n\nYou can find a list of all of the Unicode numbers [here](https://www.ascii-code.com/)\n\n## Wrap Up\n\nIn this article, we learned how to create and work with loops in Go.\n\n## Additional Resources\n\n- [Go by Example](https://gobyexample.com/)\n- [Free Code Camp - Learn Go Programming for Beginners](https://www.youtube.com/watch?v=YS4e4q9oBaU)\n"},{"slug":"how-i-taught-myself-how-to-code","category":"blog","title":"How I became a web developer in 5 months","description":"This is my personal story of how I taught myself how to code and got hired as a junior developer in 5 months.","tags":["career-advice"],"body":"\nBefore I get into my story, I want to preface this article with a few things. I am typically a shy and introverted person. I am not the kind of person who openly discusses my achievements and successes, especially when it comes to finances. I don't like bragging or boasting, and this article is taking me way outside of my comfort zone.\n\nMy primary reason for writing this article is to help inform, inspire, and motivate those of you out there looking to learn how to code, especially those of you who are self-taught. I wish I could have read a story like mine when I was first learning to code over six years ago. I always want to make sure I am 100% open, honest, and transparent.\n\nI am currently 35 years old and did not learn how to code until I was 29. So no, you are never too old, nor is it ever too late for you to learn anything... especially code.\n\n## Background\n\nBefore learning how to code, I had all kinds of jobs. I have been working since I was 15. I worked as a busboy for a few restaurants while in high school. I worked in retail, at a CVS in a shopping mall (one of the worst jobs ever!), and in real estate for over 6 years. I had a pretty good job/career in real estate until the entire economy collapsed in 2008. I was living in Florida at the time, and the real estate market there took a particularly devasting hit.\n\nThe 2008 economic crisis was one of the best things that ever happened to me. I took a good look at myself, my life and did some soul searching. Seeing how real estate was not coming back for a long time, and I didn't honestly enjoy it all that much, what was I going to do? I figured I would go back to college and get my bachelor's degree in hopes that the economy would bounce back after those four years in school. I was 24.\n\nIn case you are wondering what I did during those six years between high school and college, I worked and played in a band. Music was my life. I had been a musician since I was 13 or 14 years old. Going back to school seemed daunting and dreadful. I hated high school. I was bored all the time and never really interested in any of the subjects I was being taught. Also, math was my worst subject and still is to this day. You don't need to be a math wiz to learn how to code! I wish someone had told me this earlier, but I digress.\n\nBeing a musician, I thought I would apply to a music school to study what I loved more than anything. Only one school came to mind, Berklee College of Music. I told myself that going to college would only be worth it if I could study at Berklee. I didn't want to go anywhere else and wouldn't have accepted any other college. Berklee is the best there is. If I was going to spend four years of my life in school while getting into a whole bunch of debt, then I was going to go to the best of the best.\n\nIt was the only school I had applied to, and to my surprise, I was accepted. The reason why I was surprised is that I was self-taught in music too. I never had a private lesson or a guitar teacher. I couldn't read music, I didn't know any scales, theory, or any of that stuff... but I could play. I had been playing in bands for several years and had played countless shows up until that point.\n\n## Reality Check\n\nSo I packed up my car and moved to Boston to go to Berklee. Those four years were some of the most incredible years of my life. I graduated with a Composition degree, which basically means I learned how to compose 'classical' music. This is not exactly a high-paying in-demand skill these days, but I didn't care. For me, it was the best program/degree to get the most out of the school, and I don't regret that decision. However, I knew once I declared my major in composition, I would most likely have to fall back on my IT skills.\n\nI was always interested in computers and taught myself how to fix them while in high school. I really just did it out of fun & curiosity. I also broke my computers all the time and couldn't afford to pay anyone to fix them, so I just figured it out, thanks to the internet.\n\nAfter graduating, that is when reality really set in. My first student loan payment came, and it was well over $1,000. I had graduated with around $115,000 in student loan debt. I basically had a mortgage, but no house. That was a sobering experience. Naturally, I panicked.\n\nI needed a well-paying job as I worked for various production companies and made a little over $30,000 a year. I was also living at home with my parents and was about to turn 30.\n\n## The Bootcamp that never was\n\nWhat first got me interested in programming was a computer game I used to play called DayZ. It is an online multiplayer game where you try to survive from other players and zombies. All good games have zombies in them. I eventually decided to rent my own server to host my own version of the game for others to play on.\n\nOne of the coolest aspects of the game was that it was a \"mod.\" This means it was built on top of another game, Arma 2. So I could install various other mods/plugins that would completely change the functionality of the game. I had no idea how to code, but I found all of these various articles and YouTube videos that showed me how to modify the game. I copied the code snippets, pasted them in the right places, and it just worked! I had no clue what I was doing, but I found it fascinating this was even possible. That was the first time I experienced the power of programming.\n\nI did some searching online to learn how to code and came across a Bootcamp in Boston called [Launch Academy](https://launchacademy.com/). I went to their open house, filled out an application, and to my surprise, I got in. I have no idea if this was a big deal or not, they probably accept pretty much anyone, but it felt like a big deal to me. Then another reality check... the cost!\n\nThe program was three months or so and over $12,000. There was no way I could afford that! Nor was I willing to get into even further debt on top of all of my student loan debt. I tried to negotiate with them but got nowhere. Then I had an idea...\n\nWhat if I put myself through my own Bootcamp? I mean, these people say they can teach me the skills I need to get a high paying coding job in three months, so why can't I just do this myself. I have taught myself IT and music before, so why not coding? So that is what I did.\n\nMy jobs working for production companies were notoriously slow from the end of the year into the beginning of the year. So, I had a few months where I wasn't really working anyway. I took full advantage of this 'downtime' and got to work. I spent a good 6-8 hours every day, seven days a week learning HTML, CSS, JavaScript, Ruby, and Ruby on Rails. The Bootcamp had given me a couple books and let us know what we would be learning, so I just searched the internet for resources to learn all of those technologies.\n\nI read [Shay Howe's book for HTML/CSS](https://learn.shayhowe.com/html-css/) and [Chris Pine's book for Ruby](https://pine.fm/LearnToProgram/). I don't remember which books I read for JS or rails. I was also taking several courses on Udemy. I bought every Ruby on Rails and JavaScript course I could afford. I bounced from tutorial to tutorial, course to course, and wasted so much time. I had no idea what I was doing. I wish I had a mentor or someone who could show me the proper order of what to learn and when. I really needed some kind of curriculum, but I just had to figure it out.\n\n## My first job\n\nI was insanely driven and dedicated to learning how to code to get a better paying job, move out, and pay off my debt. After 3 months or so, I started getting freelance gigs on eLance, which doesn't exist anymore. I think it is now called Upwork. I had zero experience doing web development, so I worked basically for free. I made some money. I charged like $50 for a website or something crazy like that. I didn't care though I was getting real-world experience and building my portfolio. I didn't care if the quality wasn't excellent, because what do you expect for $50? Don't get me wrong though, I worked my butt off for those clients. I went above and beyond to try and deliver the best product I could. It wasn't about money yet. I just needed the experience.\n\nFive months later, I decided to try and apply for some junior developer positions. I had no idea what I was getting into and figured that I could get some practice interviewing. I took the interviews as a learning experience, as well. When someone would ask me something I didn't know, I wrote it down and looked it up later.\n\nI eventually applied to a music company in Rhode Island. Here is my [cover letter](/images/my-code-story/cover-letter.pdf) and [resume](/images/my-code-story/resume.pdf)\n\n_**You will notice in my resume that I just have the years for my experience and not the months. This was intentional. I started learning to code in December of 2014. 😏**_\n\nI got the job. I was offered $55,00. Here is the [offer letter](/images/my-code-story/inmusic-offer-letter.pdf). To be honest, the only reason I think I was hired is because of my strong music background. I was a terrible developer and didn't know what I was doing, but my music skills got me in the door.\n\nThis is an important thing for new people trying to break into the industry. Use what experience you do have to try and get into tech. You may have a lot of experience in retail, restaurants, education, whatever. Try to get a coding job in those fields first. People looking to hire junior developers know you don't have great coding skills, so leverage the skills and experience you do have.\n\nGetting a coding job is not easy, even though the demand is through the roof for developers. You need a way to stand out, as any company hiring a junior developer is taking a pretty significant risk. They know you don't have what it takes to solve complex problems and that you will need a lot of support at first. However, they hope you will grow out of your 'junior' shell in a reasonable amount of time to really start contributing.\n\nYour number one priority as a junior dev is to learn as much as you can from the more experienced devs around you. Then you need to get that 'junior' out of your job title asap. The next jobs are so much easier once you have some real-world experience under your belt. The first one is definitely the hardest, at least in my experience.\n\n## Job 2\n\nAfter working for InMusic for a couple of years or so, I began working for an agency based in New York. I was still living in RI at the time, so this was my first full-time remote gig, and I loved it! Working remote is fantastic, and I wouldn't have it any other way now. However, I don't think remote is a good idea for your first job. You should try to find a company local to you so you can get first-hand experience from other devs in person. You can do it remotely if you want. Still, I think you get so much more experience and value out of being with other devs, face to face, especially when you are just starting out.\n\nI asked them for $80,000, which was $20,000 more than I was making. I got a $5,000 raise after my first year at inMusic and was promoted to a front-end developer. They offered me $72,000 and told me after my first year, they would pay me $80,000. I said yes and put in my two weeks.\n\n## Today\n\nToday I am a senior software engineer for a travel insurance company in Rhode Island. I work remotely from Pennsylvania. I make just shy of $100,000. I have been there for over two years now. So in five years or so, I went from making just over $30,000 to almost $100,000. Not only has my salary increased significantly, but I have much better benefits, more time off, etc. The best part is that even with all of my debt, and my wife's for that matter, I can support my family so my wife can raise our two small children.\n\nPlus, I really love what I do. I am crazy passionate about this stuff. It is incredible to make a good salary in a high demand field, doing what I love.\n\n## Wrap up & Advice\n\nMy story is simply that... my story. Yours will be quite different. I hope that reading my story has encouraged and inspired you. Yes, you can do this! You do not need to be a math genius or have any prior experience. You just have to want it! If you are in this solely for the money, look for something else. You will not be happy making more money doing something you hate, trust me! It's not worth it.\n\nIf you really want to do this, then nothing is stopping you. There are more free resources out there than ever before. This site is only one of them. I am trying to take all of the experience I have and teach it to others. I wish I had someone like myself to help me out along the way. I would have saved so much time, money, and effort if I had a mentor. I hope this site, my books, courses, and YouTube videos will do that for you. You can always reach out to me on [Twitter](https://twitter.com/howtocode_io) or email me `howtocode@pm.me.`\n\nCheers,\n\nRobert\n"},{"slug":"how-to-become-a-back-end-developer","category":"blog","title":"How to become a back end developer","description":"All of the technologies you will need to know in order to become a back-end developer. All of the resources are free!","tags":["back-end"],"body":"\n## Command Line\n\nThe command line, or terminal, is the 2nd most important tool you need to learn as a developer. You are going to be using this tool all day, every single day as a developer, so you need to learn it well.\n\n- [**Command Line Power User**](https://commandlinepoweruser.com/) - free video course\n\n## Git\n\nGit is immensely powerful and to truly master it takes a very long time, however, you really only need to understand some of the larger principles and features of Git to use it... for now.\n\n## Ruby\n\nOh boy do I love this language! I never thought a programming language could look as beautiful as Ruby does and be so much fun to write and work with. Do you know why that is? Well it turns out that the creator of Ruby [**Yukihiro Matsumoto**](https://en.wikipedia.org/wiki/Yukihiro_Matsumoto) aka Matz designed the Ruby language with developer happiness in mind. Sounds crazy right!?!? As he was designing the language he kept what it would feel like for the developer to work with, read, and ‘be in’ Ruby for hours at a time. In my opinion Ruby is just a treat to be able to work with, Matz knocked it out of the park!\n\nSo in this lesson we are going to learn all about the Ruby programming language. Once we understand Ruby we are going to move onto one of the most powerful and popular web frameworks, built upon Ruby… Ruby on Rails. Just wait until you see all of the amazing things you can built with Ruby on Rails. However, before we get there, you really need to have a solid grasp of the Ruby language itself. Do not rush through this section, take your time here.\n\n- [**Learn to Program - Chris Pine**](https://pine.fm/LearnToProgram)\n- [**Learn Ruby the Hard Way**](https://learnrubythehardway.org/book/)\n\n## Ruby on Rails\n\nRuby on Rails took the world by storm when it was first realized and I personally believe it is the reason you have all of these startups everywhere and such an explosion of web applications. It’s creator [**David Heinemeier Hansson**](https://en.wikipedia.org/wiki/David_Heinemeier_Hansson) aka DHH shocked the world when he first presented Ruby on Rails back in 2005. Rails has come a long way since then and it still holds its ground as one of the greatest web frameworks out there, across all languages. Since you just learned Ruby and I know you have fallen in love with it, because how could you not? We are now going to learn Rails and start to build our own web apps!\n\nRails has been since 2005 and there are a tremendous amount of tutorials out there, which is fantastic! However, it can be really hard to know where to begin. So follow what I have laid out for you here, **in order**, and you will be just fine ;)\n\n- [**Learn Ruby on Rails 5 - Daniel Kehoe**](http://learn-rails.com/learn-ruby-on-rails.html)\n- [Upcase - Thoughbot](https://thoughtbot.com/upcase/practice)\n- [**Ruby on Rails Tutorial - Michael Hartl**](https://www.railstutorial.org/book/beginning)\n"},{"slug":"how-to-become-a-front-end-developer","category":"blog","title":"How to become a front end developer","description":"All of the technologies you will need to know in order to become a front-end developer. All of the resources are free!","tags":["front-end"],"body":"\n## Text Editor\n\nA text editor is a tool that developers use to write code. It is the most critical tool in your arsenal. So, before we can begin learning how to write code, we need to learn the basics of this tool. As you progress into the next sections, you are going to be using your text editor a lot and will gain the most knowledge and experience as you are learning how to code.\n\nIn this section, I want you first to download [**Visual Studio Code**](https://code.visualstudio.com/) and get familiar with the basics.\n\n## HTML\n\nIn this section, you are going to learn HTML. HTML is the backbone of the web. It is the studs inside of a house or the bones in our bodies. It is the foundation upon which all web pages are built. So, having a solid grasp of it is crucial.\n\n[**Learn to Code HTML & CSS by Shay Howe**](http://learn.shayhowe.com/)\n\n> Start with the left column first and then move on to the right column advanced section. In the left sidebar there is also a Course 201 'Learn to Code Advanced HTML & CSS' you should take this course as well.\n\n## CSS\n\nYou have already learned a lot about CSS in Shay Howe's course, but I am going to suggest some additional courses/resources for learning flexbox.\n\n[**What The Flexbox?!**](https://flexbox.io/)\n\n**[Flexbox Zombies](https://flexboxzombies.com/p/flexbox-zombies)**\n\n## JavaScript\n\nJavaScript is the single most important language you need to know as a Front-End developer. I **strongly** advise you to take them in the order listed below.\n\n1. [**Practical JavaScript**](https://watchandcode.com/p/practical-javascript)\n2. [**Eloquent JavaScript**](http://eloquentjavascript.net/)\n3. [**JavaScript 30**](https://javascript30.com/)\n4. [**You Don't Know JS**](https://github.com/getify/You-Dont-Know-JS/blob/master/README.md)\n\n## Helpful Resources:\n\n- [**MDN JavaScript Documentation**](https://developer.mozilla.org/en-US/docs/Web/JavaScript)\n- [**Github Education Pack**](https://education.github.com/pack) - for students only! it includes a bunch of excellent free resources and tools and also a 6-month subscription to [**Frontend Masters**](https://frontendmasters.com/).\n\n## Web Design\n\nThese resources are in no particular order, but I think are helpful. You don't need to master design, as that is a designer's job. You should however be familiar with the basics. This section is not mandatory, but you might want to check out the resources I have below and 'dip your toes in the water.'\n\n- [**Frontend Mentor**](https://www.frontendmentor.io/)\n- [**Steve Schoger - Refactoring UI Design Tips**](https://twitter.com/i/moments/994601867987619840)\n- [**Hack Design**](https://hackdesign.org/lessons101)\n- [**Design by Numbers**](http://www.designbynumbers.io/) - signup for the free 10 day email course\n"},{"slug":"how-to-compare-dates-in-javascript","category":"blog","title":"How to compare dates in JavaScript","description":"How to compare dates in JavaScript natively using the Date Object, without using any third-party libraries.","tags":["javascript"],"body":"\nWorking with dates in JavaScript can be tricky to say the least. Recently I needed to compare two dates with one another to see which was greater than, less than, etc.\n\nIn my particular use case, I was using a date-picker that was returning a string like `01/28/2020`. I needed to see if this date was `>=` to the current day.\n\nThe first thing I needed to do was convert this string into a JavaScript Date Object.\n\n```js\nconst date: new Date(\"01/28/2020\");\nconsole.log(date);\n// Tue Jan 28 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n```\n\nThen, compare this date with the current day:\n\n```js\nconst compareDate = new Date(\"01/28/2020\");\nconst today = new Date();\nconsole.log(compareDate >= today);\n// false\n```\n\nThe issue is that even though the dates are the same, the times are not.\n\n```js\nconst compareDate = new Date(\"01/28/2020\");\nconst today = new Date();\nconsole.log(\"compareDate: \", compareDate);\nconsole.log(\"today: \", today);\n// compareDate:  Tue Jan 28 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n// today:  Tue Jan 28 2020 21:33:27 GMT-0500 (Eastern Standard Time)\n```\n\nNotice how `compareDate` has all zero's for time. The difference in time is the reason why this comparison fails. To fix this, we need to create the current day without time. We do this by instantiating a new JS Date object by individually passing in the year, month and day.\n\n```js\nconst todayWithoutTime = new Date(\n  new Date().getFullYear(),\n  new Date().getMonth(),\n  new Date().getDate()\n);\nconsole.log(\"todayWithoutTime: \", todayWithoutTime);\n// todayWithoutTime:  Tue Jan 28 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n```\n\nSo let's try our comparison again.\n\n```js\nconst compareDate = new Date(\"01/28/2020\");\nconst todayWithoutTime = new Date(\n  new Date().getFullYear(),\n  new Date().getMonth(),\n  new Date().getDate()\n);\nconsole.log(compareDate >= todayWithoutTime);\n// true\n```\n\nThat's it. Just remember that when comparing dates in JavaScript it is vital to factor in the time. 😎\n"},{"slug":"how-to-console-log-better-in-javascript","category":"blog","title":"How to console log better in JavaScript","description":"In this article, I discuss various JavaScript debugging techniques using the console object.","tags":["javascript"],"body":"\nYou are probably already very familiar with using `console.log()` to print something to the console, especially the browser console. While this method is handy, there are lots of other methods on the `console` object that can make debugging, and our lives, for that matter, much easier.\n\n## console.table()\n\nLet's say we are retrieving a list of users from an api:\n\n```js\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then((response) => response.json())\n  .then((json) => console.log(json));\n```\n\nOur response looks like this:\n\n![Users response](/images/how-to-console-log-better-in-js/fetching-users.jpg)\n\nWe can display this data in a more readable table format with the following:\n\n```js\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then((response) => response.json())\n  .then((json) => console.table(json));\n```\n\nNow our response looks like this:\n\n![Users as table response](/images/how-to-console-log-better-in-js/users-as-table.jpg)\n\nWhat if we are only interested in seeing specific pieces of data? We can pass an array to the `console.table()` method with the keys we are interested in, like so:\n\n```js\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then((response) => response.json())\n  .then((json) => console.table(json, [\"username\", \"email\", \"phone\"]));\n```\n\nNow our response looks like this:\n\n![Users as table response with specific data](/images/how-to-console-log-better-in-js/users-table-specific-data.jpg)\n\n## console.log() - with custom styles\n\nWhen logging something to the console, it can sometimes be hard to differentiate between what you are logging, and everything else. We can solve this by passing custom CSS to our `console.log()` to make it stand out.\n\n```js\nconsole.log(\"%cTest\", \"background-color: green; padding: 10px\");\n```\n\nNow our `console.log()` looks like this:\n\n![Console.log statement green](/images/how-to-console-log-better-in-js/console-log-green.jpg)\n\nor:\n\n```js\nconsole.log(\n  \"%cError\",\n  \"background-color: red; padding: 10px; border: 5px solid white; color: black;\"\n);\n```\n\nLooks like:\n\n![Console.log statement error red](/images/how-to-console-log-better-in-js/console-log-error-red.jpg)\n\n## console.dir()\n\nThis is another helpful method that allows you to navigate large JS objects better.\n\nFrom the MDN docs:\n\n**The Console method dir() displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.**\n\n**In other words, console.dir() is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.**\n\n```js\nconsole.dir(document.location);\n```\n\nLooks like this:\n\n![console.dir](/images/how-to-console-log-better-in-js/console-dir.jpg)\n\n## console.error()\n\nAnother simple method on the `console` object is `console.error()` this outputs a message formatted as an error.\n\n```js\nconsole.error(\"there has been an error...\");\n```\n\nLooks like this:\n\n![console.error](/images/how-to-console-log-better-in-js/console-error.jpg)\n\n## console.debug()\n\nAnother simple method on the `console` object is `console.debug()` this outputs a message formatted as a debug message.\n\n```js\nconsole.debug(\"this is a debug message...\");\n```\n\nLooks like this:\n\n![console.debug](/images/how-to-console-log-better-in-js/console-debug.jpg)\n\n## console.warn()\n\nAnother simple method on the `console` object is `console.warn()`; this will output a message formatted as a warning.\n\n```js\nconsole.warn(\"this is a warning message...\");\n```\n\nLooks like this:\n\n![console.warn](/images/how-to-console-log-better-in-js/console-warn.jpg)\n\n## Wrap up\n\nYou can find all the `console` methods over at the [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/API/console)\n"},{"slug":"how-to-customize-your-sitemap-in-hugo","category":"blog","title":"How to customize your sitemap in Hugo","description":"In this article, I am going to show you how to customize your sitemap in Hugo (Golang)","tags":["hugo"],"body":"\nIn this article, I am going to show you how to customize your sitemap in Hugo to do the following:\n\n1. Keep certain items out of `sitemap.xml`\n2. Make sure the URLs in the sitemap contain the full site address, not just relative paths\n\nWe first need to customize the sitemap template within Hugo to add these features. If you do not already have a `sitmap.xml` template in your theme, create a new file called `sitemap.xml` and place it inside of your themes\n`/layouts/_defaults/sitemap.xml`.\n\nHere is what this site's `sitemap.xml` looks like:\n\n```go\n{{ printf \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>\" | safeHTML }}\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n  {{ range .Data.Pages }}{{ if ne .Params.sitemap_exclude true }}\n    <url>\n      <loc>https://robertguss.com{{ .Permalink }}</loc>{{ if not .Lastmod.IsZero }}\n      <lastmod>{{ safeHTML ( .Lastmod.Format \"2006-01-02T15:04:05-07:00\" ) }}</lastmod>{{ end }}{{ with .Sitemap.ChangeFreq }}\n      <changefreq>{{ . }}</changefreq>{{ end }}{{ if ge .Sitemap.Priority 0.0 }}\n      <priority>{{ .Sitemap.Priority }}</priority>{{ end }}{{ if .IsTranslated }}{{ range .Translations }}\n      <xhtml:link\n                  rel=\"alternate\"\n                  hreflang=\"{{ .Language.Lang }}\"\n                  href=\"{{ .Permalink }}\"\n                  />{{ end }}\n      <xhtml:link\n                  rel=\"alternate\"\n                  hreflang=\"{{ .Language.Lang }}\"\n                  href=\"{{ .Permalink }}\"\n                  />{{ end }}\n    </url>\n  {{ end }}{{ end }}\n</urlset>\n```\n\nFeel free to copy this and modify as necessary 😎\n\n## How to keep items out of your sitemap.xml\n\nThere may be pages, tags, or URL paths that you wish to keep out of your `sitemap.xml`. For instance, I do not want `/post/` or `/categories/` listed inside of my `sitemap.xml`, and so to disable them, I modified the `sitemap.xml` template above to check and see if a property called `sitemap_exclude: true` exists in any front matter. If so, then the `sitemap.xml` template does not list these items.\n\nI have the majority of the content wrapped in a conditional that looks like this:\n\n```go\n{{ if ne .Params.sitemap_exclude true }}\n    // ...\n{{ end }}{{ end }}\n```\n\nAny content I wish to exclude from `sitemap.xml` contains the property\n\n```bash\nsitemap_exclude: true\n```\n\nin the front matter. This will prevent it from showing up in my `sitemap.xml`.\n\n## Hiding the categories taxonomy from your sitemap\n\nTo hide the categories taxonomy from my `sitemap.xml` I add the following to my sites `config.toml`.\n\n```bash\n[Taxonomies]\n    tag = \"tags\"\n```\n\nExplicitly listing the taxonomies **you want** inside of your `config.toml` file keeps **unlisted** ones from showing up in your `sitemap.xml`.\n\n## Hiding content types from your sitemap\n\nThis site has a content type called `post` which is for all of the articles I write on this site. However, Hugo automatically adds a new listing in my `sitemap.xml` with a URL of `/post/`. I do not want this as all of my articles URLs come directly after my domain name like `https://robertguss.com/my-post`, not `https://robertguss.com/post/my-post`.\n\nTo fix this, I created a file called `_index.md` inside of `site/content/post/_index.md` and gave it a front matter like the following:\n\n```bash\n---\nsitemap_exclude: true\n---\n```\n\nNow, this path does not show up in my sitemap. 👍\n\n## Fixing URLs in your sitemap\n\nI am not 100% on this, but I believe this issue has to do with the fact that this site is hosted on Netlify, as other people also seem to have this issue. The production version of `sitemap.xml` when hosted on Netlify, contains only relative URLs, like: `/tags/golang` instead of `https://robertguss.com/tags/golang`.\n\nGoogle needs the entire URL, not just relative paths to properly parse it. To fix this, I again modified my `sitemap.xml` template above with the following line:\n\n```go\n<loc>https://robertguss.com{{ .Permalink }}</loc>{{ if not .Lastmod.IsZero }}\n```\n\nIt is a bit of a hack, but it works and gets the job done. I am sure I could create a more elegant way of doing this, but it's good enough for the time being.\n\nNow my sitemap contains only the things I want it to and has proper URLs.\n\n## Wrap Up\n\nWorking with `sitemap.xml` in Hugo is not so straightforward at first, but since you can customize it with your own template, you can make it look however you want. One of the things I love about Hugo is how flexible and customizable it is.\n\n## Additional Resources\n\n- [Hugo Sitemap Template Docs](https://gohugo.io/templates/sitemap-template/)\n"},{"slug":"how-to-deploy-statamic-3-to-digitalocean-app-platform","category":"blog","title":"How to deploy Statamic 3 to Digitalocean App platform","description":"Learn how to set up and configure Statamic 3 when deploying to DigitalOcean App Platform","tags":["statamic","digital-ocean"],"body":"\nI recently migrated this blog over from [Ghost](https://ghost.org) to [Statamic](https://statamic.com/) and had some issues getting it to work properly on [DigitalOcean's app platform](https://www.digitalocean.com/products/app-platform/). My hopes in writing this article is that it will save someone the headaches I had to go through in order to get everything up and running correctly.\n\n## DigitalOcean App Platform\n\n[DigitalOcean's app platform](https://www.digitalocean.com/products/app-platform/) is a service provided by DigitalOcean that allows you to easily deploy apps by pushing to the `master` branch in your GitHub repo. It works virtually identically to [Heroku](https://www.heroku.com/) if you are familiar with their service.\n\nThe beauty of this, is that I just give DigitalOcean the url of my GitHub repo for my Statamic 3 application and it will provision a server with all the infrastructure I need to run it. However, nothing is perfect, and there are some specific configurations that you need in order to get Statamic 3 to work properly on it.\n\n## Environment Variables\n\nWhen setting up your DigitalOcean app, you will need to setup these `env` variables.\n\n```bash\nAPP_KEY=base64:Jih5teWN8...\nAPP_URL=https://howtocode-statamic-i94ur.ondigitalocean.app/\nASSET_URL=https://howtocode-statamic-i94ur.ondigitalocean.app/\n```\n\nYou can find the `APP_KEY` in your `.env` file created by Statamic. This is generated by Statamic when you first setup it up.\n\nThe `APP_URL` & `ASSET_URL` is the domain of my app once it is deployed to DigitalOcean. They will give you a temporary domain until you point your actual domain, at which point you will need to update these accordingly.\n\n![DigitalOcean Environment Variables](/images/digital-ocean-statamic/digital_ocean_environment_variables.png)\n\n_**In the screenshot above, I only toggled encrypt for `APP_KEY` to protect my key in the screenshot. It is not necessary to do this if you don't want to.**_\n\n## Build command\n\nWhen setting up your app on DigitalOcean there is a section to add a build command. This is the command I ultimately ended up using, you might not need all of these, but it worked for me so I left it alone.\n\n```bash\nphp please stache:clear && php please static:clear && npm run production && php artisan config:cache\n```\n\n![digital ocean build commands](/images/digital-ocean-statamic/digital_ocean_build_commands.png)\n\n## Forcing HTTPS\n\nOnce I had launched my app, I was getting all kinds of mixed content warnings and most of my images, css and js files were not being loaded properly as they were making requests to `http://` while the site on DigitalOcean was over `https://`. To remedy this, I added the following to the bottom of my `routes/web.php` file.\n\n```php\nif (App::environment('production')) {\n  URL::forceScheme('https');\n}\n```\n\nSo my entire `routes/web.php` looks like this:\n\n```php\n<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Facades\\App;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\nRoute::statamic('authors', 'author.index');\nRoute::statamic('authors/{handle}', 'author.show');\n\nif (App::environment('production')) {\n  URL::forceScheme('https');\n}\n```\n\n_**I am wrapping the force https in a conditional to only run when the environment is `production` otherwise the control panel breaks during local development.**_\n\n## PHP Extensions\n\nThere are several PHP extensions necessary for Statamic, which you can find [here](https://statamic.dev/requirements) which do not get installed by default on DigitalOcean. In order to fix this, I had to add a few of them inside of the `\"require\":` object inside of `composer.json`.\n\nThe extenions I needed to add were the following:\n\n```json\n\"ext-bcmath\": \"*\",\n\"ext-exif\": \"*\",\n\"ext-gd\": \"*\",\n```\n\nThe entire `\"require\":` object within `composer.json` looks like this:\n\n```json\n\"require\": {\n    \"php\": \"^7.2.5\",\n    \"ext-bcmath\": \"*\",\n    \"ext-exif\": \"*\",\n    \"ext-gd\": \"*\",\n    \"fideloper/proxy\": \"^4.2\",\n    \"fruitcake/laravel-cors\": \"^1.0\",\n    \"guzzlehttp/guzzle\": \"^6.3\",\n    \"laravel/framework\": \"^7.0\",\n    \"laravel/tinker\": \"^2.0\",\n    \"statamic/cms\": \"3.0.35\",\n    \"statamic/ssg\": \"^0.2.0\"\n},\n```\n\n_**Note the version numbers for these dependecies are probably outdated by the time you are reading this, so please just add the `\"ext-\"` dependcies only, and leave the others alone.**_\n\n## Wrap up\n\nThat should hopefully solve any issues you have while trying to deploy Statamic 3 to DigitalOcean's app platform.\n\nThe beautiful thing about this setup is that whenever I make a push to `master` from my local machine, DigitalOcean will deploy the latest changes to the live site automatically. 😎\n"},{"slug":"how-to-manage-your-expectations-while-teaching-yourself-how-to-code","category":"blog","title":"How to manage your expectations while teaching yourself how to code","description":"Why embracing being a beginner is the most important lesson for you to learn before teaching yourself how to code.","tags":["career-advice"],"body":"\nPhoto by <a href=\"https://unsplash.com/@franzharvin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Franz Harvin Aceituna</a> on <a href=\"https://unsplash.com/@franzharvin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n\nProgramming is hard. Don't let anyone tell you otherwise. This profession is not easy. Teaching yourself how to code, especially when you have no prior experience, can feel daunting and overwhelming. This is why one of the most important lessons you can learn before you begin this journey is to embrace being a beginner.\n\n## You will be terrible at first and that's ok\n\nWhen you are first learning something, you typically are quite terrible at it. In fact, most of us struggle for quite some time when first learning a new skill, language, subject, instrument, etc. However, for some strange reason, people teaching themselves how to code completely miss this.\n\nWhen you are first learning how to code, you really have no idea what you are doing. Am I doing this right? Should I take this tutorial or that one? Should I take both? Which one should I take first? Should I go to a boot camp? How do I find a mentor? How much do I need to know before I get my first job? The questions are endless, and that's expected, because you don't know what you're doing.\n\nEmbrace not knowing.\n\nYou must learn to embrace being a beginner when teaching yourself how to code. You are going to get stuck a lot! You are going to make tons of mistakes, you will do so many things \"wrong.\" Here is the reality of it all though...\n\nYou are supposed to get stuck, make mistakes and do the wrong things over and over again. This is called learning, the very thing you set out to do.\n\nEmbrace being a beginner.\n\nWhen you are learning to program, you are exposing yourself to many new concepts that at first seem completely foreign to you, and that's because they are. If these concepts were not foreign then you wouldn't be learning anything.\n\n## Managing Expectations\n\nOne of the most valuable lessons I learned while on this journey, and frankly before I even started, was knowing how to manage my expectations. You see prior to teaching myself how to code I taught myself how to play guitar at the age of 14. I didn't have any lessons, all I had was a guitar, the internet and an incredible desire to play. I practiced for hours and hours each and every day, and it took me about one year to become a \"bad\" guitar player.\n\nLet that sink it for a moment. One year of practicing virtually every single day for several hours made me a bad guitar player. I could have just given up right then and there and said this is not for me, clearly I don't have any talent for this. Maybe I did, maybe I didn't, maybe I still don't, who knows.\n\nThe point, however, is that I never gave up. I kept practicing.\n\nAll of that practice finally paid off when I was accepted to Berklee College of Music at the age of 24. I was accepted as a bass player and managed to teach myself that instrument too, without any private lessons as well. I couldn't read music, I didn't know what scales were or key signatures for that matter, but I could play. I played countless shows in various bands and practiced for countless hours over those 10 years.\n\nI embraced being a beginner because I knew that at some point I no longer would be.\n\n## You are not too old and yes you are smart enough\n\nA common question that I see come up again and again is, \"I am x years old, am I too old to program?\" No. It doesn't matter how old you are.\n\nThe real question is how badly do you want to program? If you want it and are willing to work hard for it, you will get it, the same holds true for most things in life.\n\nHard work wins.\n\nDon't be like me and think that you need to have a PhD from MIT in mathematics or physics in order to do this, you don't. I have been a full-time developer for over six years now and I have used very little math in my day to day work. Obviously this will vary depending upon the type of programming you are doing, but don't let it stop you. If you need better math skills, then you will learn those skills too, as needed. That \"as needed\" part is key, by the way.\n\nYou only need to know enough to get the job done, you don't have to know it all.\n\n## You are always learning\n\nAnother misconception many people have when teaching themselves to code is that they have to have it all figured out before they can apply for their first job. I got my first junior developer job after five months of teaching myself how to code. I had no idea what I was doing, however, I knew I would grow into the role over time.\n\nYou need to realize this too, and the sooner the better.\n\nYou are always learning in this field and you always will be. Things change all the time and that is what makes it fun. Sure we get paid a lot of money to do this, but you will be absolutely miserable if you are not comfortable with being put into challenging situations and asked to solve problems you have never seen before on a daily basis.\n\nDevelopers who have been at this for a very long time are still learning and believe it or not they can still learn things for you, even if you are just a junior developer. Everyone's experience is unique and everyone has something unique to offer, don't think you don't simply because you are new.\n\n## Leverage what you have\n\nIf I am being completely honest, the real reason I was hired at that company was because of my degree in music, as Berklee is a well respected school. The company that hired me was a music company and they were willing to take a chance on me because of my degree in music, not because of my programming skills.\n\nThis is something you should be thinking about too. You may not have a lot of experience in programming just yet, but what do you have experience with? If you have experience in retail then try to get a developer job working for a retail company, maybe working on their e-commerce store. If you have experience teaching, then try to get a developer job at a software company in the education space.\n\nLeverage what you already have instead of trying to start from scratch.\n\n## Wrap Up\n\nThe sooner you learn to embrace being a beginner the more effective your learning will be. If you can learn to manage your expectations before you even begin to teach yourself how to code, you will be less likely to give up. You will already be anticipating getting stuck, making mistakes, feeling stupid, etc.\n\nThe biggest thing standing if your way from learning how to code is fear. It's all in your head and it's all a lie.\n\nLearn to turn it off by embracing being a beginner.\n"},{"slug":"jamstack-eleventy-memberstack","category":"blog","title":"Jamstack membership site with Eleventy & Memberstack","description":"In this tutorial, we will build a membership site with Eleventy & Memberstack. We will then deploy it to Surge.","tags":["understanding-the-jamstack"],"body":"\nFor this project, we are going to be building a membership site using the [Eleventy](https://www.11ty.dev/) static site generator and [Memberstack](https://www.memberstack.com/). We will then deploy our membership site with [Surge](https://surge.sh/).\n\n## Installing Eleventy\n\nFirst, you will need to download the [course repo](https://github.com/robertguss/howtocode-understanding-the-jamstack) and use the `start/` folder located within `Eleventy-Membership.` This repo contains the theme for our site, which will allow us to hit the ground running. Memberstack provided the theme as just a `.zip` of HTML, CSS, and js files. I then took all of those files and integrated them with Eleventy to make our lives easier and so that you can become familiar with another static site generator.\n\nOpen your terminal inside of the `start/` folder and install the npm packages.\n\n```bash\nnpm i\n```\n\nThen start the eleventy server to serve up our site.\n\n```bash\nnpm start\n```\n\nThe terminal should display various URLs to access the site.\n\n![Eleventy Server urls](/images/eleventy-membership/eleventy_server_urls.png)\n\nI like to use `http://localhost:8080/`, which is the \"Local\" URL.\n\nWhen you open the URL in your browser, you should see a site that looks like this.\n\n![Eleventy Homepage](/images/eleventy-membership/eleventy_homepage.png)\n\nIt is a relatively simple site with some placeholder content and two pricing tables at the very bottom. Take a couple of mins to click around on the navigation links to see what the pages look like. There is a login form, a signup form, and two membership areas.\n\nWe will be using Memberstack for handling our user login, authentication, sessions, and payments. Memberstack will handle all of the backend, whereas we just have to provide the front-end content for our members.\n\n## Integrating Memberstack\n\nBefore we can begin using [Memberstack](https://www.memberstack.com/), you need to sign up for a free account. Once you have signed up and log in, you will see the following screen.\n\n![Memberstack Select a Builder](/images/eleventy-membership/memberstack_select_a_builder.png)\n\nChoose \"HTML/CSS\"\n\nOn the next screen, give your site a name. I called my \"Eleventy Membership,\" but you can name it whatever you would like. Also, make sure to select the need to accept payments as we will be integrating with Stripe later. Then click the \"Let's go!\" button.\n\n![Memberstack Website Details](/images/eleventy-membership/memberstack_website_details.png)\n\nYou will land on your membership dashboard for our site.\n\n![Memberstack Dashboard](/images/eleventy-membership/memberstack_dashboard.png)\n\nMemberstack gives us a checklist we need to follow to set up our new site. Click on the \"Create a membership\" button on the Setup Checklist.\n\n![Memberstack Create a membership](/images/eleventy-membership/memberstack_create_a_membership.png)\n\nOn the next screen, click on the \"New Membership\" button. Here is where we will set up our two memberships, \"basic\" & \"premium\". Let's start with the basic plan first.\n\n### Basic Membership\n\n![Memberstack Basic Plan Settings](/images/eleventy-membership/memberstack_basic_plan_settings.png)\n\n1. Enter \"Basic Plan\" for the plan name.\n2. Select the \"Require Payment\" button.\n3. Enter $49 for the price. This is the price listed on the pricing tables of our site.\n4. Select \"Monthly\" for the billing frequency\n5. Free Trial, Setup Fee & Collect taxes can remain off for now.\n\nNow click on the \"Hide Content\" button in the \"Members-only content\" section. This section will make sure that users who do not have access to either membership plan cannot access the content.\n\n1. Enter \"Basic Plan\" for the content name.\n2. Enter `basic` for the \"Hide pages & folders\" field. This will hide all of the basic plan content from users who do not have a basic plan.\n3. Enter `login` for the \"Access denied page.\" This will redirect users who try to access the basic account page who are not logged in or are not paying subscribers.\n4. Click the \"Create\" button at the bottom.\n\n![Memberstack Basic Page Hide Content](/images/eleventy-membership/memberstack_basic_page_hide_content.png)\n\nFor the \"Page after signup\" & \"Page after login\" enter `basic/account/`\n\n![Memberstack Basic Page After Signup](/images/eleventy-membership/memberstack_basic_page_after_signup.png)\n\nMemberstack will redirect any user who has a \"basic plan\" membership to the basic account page after signing up and each time they log in.\n\nThen click the \"Create Membership\" button.\n\nYour Membership dashboard should now look like this.\n\n![Memberstack Basic Plan Dashboard](/images/eleventy-membership/memberstack_basic_plan_dashboard.png)\n\n### Premium Membership\n\nClick on the \"New Membership\" button.\n\n![Memberstack Premium Plan Settings](/images/eleventy-membership/memberstack_premium_plan_settings.png)\n\n1. Enter \"Premium Plan\" for the plan name.\n2. Select the \"Require Payment\" button.\n3. Enter $499 for the price. This is the price listed on the pricing tables of our site.\n4. Select \"Yearly\" for the billing frequency\n5. Free Trial, Setup Fee & Collect taxes can remain off for now.\n\nNow click on the \"Hide Content\" button in the \"Members-only content\" section. This section will make sure that users who do not have access to either membership plan cannot access the content.\n\n1. Enter \"Premium Plan\" for the content name.\n2. Enter `premium` for the \"Hide pages & folders\" field. This will hide all of the premium plan content from users who do not have a premium plan.\n3. Enter `login` for the \"Access denied page.\" This will redirect users who try to access the premium account page who are not logged in or are not paying subscribers.\n4. Click the \"Create\" button at the bottom.\n\n![Memberstack Premium Page Hide Content](/images/eleventy-membership/memberstack_premium_page_hide_content.png)\n\nMake sure that both the \"Basic Plan\" & \"Premium Plan\" are on. Our premium members get access to both basic and premium content.\n\n![Basic and Premium Plan Content](/images/eleventy-membership/memberstack_premium_and_basic_content.png)\n\nFor the \"Page after signup\" & \"Page after login\" enter `premium/account/`\n\n![Memberstack Premium Page After Signup](/images/eleventy-membership/memberstack_premium_page_after_signup.png)\n\nMemberstack will redirect the users who have a \"premium plan\" membership to the premium account page after signing up and after logging in.\n\nThen click the \"Create Membership\" button.\n\nYour Membership dashboard should now look like this.\n\n![Memberstack Premium Plan Dashboard](/images/eleventy-membership/memberstack_premium_plan_dashboard.png)\n\n### Integrating Memberstack Memberships\n\nNow that we have both of our memberships configured, we need to integrate them on our site so that our users can signup for them.\n\nUnderneath the \"Membership Plans\" section of our dashboard are both membership plans. To the right of those are buttons called \"Signup link\" this is the code snippet we need to link our memberships on our site to Memberstack. Click on the \"Signup link\" for the Basic plan first.\n\n![Memberstack Basic Signup Link](/images/eleventy-membership/memberstack_basic_signup_link.png)\n\nThen click the \"I'd rather use data attributes\" and copy the attribute.\n\nThen head back over to our site's code and open the `index.html` file and scroll to around line `232` and add the the data attribute to our basic signup link like so:\n\n```HTML\n<a\n  data-ms-membership=\"5fd8ca13...\"\n  href=\"signup\"\n  class=\"button full-button w-inline-block\"\n>\n  <div>Get Started</div>\n</a>\n```\n\nNow let's do the same for our premium membership. Head back to Memberstack and copy the data attribute for the premium plan.\n\n![Memberstack Premium Signup Link](/images/eleventy-membership/memberstack_premium_signup_link.png)\n\nAdd the data attribute to our premium link around line `247`\n\n```html\n<a\n  data-ms-membership=\"5fd8cfb1...\"\n  href=\"signup\"\n  class=\"button full-button secondary-button w-inline-block\"\n>\n  <div>Get Started</div>\n</a>\n```\n\n### Installing Memberstack Header code\n\nNext, we need to install the Memberstack `<script>` tag in the `<head>` of our site. Head back over to the main dashboard of Memberstack and click on the \"Install header code\" underneath the Setup Checklist.\n\n![Memberstack Install Header Code](/images/eleventy-membership/memberstack_install_header_code.png)\n\nCopy the code snippet in there and then paste the snippet just above the closing `</head>` tag in `src/_includes/layouts/base.html.` The file should now look like this:\n\n```HTML\n<!-- Additional Code Above -->\n<link\n  href=\"/asssets/images/Freebie-Favicon.png\"\n  rel=\"shortcut icon\" type=\"image/x-icon\">\n\n  <link\n    href=\"/images/images/Freebie-Webclip.png\"\n    rel=\"apple-touch-icon\">\n\n  <!-- Memberstack -->\n  <script\n    src=\"https://api.memberstack.io/static/memberstack.js?custom\"\n    data-memberstack-id=\"751ee1...\">\n  </script>\n</head>\n```\n\n_**Note: the formatting & indentation might be different in your file.**_\n\n## Signup Form\n\nNext, we need to integrate Memberstack without Signup Form. On the Memberstack main dashboard, click on the \"Add a Login form\" under the \"More Features\" section.\n\n![Memberstack Add Login Form](/images/eleventy-membership/memberstack_add_login_form.png)\n\nYou will be taken to the \"Login\" form section, but we need to set up the \"Signup\" form first. So click on the \"Signup\" tab at the top.\n\n![Memberstack Signup Formm](/images/eleventy-membership/memberstack_signup_form.png)\n\nBy default, the Signup form comes with fields for `email` and `password.` Our form also has a field for `first name` and `last name.`\n\n![Eleventy Signup Form](/images/eleventy-membership/eleventy_signup_form.png)\n\nClick on the \"Add custom fields\" button to add the First Name Field.\n\n![Memberstack First Name Field](/images/eleventy-membership/memberstack_first_name_field.png)\n\nAdd another field for the `Last Name.`\n\nThe signup form should now look like this:\n\n![Memberstack Signup Form All Fields](/images/eleventy-membership/memberstack_signup_form_all_fields.png)\n\nScroll to the bottom of the form under the \"Signup form type\" and select `Build a custom signup form.`\n\n![Memberstack Build a custom signup form](/images/eleventy-membership/memberstack_build_a_custom_signup_form.png)\n\nCopy the data attribute.\n\n![Memberstack signup form data attribute](/images/eleventy-membership/memberstack_signup_form_data_attribute.png)\n\nWe now need to add this to the signup `<form>` element on our site. Add the data attribute to the `form` element in `signup.html` around line `12`\n\n```html\n<form\n  data-ms-form=\"signup\"\n  id=\"sign-up\"\n  name=\"wf-form-Sign-up-Form\"\n  data-name=\"Sign up Form\"\n  method=\"post\"\n  ms-signup=\"true\"\n  class=\"login-form\"\n></form>\n```\n\n## Login Form\n\nNext, let's set up our login form.\n\nClick on the \"Login\" tab at the top of the Memberstack Dashboard.\n\n![Memberstack Login Form](/images/eleventy-membership/memberstack_login_form.png)\n\nOur site's login form only has an email and password field, so the default fields that Memberstack provides are just what we need.\n\n![Eleventy Login Form](/images/eleventy-membership/eleventy_login_form.png)\n\nOn the Memberstack dashboard, scroll to the bottom and select \"Build a custom login form,\" just like we did for the signup form.\n\n![Memberstack Custom Login Form](/images/eleventy-membership/memberstack_login_custom_form.png)\n\nThen copy the data attribute and paste it into the `<form>` element of the login form around line `13` of `login.html`\n\n```html\n<form\n  data-ms-form=\"login\"\n  id=\"login\"\n  name=\"wf-form-login\"\n  data-name=\"login\"\n  method=\"post\"\n  ms-login=\"true\"\n  class=\"login-form\"\n></form>\n```\n\n## Deploying to Surge\n\nNow that we have our site set up with Memberstack, we need to deploy it to a live URL for testing. We will be deploying with [Surge](https://surge.sh/).\n\nFirst, we need to install Surge as a global NPM package.\n\n```bash\nnpm i -g surge\n```\n\nNext, we need to build our static site.\n\n```bash\nnpm run build\n```\n\nNext, we can deploy our site with this simple command.\n\n```bash\nsurge dist\n```\n\nThis tells Surge to deploy our `dist` folder, which contains our built static site.\n\nIf this is the first time you are using Surge, you will be asked to create an account. After doing so, you should see something similar to this.\n\n![Surge Domain](/images/eleventy-membership/surge_domain.png)\n\nPress enter, and in a few seconds, your site will be live. Head on over to the domain surge provides and open it in your browser.\n\n![Surge Homepage](/images/eleventy-membership/surge_homepage.png)\n\nCopy the domain that Surge gives you and paste it into the `deploy` script within `package.json` like so:\n\n```JSON\n{\n  \"name\": \"eleventy-memberstack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"npx eleventy --serve\",\n    \"build\": \"npx eleventy\",\n    \"deploy\": \"npm run build && surge dist --domain faulty-hate.surge.sh\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@11ty/eleventy\": \"^0.11.1\"\n  }\n}\n```\n\nThis is a custom script I wrote that will automatically build our eleventy site and deploy to Surge whenever we run.\n\n```bash\nnpm run deploy\n```\n\nAfter you have updated the script with your surge URL, run the `deploy` command to ensure everything is working correctly.\n\n![Surge deploy command](/images/eleventy-membership/surge_deploy.png)\n\n## Testing Memberstack Integration\n\nNow that our site is live let's test to ensure Memberstack is working correctly.\n\nFirst, let's try to access the `/basic/account` page, which is reserved only for users who have a basic membership. On your live surge site, go to `https://faulty-hate.surge.sh/basic/account,` replacing the domain with whichever one Surge provided you.\n\nYou will be redirected to the `login` page.\n\nNow try to access the premium account by going to `/premium/account/.` For example, `https://faulty-hate.surge.sh/premium/account/.`\n\nYou will be redirected to the `login` page.\n\n### Basic Membership Signup\n\nNow let's try to signup for a basic plan. Scroll to the bottom of the home page to the pricing tables and click on the basic plan. Fill out the signup form and press \"Continue.\" You should be prompted with a modal like this:\n\n![Eleventy Basic Plan Purchase](/images/eleventy-membership/eleventy_basic_plan_signup.png)\n\nClick confirm and pay.\n\nAfter a few seconds, you will be redirected to `/basic/account,` the basic account membership area. So far, so good! Memberstack handles all of the session and authentication for us, so we are currently logged in as a basic member.\n\nNow that we are logged in, try to go to `/premium/account,` and you should be redirected to the login page.\n\nSo our basic memberships are working, and these members are unable to access the premium section of our site. Awesome!\n\n### Logging out\n\nNow that we are signed in, we need a way for our users to sign out. We need to add a logout button to the nav of our `/basic/account` page right next to the \"Change Plan\" button.\n\nAdd the following to `src/basic/account.html` `<nav>` tag.\n\n```html\n<a href=\"#/ms/logout\" class=\"button navbar-cta w-nav-link\">Log Out</a>\n```\n\nThe entire `<nav>` should look like this.\n\n```html\n<nav role=\"navigation\" class=\"homepage-nav-menu w-nav-menu\">\n  <a href=\"#/ms/logout\" class=\"button navbar-cta w-nav-link\">Log Out</a>\n  <a href=\"/basic/upgrade\" class=\"button navbar-cta w-nav-link\">Change Plan</a>\n</nav>\n```\n\nThe entire `account.html` file should look like this.\n\n```html\n{% extends \"layouts/base.html\" %} {% block content %}\n\n<div\n  data-collapse=\"medium\"\n  data-animation=\"default\"\n  data-duration=\"400\"\n  class=\"navbar w-nav\"\n>\n  <a href=\"/\" class=\"brand w-nav-brand\">\n    <img src=\"/images/images/heart.svg\" alt=\"\" />\n  </a>\n\n  <nav role=\"navigation\" class=\"homepage-nav-menu w-nav-menu\">\n    <a href=\"#/ms/logout\" class=\"button navbar-cta w-nav-link\">Log Out</a>\n    <a href=\"/basic/upgrade\" class=\"button navbar-cta w-nav-link\"\n      >Change Plan</a\n    >\n  </nav>\n\n  <div class=\"menu-button w-nav-button\">\n    <div class=\"w-icon-nav-menu\"></div>\n  </div>\n</div>\n<div class=\"delete-me-section\">\n  <h1 class=\"account-h1\">Basic Account</h1>\n  <div class=\"w-richtext\">\n    <p>Member&#x27;s only areas can be any combination of the following:</p>\n    <ul>\n      <li>an individual page</li>\n      <li>a group of pages</li>\n      <li>folders</li>\n      <li>CMS items</li>\n      <li>or entire CMS collections</li>\n    </ul>\n  </div>\n</div>\n\n{% endblock %}\n```\n\nWith that in place, let's push our latest changes to Surge and test.\n\n```bash\nnpm run deploy\n```\n\nYou should still be logged in, so navigate to `/basic/account` and you should see our new \"Log Out\" button at the top. When you click it, you should be redirected to the home page. Try to access `/basic/account` again, and you will be redirected to the home page.\n\n### Premium Membership Signup\n\nNow that we have confirmed our basic membership is working, let's test out the premium membership.\n\nOn the home page, scroll to the pricing tables at the bottom and click on the premium membership. Fill out the form, and you will see the Premium payment form.\n\n![Eleventy Premium Plan Checkout](/images/eleventy-membership/eleventy_premimum_plan_checkout.png)\n\nYou should be redirected to the `/premium/account` page. Since premium also included access to everything the basic membership has, you should also be able to access `/basic/account.`\n\nThis page will also need a log out button, but you already know how to do that. If you want one on this page as well, by all means, go for it.\n\n## Connecting Stripe for payments\n\n_**This next section is optional and is only useful if you are launching a live membership site. Currently, there is no way to test payments taken from Memberstack with Stripe while in the demo/test mode. Your membership site must be live for the charges to show up in Stripe.**_\n\nAll of our testing thus far has been in test mode. If you noticed, when we tried to signup for these plans, we didn't have to enter in any actual credit card information. We can connect Stripe so we can receive real money from real customers.\n\nFirst, you will need to set up a [free Stripe account](https://stripe.com/). After that, head back over to the Memberstack dashboard.\n\nIn the main Memberstack dashboard, there is a settings section; click on that to expand it and click on \"Connect to Stripe.\"\n\n![Memberstack Connect to Stripe](/images/eleventy-membership/memberstack_connect_to_stripe.png)\n\nOn this screen, click the big button to connect to Stripe, you should see a screen like this.\n\n![Stripe connect to Memberstack](/images/eleventy-membership/stripe_connnect_to_memberstack.png)\n\nClick the \"Connect my Stripe account\" button.\n\nYou should then be redirected back to Memberstack and see the following:\n\n![Memberstrack Stripe Successfully Connected](/images/eleventy-membership/memberstack_stripe_successfully_connected.png)\n\n## GitHub Repo\n\nYou can find the project repo here inside of `Eleventy-Membership/final`\n[GitHub Repo](https://github.com/robertguss/howtocode-understanding-the-jamstack)\n\n## Wrap up\n\nWell, that wraps up this project. To recap, we used Memberstack to create a membership Jamstack site with two membership plans \"basic\" & \"premium.\" Within Memberstack, we could designate which portion of the site basic and premium members can access and redirect users who do not have the appropriate access. We also learned how to integrate Stripe if we decide to launch a live membership site.\n\nWe also gained some experience with the Eleventy static site generator. This SSG is quite popular and is growing ever more so in popularity. It is quite simple to use and has a lot of features built-in by default. It provides several templating languages and other features that make getting Jamstack sites up and running quickly.\n\nFor hosting and deployment, we used Surge. Surge is a simple NPM package that allows us to publish static sites with just a single command.\n\n## Understanding the Jamstack Book\n\nMy book Understanding the Jamstack is \"pay what you want.\" You can get it for free by entering `0` for the price at checkout.\n\n  <script src=\"https://gumroad.com/js/gumroad.js\"></script>\n\n<a class=\"gumroad-button\" href=\"https://gum.co/understanding-the-jamstack\" target=\"_blank\">Buy Understanding the Jamstack</a>\n"},{"slug":"jamstack-gatsby-stripe-ecommerce","category":"blog","title":"Jamstack ecommerce site with Gatsby & Stripe Checkout","description":"In this tutorial, we will build an e-commerce site with Gatsby and Stripe checkout. We will then deploy it to Vercel.","tags":["understanding-the-jamstack"],"body":"\n**\\*This project builds on top of the [Gatsby E-commerce Tutorial](https://www.gatsbyjs.com/tutorial/ecommerce-tutorial) provided in the official Gatsby docs, and the [Use Shopping Cart Example repo](https://github.com/dayhaysoos/use-shopping-cart/tree/master/examples/gatsby).**\\_\n\nIn this project, we will be creating a simple e-commerce web site with Gatbsy and Stripe checkout. Stripe checkout is client-side checkout that allows us to integrate a complete checkout experience without a backend.\n\n## Installing Gatsby\n\nFirst, you will need to download and install [Gatsby](https://www.gatsbyjs.com)\n\n```bash\nnpm i -g gatsby-cli\n```\n\nWith the CLI installed, create a new project.\n\n```bash\ngatsby new stripe-checkout\n# name the project whatever you would like\n```\n\nOpen up the project and run the development server.\n\n```bash\ngatsby develop\n```\n\nOnce the server is up and running, you should be able to preview the site at `http://localhost:8000/`.\n\n![Gatsby Default Starter](/images/gatsby-ecommerce/gatsby_default_starter.png)\n\n## Installing & Configuring Stripe\n\nYou will need to create a [Stripe](https://stripe.com/) account if you don't already have one. You can sign up for a free account to provide all that we need for our project.\n\nOnce you have your Stripe account set up, head back over to your terminal to install the Stripe NPM packages.\n\n```bash\nnpm install @stripe/stripe-js gatsby-source-stripe\n```\n\nWith both of these packages installed, we now need to add the `gatsby-source-stripe` plugin to our `gatsby-config.js` file. Add the following to the config.\n\n```js\n{\n  resolve: `gatsby-source-stripe`,\n  options: {\n    objects: [\"Price\"],\n    secretKey: 'secret key goes here',\n    downloadFiles: false,\n  }\n},\n```\n\nYou will notice a key called `secretKey` that we need to populate with Stripe's secret key. We will configure this next.\n\nThe entire file should look like this.\n\n```js\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby Default Starter`,\n    description: `Gatsby Default Starter`,\n    author: `@gatsbyjs`,\n  },\n  plugins: [\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `gatsby-starter-default`,\n        short_name: `starter`,\n        start_url: `/`,\n        background_color: `#663399`,\n        theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/gatsby-icon.png`,\n      },\n    },\n    {\n      resolve: `gatsby-source-stripe`,\n      options: {\n        objects: [\"Price\"],\n        secretKey: \"secret key goes here\",\n        downloadFiles: false,\n      },\n    },\n  ],\n};\n```\n\nHead back over to the Stripe dashboard and click on \"Developers\" and then \"API keys\" on the left-hand side.\n\n![Stripe developer API keys sidebar](/images/gatsby-ecommerce/stripe_developer_api_keys_sidebar.png)\n\n_**make sure to toggle on the \"Viewing test data\" as well.**_\n\nIn the \"Standard keys\" section, you should see the following.\n\n![Stripe Standard Keys](/images/gatsby-ecommerce/stripe_standard_keys.png)\n\nClick the \"Reveal live key\" to show your secret key and then copy it.\n\n### Creating .env variables\n\nWe do not want to paste our secret key into our gatsby config because it would expose it to the outside world. This is a huge security risk! To protect our keys, we will create a `.env` file, which allows us to use our keys without exposing them to the public.\n\nIn the root of our gatsby project, create two files called `.env.development` & `.env.production`\n\n```bash\ntouch .env.development\ntouch .env.production\n```\n\nWithin both files, add both your `Publishable` and `Secret` keys like so:\n\n```bash\nGATSBY_STRIPE_SECRET_KEY=sk_test_FOlN...\nGATSBY_STRIPE_PUBLISHABLE_KEY=pk_test_ibqK...\n```\n\nThe `GATSBY` prefix is important because we need these variables exposed to the client. You can read more about this [here](https://www.gatsbyjs.com/docs/how-to/local-development/environment-variables/#example-of-using-an-environment-variable)\n\n`.env.production` will contain the keys we need for production; for the sake of this example, our keys will be the same, but in a real-world project, they would be different.\n\nNow let's add this file to `.gitignore`.\n\n```bash\n# dotenv environment variable files\n.env*\n```\n\n_**This may already exist from when we first created our project, but double-check just in case.**_\n\nNow we need to use these env variables in our Gatsby config.\n\n```js\n{\n  resolve: `gatsby-source-stripe`,\n  options: {\n    objects: ['Price'],\n    secretKey: process.env.GATSBY_STRIPE_SECRET_KEY,\n    downloadFiles: false,\n  },\n},\n```\n\nWe also need to include our `.env.development` file in our config to have access to the variables. Add the following snippet to the top of the `gatsby-config.js` file just above the `module.exports = {`\n\n```js\nrequire(\"dotenv\").config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n\nmodule.exports = {\n```\n\n### Stripe Checkout\n\nNow let's set up and configure Stripe checkout. Head over to `https://dashboard.stripe.com/settings/checkout`. Under the\n\"Next steps\" section, click the \"Enable client-only integration\" button.\n\n![Stripe enable clienttt only integration](/images/gatsby-ecommerce/stripe_enable_client_only_integration.png)\n\nClick \"Allow\" on the modal that pops up.\n\n![Stripe allow modal](/images/gatsby-ecommerce/stripe_allow_modal.png)\n\nYou should now see some additional fields in the \"Next steps\" section.\n\n![Stripe client-only fields](/images/gatsby-ecommerce/stripe_client_only_fields.png)\n\nNext, we need to create some products in Stripe to sell on our site. Click on the \"Create your first product\" link.\n\n![Stripe create your first product link](/images/gatsby-ecommerce/stripe_create_your_first_product_link.png)\n\nOn the next screen, click on the \"Add Product\" button to add our first product.\n\nFor this example store, we are going to be selling t-shirts for developers. So let's find some images of dev t-shirt's that we can sell. You are free to use whatever images or products you would like. I am going to use some photos I found from [Redbubble](https://www.redbubble.com/shop/dev+t-shirts)\n\nEnter a name for the product, upload the image, set the price, and check the \"one-time\" button.\n\n_**Make sure to add a few products so that we have some actual products to populate our store page with.**_\n\n![Stripe product information](/images/gatsby-ecommerce/stripe_product_information.png)\n\n## Adding Stripe as a utility function\n\nPer Gatsby's [docs](https://www.gatsbyjs.com/tutorial/ecommerce-tutorial/#extract-loading-of-stripejs-into-a-utility-function), they recommend that we wrap `Stripe.js` into a utility function so that we can use it across multiple pages.\n\nCreate a new file in `src/utils/stripejs.js` and add the following.\n\n_**you will need to create the `utils` folder as well**_\n\n```js\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nlet stripePromise;\nconst getStripe = () => {\n  if (!stripePromise) {\n    stripePromise = loadStripe(process.env.GATSBY_STRIPE_PUBLISHABLE_KEY);\n  }\n  return stripePromise;\n};\n\nexport default getStripe;\n```\n\n## Adding a shopping cart\n\nWe will be installing a shopping cart package that will allow our customers to add t-shirts to their cart, as this does not come out of the box with Stripe checkout. Otherwise, customers will only be able to buy a single product at a time.\n\nWe will be installing [Use-Shopping-Cart](https://useshoppingcart.com/getting-started#installation)\n\nInstall the shopping cart with the following command.\n\n```bash\nnpm install --S use-shopping-cart\n```\n\n## Displaying our products\n\nNow that we have some products uploaded to Stripe, and your shopping cart installed, we need to display them on our Gatsby site.\n\n_**The following code comes from the [Use Shopping Cart Example Gatsby Repo](https://github.com/dayhaysoos/use-shopping-cart/tree/master/examples/gatsby) with only slight modifications made by me**_\n\n### Index Page\n\nWithing `/pages/index.js`, add the following.\n\n```js\nimport React from \"react\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport Skus from \"../components/Products/Skus\";\nimport CartOverview from \"../components/CartOverview\";\n\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { CartProvider } from \"use-shopping-cart\";\n\nconst stripePromise = loadStripe(process.env.GATSBY_STRIPE_PUBLISHABLE_KEY);\n\nconst CartExample = () => (\n  <Layout>\n    <SEO title=\"Cart Example\" />\n    <h1>Checkout with cart example</h1>\n    <h2>\n      With{\" \"}\n      <a href=\"https://use-shopping-cart.netlify.app/\">use-shopping-cart</a>\n    </h2>\n    <CartProvider\n      mode=\"client-only\"\n      stripe={stripePromise}\n      successUrl={`${window.location.origin}/page-2/`}\n      cancelUrl={`${window.location.origin}/`}\n      currency=\"USD\"\n      allowedCountries={[\"US\", \"GB\", \"CA\"]}\n      billingAddressCollection={true}\n    >\n      <CartOverview />\n      <Skus />\n    </CartProvider>\n  </Layout>\n);\n\nexport default CartExample;\n```\n\n#### Index Page Breakdown\n\n```js\n<CartProvider // This component comes from the use-shopping-cart package\n  mode=\"client-only\" // allows client-side checkout\n  stripe={stripePromise} // Our Stripe instance so we can communicate with the Stripe API\n  successUrl={`${window.location.origin}/page-2/`} // the url to redirect to after a successful purchase\n  cancelUrl={`${window.location.origin}/`} // the url to redirect to when they cancel a purchase\n  currency=\"USD\" // US Dollars is the type of currency we are accepting\n  allowedCountries={[\"US\", \"GB\", \"CA\"]}\n  billingAddressCollection={true} // allows the collection of the users billing address for Stripe\n>\n  <CartOverview /> // We will create and go over this component later\n  <Skus /> // We will create and go over this component next\n</CartProvider>\n```\n\n### Skus Component\n\nCreate a new folder called `Products` inside the `src/components folder` and create a file called `Skus.js`.\n\n```js\n// src/components/Products/Skus.js\nimport React from \"react\";\nimport { graphql, StaticQuery } from \"gatsby\";\nimport SkuCard from \"./SkuCard\";\n\nconst conatinerStyles = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  justifyContent: \"space-between\",\n  padding: \"1rem 0 1rem 0\",\n};\n\nexport default (props) => (\n  <StaticQuery\n    query={graphql`\n      query ProductPrices {\n        prices: allStripePrice(\n          filter: { active: { eq: true }, currency: { eq: \"usd\" } }\n          sort: { fields: [unit_amount] }\n        ) {\n          edges {\n            node {\n              id\n              active\n              currency\n              unit_amount\n              product {\n                id\n                name\n                images\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={({ prices }) => (\n      <div style={conatinerStyles}>\n        {prices.edges.map(({ node: price }) => {\n          const newSku = {\n            sku: price.id,\n            name: price.product.name,\n            price: price.unit_amount,\n            currency: price.currency,\n            image: price.product.images,\n          };\n          return <SkuCard key={price.id} sku={newSku} />;\n        })}\n      </div>\n    )}\n  />\n);\n```\n\n#### Skus Component Brekdown\n\n```js\nquery ProductPrices {\n  prices: allStripePrice(\n    filter: { active: { eq: true }, currency: { eq: \"usd\" } }\n    sort: { fields: [unit_amount] }\n  ) {\n    edges {\n      node {\n        id\n        active\n        currency\n        unit_amount\n        product {\n          id\n          name\n          images\n        }\n      }\n    }\n  }\n}\n```\n\nThis is our GraphQL query which fetches the product data from Stripe. We are filtering for only active products where the currency is `==` US Dollars. We then retrieve the id, whether or not the product is active, the currency, unit_amount, product id, product name, and product images.\n\n```js\nrender={({ prices }) => (\n  <div style={conatinerStyles}>\n    {prices.edges.map(({ node: price }) => {\n      const newSku = {\n        sku: price.id,\n        name: price.product.name,\n        price: price.unit_amount,\n        currency: price.currency,\n        image: price.product.images,\n      }\n      return <SkuCard key={price.id} sku={newSku} />\n    })}\n  </div>\n)}\n```\n\nWe then take the results of our GraphQL query and `map` over the products returned and create a `newSku` object for each product. We then take the `newSku` object and pass it into the `<SkuCard />` component via the `sku` prop.\n\n### Sku Card Component\n\nCreate a new file called `SkuCard.js` in the `src/components/Products` folder.\n\n```js\n// src/components/Products/SkuCard.js\nimport React from \"react\";\n\nimport { useShoppingCart, formatCurrencyString } from \"use-shopping-cart\";\n\nconst cardStyles = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"space-around\",\n  alignItems: \"flex-start\",\n  padding: \"1rem\",\n  marginBottom: \"1rem\",\n  boxShadow: \"5px 5px 25px 0 rgba(46,61,73,.2)\",\n  backgroundColor: \"#fff\",\n  borderRadius: \"6px\",\n  maxWidth: \"300px\",\n};\nconst buttonStyles = {\n  fontSize: \"13px\",\n  textAlign: \"center\",\n  color: \"#fff\",\n  outline: \"none\",\n  padding: \"12px\",\n  boxShadow: \"2px 5px 10px rgba(0,0,0,.1)\",\n  backgroundColor: \"rgb(255, 178, 56)\",\n  borderRadius: \"6px\",\n  letterSpacing: \"1.5px\",\n};\n\nconst SkuCard = ({ sku }) => {\n  const { addItem } = useShoppingCart();\n\n  return (\n    <div style={cardStyles}>\n      <img src={sku.image} alt=\"\" />\n      <h4>{sku.name}</h4>\n      <p>\n        Price:{\" \"}\n        {formatCurrencyString({\n          value: parseInt(sku.price),\n          currency: sku.currency,\n        })}\n      </p>\n      <button style={buttonStyles} onClick={() => addItem(sku)}>\n        ADD TO CART\n      </button>\n    </div>\n  );\n};\n\nexport default SkuCard;\n```\n\n#### Sku Card Component Breakdown\n\nThis component is fairly straight forward. We take the data passed into it via the `sku` prop and then render the appropriate markup and styling accordingly. This card component will wrap each of our products and display the product image, name, price and the Add to Cart button.\n\n### Shopping Cart Component\n\nLastly, we will create a component for our shopping cart.\n\n```js\n// src/components/CartOverview.js\n\nimport React, { useState } from \"react\";\n\nimport { useShoppingCart } from \"use-shopping-cart\";\n\nconst buttonStyles = {\n  fontSize: \"13px\",\n  textAlign: \"center\",\n  color: \"#fff\",\n  outline: \"none\",\n  padding: \"12px\",\n  boxShadow: \"2px 5px 10px rgba(0,0,0,.1)\",\n  backgroundColor: \"rgb(255, 178, 56)\",\n  borderRadius: \"6px\",\n  letterSpacing: \"1.5px\",\n};\n\nconst Cart = () => {\n  const [loading, setLoading] = useState(false);\n  /* Gets the totalPrice and a method for redirecting to stripe */\n  const { formattedTotalPrice, redirectToCheckout, cartCount, clearCart } =\n    useShoppingCart();\n\n  return (\n    <div>\n      {/* This is where we'll render our cart */}\n      <p>Number of Items: {cartCount}</p>\n      <p>Total: {formattedTotalPrice}</p>\n\n      {/* Redirects the user to Stripe */}\n      <button\n        style={buttonStyles}\n        disabled={loading}\n        onClick={() => {\n          setLoading(true);\n          redirectToCheckout();\n        }}\n      >\n        {loading ? \"Loading...\" : \"Checkout\"}\n      </button>\n      <button style={buttonStyles} onClick={clearCart}>\n        Clear cart\n      </button>\n    </div>\n  );\n};\n\nexport default Cart;\n```\n\n#### Shopping Cart Component Breakdown\n\nOur shopping cart displays the total number of products in our cart and the total price of all of those items and two buttons. One button redirects to the checkout, which is Stripe checkout in our case, and the other empties the cart.\n\nOur site should now look like this.\n\n### Finished Store\n\n![Gatsby store home page](/images/gatsby-ecommerce/gatsby_store_home_page.png)\n\nAdd a couple of products to the cart and then click \"Checkout.\"\n\nIf everything goes well, you will see Stripe checkout.\n\n![Stripe checkout page](/images/gatsby-ecommerce/stripe_checkout_page.png)\n\nFill out the details and use the special Stripe credit card `4242 4242 4242 4242`. For the expiration date, choose any date in the future and use any three-digit number for the security code.\n\nNow, if you open up your Stripe dashboard and click on \"Payments\" in the left sidebar, you should see the purchase you just made.\n\n_**remember to make sure the \"Viewing test data\" is toggled on in the left sidebar**_\n\n![Stripe successful purchase](/images/gatsby-ecommerce/stripe_successful_purchase.png)\n\n## Deploying to Vercel\n\nWe will deploy our site to [Vercel](https://vercel.com/dashboard), another popular hosting provider for Jamstack sites. Head over there and sign up for a free account.\n\nBefore we can use Vercel, we first need to push our Gatsby site up to GitHub.\n\n_**If you forget how to do this, please take a look back at the Hugo Blog project where I show you how to set this up.**_\n\nAfter logging in, you should see Vercel's dashboard.\n\n![Vercel Dashboard](/images/gatsby-ecommerce/vercel_dashboard.png)\n\nClick on \"Import project\" and then \"Import Git Repository.\"\n\n![Vercel import repo](/images/gatsby-ecommerce/vercel_import_repo.png)\n\nYou then need to paste in the URL of your repo from GitHub and press \"Continue.\"\n\nVercel is smart enough to detect that this is a Gatsby project, and so the \"Build and Output Settings\" are already configured for us. However, we need to paste in our `.env` variables in the \"Environment Variables\" section.\n\n![Vercel Environment Variables](/images/gatsby-ecommerce/vercel_environment_variables.png)\n\nThen press the \"Deploy\" button.\n\nAfter a couple of mins or so, you should see the following.\n\n![Vercel Successful Deploy](/images/gatsby-ecommerce/vercel_successful_deploy.png)\n\nClick the \"Visit\" button to see the live site.\n\nMake a test purchase to ensure that Stripe checkout is working correctly.\n\n## GitHub Repo\n\nThe completed project can be found here inside of `Gatsby-eCommerce/final`\n[GitHub Repo](https://github.com/robertguss/howtocode-understanding-the-jamstack)\n\n## Wrap Up\n\nIn this tutorial, we learned how to create an ecommerce site using Gatsby and Stripe Checkout. We also installed a shopping cart plugin and deployed our site to Vercel.\n\n## Understanding the Jamstack Book\n\nMy book Understanding the Jamstack is \"pay what you want.\" You can get it for free by entering `0` for the price at checkout.\n\n  <script src=\"https://gumroad.com/js/gumroad.js\"></script>\n\n<a class=\"gumroad-button\" href=\"https://gum.co/understanding-the-jamstack\" target=\"_blank\">Buy Understanding the Jamstack</a>\n"},{"slug":"jamstack-hugo-netlify-zapier","category":"blog","title":"Jamstack blog with Hugo, Netlify CMS and Zapier","description":"In this tutorial, we will build a blog with Hugo and Netlify CMS. We will then deploy our site to Netlify and use Zapier to automate our deploys.","tags":["understanding-the-jamstack"],"body":"\nWe will be building a blog using the [Hugo](https://gohugo.io) Static Site Generator and then deploy it to Netlify. Once our blog is complete and lives on Netlify, we will then integrate [Zapier](https://zapier.com/) to trigger our site's automatic CI/CD pipelines. Zapier will allow us to write blog posts ahead of time by setting a publish date sometime in the future. It will then notify Netlify to build our site so that the entire process is automated.\n\n## Installing Hugo\n\nHugo is written in the Go Programming Language, making it very easy to install since it is just a single binary. To install Hugo, head over to their [Installation Docs](https://gohugo.io/getting-started/installing) and follow along for whatever operating system you are using. I am using Mac and have installed Hugo with [Homebrew](https://brew.sh/). _I highly recommend using Homebrew if you are on a Mac._\n\n## Creating the blog\n\nNow that you have Hugo installed, run the following command to create a new Hugo site:\n\n```bash\nHugo new site blog\n\n# blog will be the name of the folder and project\n```\n\n_**If you are like me, you probably already have a directory where all of your web/code projects live on your computer. I have a folder called `Projects` on my laptop, which contains all of my projects. I recommend you have something similar on your machine and install it there.**_\n\nWe are going to be using a pre-configured theme for Hugo called [Ink](https://themes.gohugo.io/hugo-ink/). You can\ndownload the theme from Github [here](https://github.com/knadh/hugo-ink). Click on the green button called \"Code\" and then \"Download Zip.\"\n\n![Ink GitHub Download](/images/jamstack-hugo-blog/ink_github_download.png)\n\nWhen you download the zip file and unzip it, it is called `Hugo-ink-master.` Rename the folder to `ink` and then move it inside the `themes` folder.\n\nYour Hugo project should now look like this:\n\n![Ink Directory listing](/images/jamstack-hugo-blog/ink_directory_listing.png)\n\nInside of the `ink` theme folder is another folder called `exampleSite.` This folder contains some example content that we can use to populate our site with some pages and posts.\n\n1. Copy the directory `themes/ink/exampleSite/archetypes/` and replace `/archetypes/` located at the project's root.\n2. Copy the directory `themes/ink/exampleSite/content/` and replace `/content/` located at the root of the project.\n3. Copy the directory `themes/ink/exampleSite/data/` and replace `/data/` located at the project's root.\n4. Copy the file `themes/ink/exampleSite/config.toml` and replace `config.toml` located at the root of the project.\n\nNow run the following command in your terminal to start the Hugo server:\n\n```bash\nHugo serve\n```\n\nIf everything is configured and set up correctly, you should see the following at `http://localhost:1313/`\n\n![Harbor Home Page](/images/jamstack-hugo-blog/ink-home-page.jpg)\n\n_**Your site might have a white background, which is fine; the theme has both light and dark themes, which are toggled based upon your system preferences.**_\n\n## Instant Reload & Creating new posts\n\nHugo's built-in dev server will automatically reload the page whenever it detects a page. You can see this in action by modifying one of the posts located at `content/posts/.` If you make any changes to one of these files, the browser will reload and update with your changes virtually instantly! Pretty sweet right 😎\n\nTo create a new post, you will either have to stop the Hugo server, or open up another terminal window in the project directory and run the following command.\n\n```bash\nhugo new posts/my-first-post.md\n```\n\nFeel free to name the file whatever you like. You will need to modify what is known as the [Front Matter](https://gohugo.io/content-management/front-matter) at the top of the file.\n\nIf you open up one of the sample posts, you will see something like the following at the top:\n\n```yaml\n---\ntitle: \"Markdown Syntax Guide\"\ndate: \"2019-03-11\"\ndescription: \"Sample article showcasing basic Markdown syntax.\"\ntags: [markdown, CSS, HTML, themes]\ncategories: [themes, syntax]\n---\n```\n\nThis data is what Hugo uses to generate various data on our site.\n\nThis data is entirely customizable by you. With the correct theme and configuration modifications, you can have Hugo parse and use all kinds of custom data in the `Front Matter.`\n\nTake the example I used above and paste it into your new post.\n\nHere is what my post looks like:\n\n```\n---\ntitle: 'My First Post'\ndate: '2020-12-12'\ndescription: 'This is the description of my first post'\ntags: [markdown]\ncategories: [syntax]\n---\n\nContent goes here...\n```\n\nThe homepage should have been updated with your latest post and should look something like this:\n\n![New post on the home page](/images/jamstack-hugo-blog/new-post.jpg)\n\n## Pushing our project to GitHub\n\nBefore we can deploy our site, we need to first push our site up to GitHub.\n\n_**If you do not have a [GitHub](https://github.com/) account, please sign up for a free account as you are going to need it throughout this course.**_\n\n_\\*\\*Your GitHub may not be dark like mine. I am using their dark theme, which is \\_not_ enabled by default.\\*\\*\\_\n\nCreate a new repository by clicking the `+` in the upper right-hand corner, next to the bell icon, then \"New repository.\"\n\n![GitHub create new repository](/images/jamstack-hugo-blog/new-repo.jpg)\n\nFill out the repository name and description field and choose whether to make the repo private or public. It doesn't matter which one you choose. Netlify will work with both public and private repos.\n\n![GitHub create repo screen](/images/jamstack-hugo-blog/github_create_repo.png)\n\nThen click the green button \"Create repository.\"\n\nYou should see a screen that looks similar to this:\n\n![GitHub empty repo screen](/images/jamstack-hugo-blog/github_empty_repo.png)\n\n_**This next section requires you to have [Git](https://git-scm.com/) installed. If you do not have Git installed, you can download it [here](https://git-scm.com/downloads)**_\n\nHead back over to your terminal inside your Hugo directory and run the following, in this order.\n\n```bash\ngit init # initializes a new git repository\ngit add . # adds all of the files to Git\ngit commit -m \"init commit\" # creates a new commit with the message \"init commit\"\n```\n\nThen you are going to need to copy the URL for your git repo in GitHub. You can find it in this section of your empty GitHub repo.\n\n![GitHub empty repo instructions](/images/jamstack-hugo-blog/github-instructions.jpg)\n\nPaste it into your terminal:\n\n```bash\ngit remote add origin git@github.com:robertguss/hugo-blog.git\n```\n\nThen do:\n\n```bash\ngit push -u origin master\n```\n\nRefresh GitHub, and you should see the following:\n\n![GitHub repo pushed](/images/jamstack-hugo-blog/github-repo-pushed.jpg)\n\nNow you are all set and ready to deploy with Netlify.\n\n## Deploying to Netlify\n\nNow that our site is all set up and running, let's learn how to deploy our static site to [Netlify](https://www.netlify.com/). Netlify is free and is one of the most popular hosting providers for the Jamstack. Head on over to their site, and sign up for an account; use your GitHub account to sign up.\n\nOnce you sign up, you should land on a dashboard that looks like the following:\n\n![Netlify Dashboard](/images/jamstack-hugo-blog/netlify-dashboard.jpg)\n\nClick on the \"New site from Git\" button.\n\nOn the next screen, click on the \"GitHub\" button.\n\n![Netlify Connect to Git Provider](/images/jamstack-hugo-blog/netlify-git-provider.jpg)\n\nYou will want to connect your GitHub account to Netlify and give them access to all of your repos.\n\nYou will then need to search for the repo we just created and select it. I named mine `Hugo-blog` so I can easily search for it in the search bar.\n\n![Netlify Pick a repository](/images/jamstack-hugo-blog/netlify-pick-a-repo.jpg)\n\nIt should automatically detect that this is a Hugo project and fill in the form fields for you. Just in case it doesn't, the build command is `Hugo`, and the publish directory is `public`\n\n![Netlify Deploy Settings](/images/jamstack-hugo-blog/netlify-deploy-settings.png)\n\nThen click the green button \"Deploy site.\"\n\nYou will then go back to the site dashboard, where the site will begin to deploy. It shouldn't take very long before you see a random URL at the top.\n\n![Netlify Site Deployed Dashboard](/images/jamstack-hugo-blog/netlify-deployed-site-dashboard.jpg)\n\nClick on the green URL; it should take you to our new Hugo site!\n\n![Broken Site](/images/jamstack-hugo-blog/netlify-site-broken.png)\n\nWait!?! Why is our site broken?\n\nIf we inspect our site using Chrome dev tools and open up the console, we can see we have some mixed content warnings and a reference to `http://example.org.` Where is this URL coming from?\n\n![Broken Site Dev Console](/images/jamstack-hugo-blog/broken-site-dev-console.jpg)\n\nIf you open up `config.toml` you will see the following on line 1:\n\n```toml\nbaseURL = \"http://example.org/\"\n```\n\nChange it to the following:\n\n```bash\nbaseURL = \"/\"\n```\n\nWe will need to add these changes to Git and push them up to GitHub.\n\n```bash\ngit add .\ngit commit -m \"fixed base URL in config.toml\"\ngit push\n```\n\nOnce our change is on GitHub, Netlify will automatically detect this change and redeploy our site. This CI/CD comes for free from Netlify without us having to set up and configure anything! We simply push to our master branch, and Netlify takes care of the rest.\n\nIf you refresh your Netlify URL, the site is now fixed.\n\n![Netlify Site Fixed](/images/jamstack-hugo-blog/netlify-site-fixed.jpg)\n\n## Integrating Netlify CMS\n\nNow that we have our blog setup and deployed live on Netlify, we will now integrate [Netlify CMS](https://www.netlifycms.org), which allows us to update our content more easily. You can find the docs for the installation & setup [here](https://www.netlifycms.org/docs/add-to-your-site/).\n\nFirst, we need to create an admin folder, which is where the CMS will live. We need to make this folder inside of `/static.` This folder does not currently exist, so create a new folder called `static` in the project's root and then within that another folder called `admin.`\n\nWithin the `/static/admin` folder create 2 new files: `index.html` & `config.yml`.\n\n![Netlify CMS Admin Folder](/images/jamstack-hugo-blog/netlify_cms_admin_folder.png)\n\nOpen up `static/admin/index.html` and add the following:\n\n```HTML\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Content Manager</title>\n  </head>\n  <body>\n    <!-- Include the script that builds the page and powers Netlify CMS -->\n    <script src=\"https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\"></script>\n  </body>\n</html>\n```\n\nThen within `static/admin/config.yml` add the following:\n\n```yaml\nbackend:\n  name: git-gateway\n```\n\nNext, we need to add a `collections:` property to our `config.yml`, which will let the CMS know about our posts' structure. The collections can be a little complicated at first, as there are many fields that the CMS provides. You can find out more details about them in the docs [here](https://www.netlifycms.org/docs/collection-types/).\n\nFor our blog, add the following to `config.yml`.\n\n```yaml\ncollections: # A list of collections the CMS should be able to edit\n  - name: \"post\" # Used in routes, ie.: /admin/collections/:slug/edit\n    label: \"Post\" # Used in the UI, ie.: \"New Post\"\n    folder: \"content/posts\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields each document in this collection have\n      - { label: \"Title\", name: \"title\", widget: \"string\" }\n      - { label: \"Publish Date\", name: \"date\", widget: \"datetime\" }\n      - { label: \"Description\", name: \"description\", widget: \"text\" }\n      - { label: \"Body\", name: \"body\", widget: \"markdown\" }\n      - { label: \"Tags\", name: \"tags\", widget: \"list\" }\n      - { label: \"Categories\", name: \"categories\", widget: \"list\" }\n```\n\nThe entire file should look like this:\n\n```yaml\nbackend:\n  name: git-gateway\n\ncollections: # A list of collections the CMS should be able to edit\n  - name: \"post\" # Used in routes, ie.: /admin/collections/:slug/edit\n    label: \"Post\" # Used in the UI, ie.: \"New Post\"\n    folder: \"content/posts\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields each document in this collection have\n      - { label: \"Title\", name: \"title\", widget: \"string\" }\n      - { label: \"Publish Date\", name: \"date\", widget: \"datetime\" }\n      - { label: \"Description\", name: \"description\", widget: \"text\" }\n      - { label: \"Body\", name: \"body\", widget: \"markdown\" }\n      - { label: \"Tags\", name: \"tags\", widget: \"list\" }\n      - { label: \"Categories\", name: \"categories\", widget: \"list\" }\n```\n\nFinally, we need to let Netlify CMS know where to put the images that we upload. We can do so by adding the following to our config.\n\n```yaml\nmedia_folder: \"static/images/uploads\" # Folder where user uploaded files should go\npublic_folder: \"/images/uploads\"\n```\n\nThe entire file should now look like this:\n\n```yaml\nbackend:\n  name: git-gateway\n\nmedia_folder: \"static/images/uploads\" # Folder where user uploaded files should go\npublic_folder: \"/images/uploads\"\n\ncollections: # A list of collections the CMS should be able to edit\n  - name: \"post\" # Used in routes, ie.: /admin/collections/:slug/edit\n    label: \"Post\" # Used in the UI, ie.: \"New Post\"\n    folder: \"content/posts\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    fields: # The fields each document in this collection have\n      - { label: \"Title\", name: \"title\", widget: \"string\" }\n      - { label: \"Publish Date\", name: \"date\", widget: \"datetime\" }\n      - { label: \"Description\", name: \"description\", widget: \"text\" }\n      - { label: \"Body\", name: \"body\", widget: \"markdown\" }\n      - { label: \"Tags\", name: \"tags\", widget: \"list\" }\n      - { label: \"Categories\", name: \"categories\", widget: \"list\" }\n```\n\nNow let's push up our changes to that our latest code is on Netlify.\n\n```bash\ngit add .\ngit commit -m \"installed Netlify CMS\"\ngit push\n```\n\nNext, let's setup Netlify Identity, Netlify's built-in authentication service, to log into our cms.\n\n![Netlify Identity](/images/jamstack-hugo-blog/netlify_identity.png)\n\nWithin your Netlify site's dashboard, click on `Site settings` at the top and then `Identity` on the left sidebar. Then click on the Green \"Enable Identity\" button.\n\n![Netlify Registration Preferences](/images/jamstack-hugo-blog/netlify_registration_preferences.png)\n\nYou can leave the \"Open\" radio button selected for now and click \"Save.\"\n\n![Netlify Registration Preferences Open](/images/jamstack-hugo-blog/netlify_registration_preferences_open.png)\n\nScroll down towards the bottom of the page and click on \"Enable Git Gateway\" under the \"Services\" heading.\n\n![Netlify Enable Git Gateway](/images/jamstack-hugo-blog/netlify_services_git_gateway.png)\n\n### Netlify Identity Widget\n\nNext, we need to install the Netlify Identity Widget, which will allow us to interact with Netlify Identity for authentication and logging into the CMS.\n\nAdd this script include to the `<head>` section of `/static/admin/index.html`:\n\n```html\n<script src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"></script>\n```\n\nThe entire file `/static/admin/index.html` should look like this:\n\n```HTML\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Content Manager</title>\n    <script src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"></script>\n  </head>\n  <body>\n    <!-- Include the script that builds the page and powers Netlify CMS -->\n    <script src=\"https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\"></script>\n  </body>\n</html>\n```\n\nWe need to install this to the `<head>` of our Hugo static site so that it is included on every page. Paste inside of the `<head>` of `/themes/ink/layouts/partials/header.html.`\n\nThat entire file should look like this now:\n\n```html\n<head>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  {{- $title := ( .Title ) -}} {{- $siteTitle := ( .Site.Title ) -}} {{- if\n  .IsHome -}}\n  <title>\n    {{ $siteTitle }} {{ if isset .Site.Params \"subtitle\" }}- {{\n    .Site.Params.Subtitle }}{{ end }}\n  </title>\n  {{- else -}}\n  <title>{{ $title }} - {{ $siteTitle }}</title>\n  {{- end -}} {{- if isset .Site.Params \"favicon\" -}}\n  <link rel=\"icon\" type=\"image/png\" href=\"{{\" .Site.Params.favicon }} />\n  {{- end -}}\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  {{ with .OutputFormats.Get \"rss\" -}} {{ printf `\n  <link rel=\"%s\" type=\"%s\" href=\"%s\" title=\"%s\" />\n  ` .Rel .MediaType.Type .Permalink $.Site.Title | safeHTML }} {{ end -}} {{-\n  template \"_internal/schema.html\" . -}} {{- template \"_internal/opengraph.html\"\n  . -}} {{- template \"_internal/twitter_cards.html\" . -}}\n  <link\n    href=\"https://fonts.googleapis.com/css?family=Playfair+Display:700\"\n    rel=\"stylesheet\"\n    type=\"text/css\"\n  />\n  <link\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    media=\"screen\"\n    href=\"{{ .Site.BaseURL }}css/normalize.css\"\n  />\n  <link\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    media=\"screen\"\n    href=\"{{ .Site.BaseURL }}css/main.css\"\n  />\n  {{- if isset .Site.Params \"customcss\" }}\n  <link\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    href=\"{{ .Site.BaseURL }}{{ .Site.Params.customCSS }}\"\n  />\n  {{ end }}\n\n  <link\n    id=\"dark-scheme\"\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    href=\"{{ .Site.BaseURL }}css/dark.css\"\n  />\n  {{- if isset .Site.Params \"customdarkcss\" }}\n  <link\n    id=\"dark-scheme\"\n    rel=\"stylesheet\"\n    type=\"text/css\"\n    href=\"{{ .Site.BaseURL }}{{ .Site.Params.customDarkCSS }}\"\n  />\n  {{- end }} {{ if and (isset .Site.Params \"social\") (isset .Site.Params\n  \"feathericonscdn\") (eq .Site.Params.featherIconsCDN true) -}}\n  <script src=\"https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js\"></script>\n  {{- else if or (isset .Site.Params \"social\") (eq .Site.Params.mode \"auto\") (eq\n  .Site.Params.mode \"dark\") -}}\n  <script src=\"{{ .Site.BaseURL }}js/feather.min.js\"></script>\n  {{ end }}\n  <script src=\"{{ .Site.BaseURL }}js/main.js\"></script>\n  {{- if isset .Site.Params \"customjs\" -}} {{- range .Site.Params.customJS }}\n  <script src=\"{{ $.Site.BaseURL }}{{ . }}\"></script>\n  {{- end }} {{- end }}\n  <script src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\"></script>\n</head>\n```\n\nOur final step is to include a simple JS snippet that Netlify provides us in their install docs. This snippet will handle the redirection to the CMS admin dashboard upon successfully logging in.\n\nAdd the following snippet to `/themes/ink/layouts/partials/footer.html.`\n\n```html\n<script>\n  if (window.netlifyIdentity) {\n    window.netlifyIdentity.on(\"init\", (user) => {\n      if (!user) {\n        window.netlifyIdentity.on(\"login\", () => {\n          document.location.href = \"/admin/\";\n        });\n      }\n    });\n  }\n</script>\n```\n\nThe entire file should now look like:\n\n```html\n<div class=\"footer wrapper\">\n  <nav class=\"nav\">\n    <div>\n      {{ dateFormat \"2006\" now }} {{ with .Site.Copyright }} {{ . | safeHTML }}\n      | {{ end }} <a href=\"https://github.com/knadh/hugo-ink\">Ink</a> theme on\n      <a href=\"https://gohugo.io\">Hugo</a>\n    </div>\n  </nav>\n</div>\n\n{{ template \"_internal/google_analytics_async.html\" . }} {{- with\n.Site.Params.Social -}}\n<script>\n  feather.replace();\n</script>\n{{- end -}}\n\n<script>\n  if (window.netlifyIdentity) {\n    window.netlifyIdentity.on(\"init\", (user) => {\n      if (!user) {\n        window.netlifyIdentity.on(\"login\", () => {\n          document.location.href = \"/admin/\";\n        });\n      }\n    });\n  }\n</script>\n```\n\nNow let's push up our changes:\n\n```bash\ngit add .\ngit commit -m \"added Netlify Identity\"\ngit push\n```\n\nNow navigate to your Netlify URL and add `/admin` at the end. For instance, mine is `https://reverent-liskov-4cbe35.netlify.app/admin`.\n\n![Netlify Identity Login](/images/jamstack-hugo-blog/netlify_identity_login.png)\n\nClick on the \"Login with Netlify Identity\" button.\n\nThen click on the \"Sign up\" tab, fill out the form and click the \"Sign up\" button.\n\n_\\*Make sure to use your actual email address as you will need to click a link to confirm your identity.\\*\\*_\n\n![Netlify Identity Signup](/images/jamstack-hugo-blog/netlify_identity_signup.png)\n\nOpen the email and confirm your email address. You should now be logged in and presented with the CMS admin dashboard.\n\n![Netlify CMS Dashboard](/images/jamstack-hugo-blog/netlify_cms_dashboard.png)\n\nYou can now edit and create new posts with Netlify CMS!\n\nOpen up one of the posts, edit some of the content, and click on the \"Publish\" button in the upper right-hand corner.\n\nThen click \"Publish Now.\"\n\n![Netlify CMS Publish Button](/images/jamstack-hugo-blog/netlify_cms_publish_btn.png)\n\nClicking this button will send a webhook to Netlify, which will begin to build and deploy the site automatically. Pretty slick 😎\n\n_**One thing to keep in mind is that when you publish your site via the CMS, Netlify is creating Git commits for you in the background. So if you make some changes to your site via the CMS, make sure you run `git pull` to pull down your repo's latest changes. Otherwise, your local copy and the version up on GitHub will be out of sync.**_\n\n## Integrating Zapier for automatic deploys\n\n_**I learned this neat trick from Flavio Copes. You can check his post [here](https://flaviocopes.com/netlify-auto-deploy/)**_\n\nThis next section includes using a service known as [Zapier](https://zapier.com/), an automation framework that we will utilize to deploy our site automatically. You may be wondering why we would need this or what is the use case. Let me explain.\n\nMore often than not, most people write blog articles in advance and then schedule a publish date sometime in the future. For instance, you may want to publish a new blog post every two weeks or once a month and will often have several articles ready to go so that you have a \"buffer\" of content before you have to write more. Virtually every blogging system and cms allow this when you have a traditional monolithic architecture like WordPress or similar. However, since this is a static site and we do not have a backend, how can we accomplish this? The key is to use Zapier and Hugo's publish date.\n\nHugo has this feature built-in already, where if you have a date set for one of your articles in the future, it will not build the page until that date. For example, if I set the date two weeks from today, Hugo will not make that page until then. We can trigger as many builds of our site as we want, and that article will not show up until two weeks from today.\n\nKnowing this, we can then use Zapier to send a webhook to Netlify at whatever interval we want, which will trigger a new build. So if you are publishing every two weeks, you can set up Zapier to send a webhook every two weeks. You could even have Zapier send a webhook every single day if your schedule is inconsistent. That way, you only have to worry about setting the correct date in the articles front-matter, and the deployment and publishing cycle is handled for you automatically!\n\nFor this tutorial, we will be setting up Zapier to send a webhook every day.\n\nBefore we can set up Zapier, we need first to configure Netlify to accept our Webhook from Zapier.\n\n### Netlify Webhook Setup\n\nHead back over to your Netlify dashboard and click on \"Site settings\" and then \"Build & deploy\" on the left sidebar. Scroll down until you see a \"Build hooks\" section.\n\n![Netlify Build Hooks](/images/jamstack-hugo-blog/netlify_build_hooks.png)\n\nClick the \"Add build hook\" button.\n\nGive your hook a name, and then save it.\n\n![Netlify Build Hook Name](/images/jamstack-hugo-blog/netlify_build_hook_name.png)\n\nNetlify will then give you a URL for the webhook, like so:\n\n![Netlify Build Hook Url](/images/jamstack-hugo-blog/netlify_build_hook_url.png)\n\nCopy this down or keep this tab open as we will need this Url for Zapier.\n\n### Zapier Webhook Setup\n\nHead on over to [Zapier](https://zapier.com/) and create a free account. After logging in, Go to this [link (https://zapier.com/apps/schedule/integrations/webhook/2845/send-webhook-post-requests-on-a-daily-schedule) to see how to configure a [webhook POST request](https://zapier.com/apps/schedule/integrations/webhook/2845/send-webhook-post-requests-on-a-daily-schedule).\n\n![Zapier Webhook Post](/images/jamstack-hugo-blog/zapier_webook_post.png)\n\nClick on the \"Try it\" button.\n\nOn the next screen, I set up mine to trigger on the weekends and at 7 am.\n\n![Zapier Webhook Post](/images/jamstack-hugo-blog/zapier_every_day.png)\n\nAfter clicking \"Save and Continue,\" click on the \"Test Trigger\" button.\n\n![Zapier Test Trigger](/images/jamstack-hugo-blog/zapier_test_trigger.png)\n\nThen click on the 2nd section and add in the URL from Netlify. I set my payload type to \"Raw.\"\n\n![Zapier Post Setup](/images/jamstack-hugo-blog/zapier_post_setup.png)\n\nYou can leave the rest of the fields as they are and then click \"Save and continue.\"\n\nYou will then see a \"Test action\" screen. Click the \"Test & Continue\" button.\n\n![Zapier Test Action](/images/jamstack-hugo-blog/zapier_test_action.png)\n\nIf all goes well, you should see the following.\n\n![Zapier Test Success](/images/jamstack-hugo-blog/zapier_test_success.png)\n\nThen click on the \"Turn on Zap\" button to enable it.\n\nHead back to your Netlify dashboard and see if the CI/CD was triggered. Click on \"Deploys\" at the top of the screen and check to see the latest deploy. It should say something like \"Deploy triggered by hook: Zapier at 7 am\"\n\n![Netlify Hook Success](/images/jamstack-hugo-blog/netlify_hook_success.png)\n\nZapier will send a webhook at 7 am every day, and Netlify will deploy a fresh copy of your site at the same time. All you have to do is enter the date in your article's front-matter on which you would like your article to be published live on your site, and the rest is handled for you automatically!\n\n## GitHub Repo\n\nYou can find the completed project here inside of `Hugo-Blog/final`\n[GitHub Repo](https://github.com/robertguss/howtocode-understanding-the-jamstack)\n\n## Wrap up\n\nIn this tutorial, we learned how to create a Jamstack site using the Hugo static site generator. We also integrated Netlify CMS to make it easy to update our content and deployed our site to Netlify. Finally, we set up Zapier to trigger automatic deploys on Netlify every day.\n\n## Understanding the Jamstack Book\n\nMy book Understanding the Jamstack is \"pay what you want.\" You can get it for free by entering `0` for the price at checkout.\n\n  <script src=\"https://gumroad.com/js/gumroad.js\"></script>\n\n<a class=\"gumroad-button\" href=\"https://gum.co/understanding-the-jamstack\" target=\"_blank\">Buy Understanding the Jamstack</a>\n"},{"slug":"looping-through-objects-in-javascript","category":"blog","title":"Looping through objects in Javascript","description":"Learn how to loop through objects in JavaScript in three different ways.","tags":["javascript"],"body":"\nHere is the object we will use for all of the examples:\n\n```js\nconst user = {\n  id: 1,\n  name: \"Leanne Graham\",\n  username: \"Bret\",\n  email: \"Sincere@april.biz\",\n  address: {\n    street: \"Kulas Light\",\n    suite: \"Apt. 556\",\n    city: \"Gwenborough\",\n    zipcode: \"92998-3874\",\n    geo: {\n      lat: \"-37.3159\",\n      lng: \"81.1496\",\n    },\n  },\n  phone: \"1-770-736-8031 x56442\",\n  website: \"hildegard.org\",\n  company: {\n    name: \"Romaguera-Crona\",\n    catchPhrase: \"Multi-layered client-server neural-net\",\n    bs: \"harness real-time e-markets\",\n  },\n};\n```\n\n## 1. `for in loop`\n\n```js\nfor (let key in user) {\n  console.log(key, user[key]);\n}\n\n/*\n  The result of the code above is:\n  id 1\n  name Leanne Graham\n  username Bret\n  email Sincere@april.biz\n  address {street: \"Kulas Light\", suite: \"Apt. 556\", city: \"Gwenborough\", zipcode: \"92998-3874\", geo: {…}}\n  phone 1-770-736-8031 x56442\n  website hildegard.org\n  company {name: \"Romaguera-Crona\", catchPhrase: \"Multi-layered client-server neural-net\", bs: \"harness real-time e-markets\"}\n*/\n```\n\n## 2. `Object.keys()`\n\n`Object.keys()` takes an object and returns an array of all of the `keys` of the object. This allows you to easily loop through the array and get all of the `keys` out.\n\n```js\nconsole.log(Object.keys(user));\n/*\n  The result of the code above is:\n  0: \"id\"\n  1: \"name\"\n  2: \"username\"\n  3: \"email\"\n  4: \"address\"\n  5: \"phone\"\n  6: \"website\"\n  7: \"company\"\n*/\n\nObject.keys(user).forEach((key) => {\n  console.log(`${key}: ${user[key]}`);\n});\n\n/*\n  The result of the code above is:\n  id: 1\n  name: Leanne Graham\n  username: Bret\n  email: Sincere@april.biz\n  address: [object Object]\n  phone: 1-770-736-8031 x56442\n  website: hildegard.org\n  company: [object Object]\n*/\n```\n\n## `Object.values()`\n\nTakes an object and returns an array of all of the `values` of the object. This allows you to easily loop through the array and get all of the `values` out.\n\n```js\nconsole.log(Object.values(user));\n/*\n  The result of the code above is:\n  0: 1\n  1: \"Leanne Graham\"\n  2: \"Bret\"\n  3: \"Sincere@april.biz\"\n  4: {street: \"Kulas Light\", suite: \"Apt. 556\", city: \"Gwenborough\", zipcode: \"92998-3874\", geo: {…}}\n  5: \"1-770-736-8031 x56442\"\n  6: \"hildegard.org\"\n  7: {name: \"Romaguera-Crona\", catchPhrase: \"Multi-layered client-server neural-net\", bs: \"harness real-time e-markets\"}\n*/\n\nObject.values(user).forEach((value) => {\n  console.log(`${value}`);\n});\n\n/*\n  The result of the code above is:\n  1\n  Leanne Graham\n  Bret\n  Sincere@april.biz\n  [object Object]\n  1-770-736-8031 x56442\n  hildegard.org\n  [object Object]\n*/\n```\n\n## `Object.entries()`\n\nTakes an object and returns an `array` of `arrays`. The inner `array` has two items in it, the first being the `key` the 2nd being the `value`\n\n```js\nconsole.log(Object.entries(user));\n/*\n  The result of the code above is:\n  0: (2) [\"id\", 1]\n  1: (2) [\"name\", \"Leanne Graham\"]\n  2: (2) [\"username\", \"Bret\"]\n  3: (2) [\"email\", \"Sincere@april.biz\"]\n  4: (2) [\"address\", {…}]\n  5: (2) [\"phone\", \"1-770-736-8031 x56442\"]\n  6: (2) [\"website\", \"hildegard.org\"]\n  7: (2) [\"company\", {…}]\n*/\n\nObject.entries(user).forEach(([key, value]) => {\n  console.log(`${key}: ${value}`);\n});\n\n/*\n  The result of the code above is:\n  id: 1\n  name: Leanne Graham\n  username: Bret\n  email: Sincere@april.biz\n  address: [object Object]\n  phone: 1-770-736-8031 x56442\n  website: hildegard.org\n  company: [object Object]\n*/\n```\n\n## Wrap up\n\nNext time you need to loop through an object in JavaScript give one of these methods a try.\n"},{"slug":"tailwind-css-travel-site-1-installing-tailwind-css","category":"blog","title":"Tailwind CSS Travel Site - 1. Installing Tailwind CSS","description":"In this tutorial, we are going to learn how to install & setup Tailwind CSS for our project","tags":["tailwind-css-travel-site"],"body":"\nIn this tutorial we are going to be building the home page for a fictitious travel site. Before we can begin, we first need to setup our project and install [Tailwind CSS](https://tailwindcss.com/).\n\nI have created a [simple starter kit](https://github.com/robertguss/simple-starter-kit) to get us going quickly.\n\nYou can also clone it via git:\n\n```bash\ngit clone https://github.com/robertguss/simple-starter-kit travel-site\n\ncd travel-site\n\nnpm install\n```\n\nWith all of our dependencies installed, we can now begin to setup our project with Tailwind. Per the [docs](https://tailwindcss.com/docs/installation/#1-install-tailwind-via-npm), we first need to install Tailwind.\n\n```bash\nnpm install tailwindcss\n```\n\nNext we need to add Tailwind to our `src/css/main.css` file:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nNext we need to setup PostCSS with Tailwind. Add the following inside of `postcss.config.js`\n\n```js\nmodule.exports = {\n  plugins: [require(\"tailwindcss\"), require(\"autoprefixer\")],\n};\n```\n\nTo test that everything is setup and working correctly, I am going to copy and paste a card component from their [docs](https://tailwindcss.com/components/cards) into `src/partials/intro.html`.\n\n```html\n<div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n  <img\n    class=\"w-full\"\n    src=\"https://source.unsplash.com/400x200/?nature\"\n    alt=\"Sunset in the mountains\"\n  />\n  <div class=\"px-6 py-4\">\n    <div class=\"font-bold text-xl mb-2\">The Coldest Sunset</div>\n    <p class=\"text-gray-700 text-base\">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n      quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n      nihil.\n    </p>\n  </div>\n  <div class=\"px-6 py-4\">\n    <span\n      class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\"\n      >#photography</span\n    >\n    <span\n      class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\"\n      >#travel</span\n    >\n    <span\n      class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700\"\n      >#winter</span\n    >\n  </div>\n</div>\n```\n\n_**I have modified the img src, otherwise parcel won't compile correctly as it cannot find the image referenced in their docs.**_\n\nStart up the dev server with:\n\n```bash\nnpm run dev\n```\n\nIn your terminal you should see something like:\n\n```bash\nServer running at http://localhost:1234\n```\n\nOpen your browser to [`http://localhost:1234`](http://localhost:1234) or whatever url Parcel outputs to your terminal.\n\nIf you have done everything correctly you should see something like this:\n![Tailwind CSS Card](/images/tailwind-travel-site/installation-tailwind-card.jpg)Tailwind CSS Card\n\n_**The url referenced in the card comes from [Unsplash](https://unsplash.com/) and it will generate a new image every time, so yours will most likely be different.**_\n\nThat's it! We are now all setup with Tailwind CSS and ready to start building our travel site home page 👍\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `1-installing-tailwind-css`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 1-installing-tailwind-css\n```\n"},{"slug":"tailwind-css-travel-site-2-navigation-and-hero","category":"blog","title":"Tailwind CSS Travel Site - 2. Navigation & Hero","description":"In this tutorial, we are going to build the navigation and hero section for our travel site with Tailwind CSS","tags":["tailwind-css-travel-site"],"body":"\nIn this lesson, we are going to be building the main navigation and hero section.\n\nThe final result will look like:\n\n![](/images/tailwind-travel-site/nav-and-hero-final-1.jpg)\n\nYou can pick up where we last left off, by cloning the previous tutorial's branch with git.\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 1-installing-tailwind-css\n```\n\nThe first thing we are going to do is create 2 new partials, one for the nav and the other for the hero. Create 2 new files in the `src/partials` directory `nav.html` & `hero.html`\n\nNow include both of those files inside of `src/index.html` like so:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Home | FunTravel</title>\n    <link rel=\"stylesheet\" href=\"./css/main.css\" />\n  </head>\n\n  <body>\n    <include src=\"./partials/nav.html\"></include>\n    <include src=\"./partials/hero.html\"></include>\n\n    <script src=\"./js/main.js\"></script>\n  </body>\n</html>\n```\n\nNow let's scaffold out some of the navigation boilerplate:\n\n```html\n<nav>\n  <ul>\n    <li>\n      <h1>FunTravel</h1>\n    </li>\n\n    <li>\n      <a>Destinations</a>\n      <a>Hotels</a>\n      <a>Things to Do</a>\n    </li>\n\n    <li>\n      <a>Login</a>\n      <a>Support</a>\n    </li>\n  </ul>\n</nav>\n```\n\nOur navigation is split into 3 sections, logo,  primary & secondary.\n\nWhen working with something like a navigation this early on in the process, I like to put borders around elements so I can see how large they actually are. Let's put a border around our nav and get it to the correct height and width.\n\n```html\n<nav class=\"border-2 border-red-500 w-full py-6\">\n  <ul>\n    <li>\n      <h1>FunTravel</h1>\n    </li>\n\n    <li>\n      <a>Destinations</a>\n      <a>Hotels</a>\n      <a>Things to Do</a>\n    </li>\n\n    <li>\n      <a>Login</a>\n      <a>Support</a>\n    </li>\n  </ul>\n</nav>\n```\n\nThe nav should like this now:\n![](/images/tailwind-travel-site/nav-red-border.jpg)\n\nLet's break down these Tailwind CSS classes:\n\n| Class          | Value                                        |\n| -------------- | -------------------------------------------- |\n| border-2       | border-width: 2px;                           |\n| border-red-500 | border-color: #f56565;                       |\n| w-full         | width: 100%;                                 |\n| py-6           | padding-top: 1.5rem; padding-bottom: 1.5rem; |\n\nThe css would look like this:\n\n```css\nnav {\n  border: 2px solid #f56565;\n  padding-bottom: 1.5rem;\n  padding-top: 1.5rem;\n  width: 100%;\n}\n```\n\nNext, we will style the ul\n\n```html\n<nav class=\"border-2 border-red-500 w-full py-6\">\n  <ul class=\"flex items-center justify-around max-w-6xl mx-auto\">\n    <li>\n      <h1>FunTravel</h1>\n    </li>\n\n    <li>\n      <a>Destinations</a>\n      <a>Hotels</a>\n      <a>Things to Do</a>\n    </li>\n\n    <li>\n      <a>Login</a>\n      <a>Support</a>\n    </li>\n  </ul>\n</nav>\n```\n\nThe nav should like this now: ![](/images/tailwind-travel-site/nav-ul-styled.jpg)\n\nTailwind CSS classes:\n\n| Class          | Value                                  |\n| -------------- | -------------------------------------- |\n| flex           | display: flex;                         |\n| items-center   | align-items: center;                   |\n| justify-around | justify-content: space-around;         |\n| max-w-6xl      | max-width: 72rem;                      |\n| mx-auto        | margin-right: auto; margin-left: auto; |\n\nFinally, we will add some space between the links in the nav.\n\n```html\n<nav class=\"border-2 border-red-500 w-full py-6\">\n  <ul class=\"flex items-center justify-around max-w-6xl mx-auto\">\n    <li>\n      <h1>FunTravel</h1>\n    </li>\n\n    <li>\n      <a href=\"\" class=\"px-6\">Destinations</a>\n      <a href=\"\" class=\"px-6\">Hotels</a>\n      <a href=\"\" class=\"px-6\">Things to Do</a>\n    </li>\n\n    <li>\n      <a href=\"\" class=\"px-6\">Login</a>\n      <a href=\"\" class=\"px-6\">Support</a>\n    </li>\n  </ul>\n</nav>\n```\n\nThe nav should like this now:\n\n![](/images/tailwind-travel-site/nav-link-padding.jpg)\n\nTailwind CSS classes:\n\n| Class | Value                                        |\n| ----- | -------------------------------------------- |\n| px-6  | padding-right: 1.5rem; padding-left: 1.5rem; |\n\n## Hero\n\nHere is our markup for our hero section:\n\n```html\n<section class=\"hero\">\n  <img src=\"./images/hero.jpg\" alt=\"houses on the water\" class=\"w-full\" />\n  <div\n    class=\"heading-container absolute flex justify-center items-center w-full\"\n  >\n    <h1 class=\"text-5xl text-white\">Your dream vacation starts here</h1>\n  </div>\n</section>\n```\n\nWe have already used several of these classes in our nav. We are, however, using\na couple new ones for our headline.\n\nTailwind CSS classes:\n\n| Class      | Value            |\n| ---------- | ---------------- |\n| text-5xl   | font-size: 3rem; |\n| text-white | color: #fff;     |\n\nWe need to write a\nlittle bit of css for the hero's height. Add the following inside of `src/css/main.css`\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.hero img {\n  height: 65vh;\n}\n\n.heading-container {\n  height: 65vh;\n  top: -50px;\n}\n```\n\nThe nav and hero should now look like:\n![](/images/tailwind-travel-site/nav-and-hero-rough.jpg)\n\nFor the final step, we need to position the hero behind the nav and change the nav links to\nwhite.\n\nUpdate the `nav.html` partial to the following:\n\n```html\n<nav class=\"absolute w-full py-6\">\n  <ul class=\"flex items-center justify-around max-w-6xl mx-auto\">\n    <li>\n      <h1 class=\"text-white\">FunTravel</h1>\n    </li>\n\n    <li>\n      <a href=\"\" class=\"text-white px-6\">Destinations</a>\n      <a href=\"\" class=\"text-white px-6\">Hotels</a>\n      <a href=\"\" class=\"text-white px-6\">Things to Do</a>\n    </li>\n\n    <li>\n      <a href=\"\" class=\"text-white px-6\">Login</a>\n      <a href=\"\" class=\"text-white px-6\">Support</a>\n    </li>\n  </ul>\n</nav>\n```\n\nThe nav and hero should now look like:\n![](/images/tailwind-travel-site/nav-and-hero-final.jpg)\n\nThat's it! Now that we have our nav and hero finished, we can move onto the next section. 😎\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `2-nav-and-hero`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\ngit checkout 2-nav-and-hero\n```\n"},{"slug":"tailwind-css-travel-site-3-quote-form","category":"blog","title":"Tailwind CSS Travel Site - 3. Quote Form","description":"In this tutorial, we are going to build the quote form for our travel site with Tailwind CSS","tags":["tailwind-css-travel-site"],"body":"\nIn this lesson, we are going to be building the quote form.\n\nThe final result will look like:\n\n![](/images/tailwind-travel-site/5-margin-right-2.jpg)\n\nYou can pick up where we last left off, by cloning the previous tutorial's branch with git.\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 2-nav-and-hero\n```\n\nFirst, let's create a new partial for the quote form. Create a new file called `quote-form.html` in `src/partials`. Then include this new file in `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Home | FunTravel</title>\n    <link rel=\"stylesheet\" href=\"./css/main.css\" />\n  </head>\n\n  <body>\n    <include src=\"./partials/nav.html\"></include>\n    <include src=\"./partials/hero.html\"></include>\n    <include src=\"./partials/quote-form.html\"></include>\n\n    <script src=\"./js/main.js\"></script>\n  </body>\n</html>\n```\n\nInside of our new partial we will add the following markup\n\n```html\n<section\n  class=\"quote-form flex items-center justify-center p-12 container mx-auto rounded-lg h-24 bg-gray-200\"\n></section>\n```\n\nTailwind CSS classes:\n\n| Class          | Value                                       |\n| -------------- | ------------------------------------------- |\n| flex           | display: flex;                              |\n| items-center   | align-items: center;                        |\n| justify-center | justify-content: center;                    |\n| p-12           | padding: 3rem;                              |\n| container      | https://tailwindcss.com/docs/container/#app |\n| mx-auto        | margin-right: auto; margin-left: auto;      |\n| rounded-lg     | border-radius: 0.5rem;                      |\n| h-24           | height: 6rem;                               |\n| bg-gray-200    | background-color: #edf2f7;                  |\n\nWe also need to add a small amount of custom css to bring the quote form up slightly. Add the following css to `main.css`\n\n```css\n.quote-form {\n  margin-top: -45px;\n  opacity: 0.99;\n  z-index: 10;\n}\n```\n\nThe quote form should look like this:\n\n![](/images/tailwind-travel-site/1-quote-form-section.jpg)\n\nNext, we will add our first input for our quote form. It will act as a place for the user to enter in the destination they would like to travel to.\n\nAdd the following markup in between the `<section>` we just created:\n\n```html\n<input\n  class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4\"\n  type=\"text\"\n  placeholder=\"Where are you going?\"\n/>\n```\n\nTailwind CSS classes:\n\n| Class         | Value                                                                        |\n| ------------- | ---------------------------------------------------------------------------- |\n| shadow        | box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); |\n| rounded       | border-radius: 0.25rem;                                                      |\n| py-2          | padding-top: 0.5rem; padding-bottom: 0.5rem;                                 |\n| px-3          | padding-right: 0.75rem; padding-left: 0.75rem;                               |\n| text-gray-700 | color: #4a5568;                                                              |\n| w-1/4         | width: 25%;                                                                  |\n\nThe quote form should look like this:\n\n![](/images/tailwind-travel-site/2-quote-form-destination-input.jpg)\n\nFor the sake of simplicity, we can duplicate this first input 2 more times for both of our date inputs. We just need to change the type from `type=\"text\"` to `type=\"date\"` like so:\n\n```html\n<input class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4\" type=\"date\" />\n<input class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4\" type=\"date\" />\n```\n\nSo our entire quote form markup should look like this:\n\n```html\n<section\n  class=\"quote-form flex items-center justify-center p-12 container mx-auto rounded-lg h-24 bg-gray-200\"\n>\n  <input\n    class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4\"\n    type=\"text\"\n    placeholder=\"Where are you going?\"\n  />\n  <input class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4\" type=\"date\" />\n  <input class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4\" type=\"date\" />\n</section>\n```\n\nAnd our quote form now looks like:\n\n![](/images/tailwind-travel-site/3-quote-form-date-fields.jpg)\n\nLet's add the final piece, the submit button.\n\n```html\n<button\n  class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-1/4\"\n>\n  Submit\n</button>\n```\n\nTailwind CSS classes:\n\n| Class             | Value                                        |\n| ----------------- | -------------------------------------------- |\n| bg-blue-500       | background-color: #a0aec0;                   |\n| hover:bg-blue-700 | hover:background-color: #4a5568;             |\n| text-white        | color: #fff;                                 |\n| font-bold         | font-weight: 700;                            |\n| py-2              | padding-top: 0.5rem; padding-bottom: 0.5rem; |\n| px-4              | padding-right: 1rem; padding-left: 1rem;     |\n| rounded           | border-radius: 0.25rem;                      |\n| w-1/4             | width: 25%;                                  |\n\n![](/images/tailwind-travel-site/4-submit-button.jpg)\n\nFinally, we will add some margin to the right of each element to provide some spacing between each form field by adding the class `mr-8` to each input element.\n\n```html\n<section\n  class=\"quote-form flex items-center justify-center p-12 container mx-auto rounded-lg h-24 bg-gray-200\"\n>\n  <input\n    class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4 mr-8\"\n    type=\"text\"\n    placeholder=\"Where are you going?\"\n  />\n  <input\n    class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4 mr-8\"\n    type=\"date\"\n  />\n  <input\n    class=\"shadow rounded py-2 px-3 text-gray-700 w-1/4 mr-8\"\n    type=\"date\"\n  />\n  <button\n    class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-1/4\"\n  >\n    Submit\n  </button>\n</section>\n```\n\n![](/images/tailwind-travel-site/5-margin-right-1.jpg)\n\nOur finished quote form 😎\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `3-quote-form`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 3-quote-form\n```\n"},{"slug":"tailwind-css-travel-site-4-popular-destinations","category":"blog","title":"Tailwind CSS Travel Site - 4. Popular Destinations","description":"In this tutorial, we are going to build the popular destinations section for our travel site with Tailwind CSS","tags":["tailwind-css-travel-site"],"body":"\nIn this lesson, we are going to be building the popular destinations section of our travel site.\n\nThe final result will look like:\n\n![](/images/tailwind-travel-site/7-six-cards-1.jpg)\n\nYou can pick up where we last left off, by cloning the previous tutorial's branch with git.\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 3-quote-form\n```\n\nFirst, let's create a new partial called `popular-destinations.html` in our `src/partials` folder and then include it in `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Home | FunTravel</title>\n    <link rel=\"stylesheet\" href=\"./css/main.css\" />\n  </head>\n\n  <body>\n    <include src=\"./partials/nav.html\"></include>\n    <include src=\"./partials/hero.html\"></include>\n    <include src=\"./partials/quote-form.html\"></include>\n    <include src=\"./partials/popular-destinations.html\"></include>\n\n    <script src=\"./js/main.js\"></script>\n  </body>\n</html>\n```\n\nWithin our new partial, we will create a new section and add our heading.\n\n```html\n<section class=\"container mx-auto mt-6\">\n  <h2 class=\"text-3xl mb-6\">Popular Destinations</h2>\n</section>\n```\n\nTailwind CSS classes:\n\n| Class     | Value                                       |\n| --------- | ------------------------------------------- |\n| container | https://tailwindcss.com/docs/container/#app |\n| mx-auto   | margin-right: auto; margin-left: auto;      |\n| mt-6      | margin-top: 1.5rem;                         |\n| text-3xl  | font-size: 1.875rem;                        |\n| mb-6      | margin: 1.5rem;                             |\n\nOur site should now look like this:\n\n![](/images/tailwind-travel-site/1-heading.jpg)\n\nNext, we will begin by adding our destination cards. First let's create a new folder in our `src` directory called `cards`. Then create a new file called `italy.html` within the `src/cards` directory. Then let's import it into our `popular-destinations.html` partial.\n\n```html\n<section class=\"container mx-auto mt-6\">\n  <h2 class=\"text-3xl mb-6\">Popular Destinations</h2>\n  <include src=\"./cards/italy.html\"></include>\n</section>\n```\n\nThe markup for our card.\n\n```html\n<!-- src/cards/itay.hml -->\n<div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n  <img class=\"w-full h-56\" src=\"https://source.unsplash.com/600x400/?italy\" />\n</div>\n```\n\nTailwind CSS classes:\n\n| Class           | Value                                                                                |\n| --------------- | ------------------------------------------------------------------------------------ |\n| max-w-sm        | max-width: 24rem;                                                                    |\n| rounded         | border-radius: 0.25rem;                                                              |\n| overflow-hidden | overflow: hidden;                                                                    |\n| shadow-lg       | box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); |\n| w-full          | width: 100%;                                                                         |\n| h-56            | height: 14rem;                                                                       |\n\nThe card should look like this:\n\n![](/images/tailwind-travel-site/2-card-image.jpg)\n\n_**If you notice in the markup for the image `src` I am using a link to [Unsplash](https://unsplash.com/) which will dynamically load a new photo upon refresh, so your photo will most likely be different.**_\n\nNow let's add in the cards content.\n\n```html\n<div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n  <img class=\"w-full h-56\" src=\"https://source.unsplash.com/600x400/?italy\" />\n  <div class=\"px-6 py-4\">\n    <div class=\"font-bold text-xl mb-2\">Italy</div>\n    <p class=\"text-gray-700 text-base\">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n      quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n      nihil.\n    </p>\n  </div>\n</div>\n```\n\nTailwind CSS classes:\n\n| Class         | Value                                        |\n| ------------- | -------------------------------------------- |\n| px-6          | padding-right: 1.5rem; padding-left: 1.5rem; |\n| py-4          | padding-top: 1rem; padding-bottom: 1rem;     |\n| font-bold     | font-weight: 700;                            |\n| text-xl       | font-size: 1.25rem;                          |\n| mb-2          | margin-bottom: 0.25rem;                      |\n| text-gray-700 | color: #4a5568;                              |\n| text-base     | font-size: 1rem;                             |\n\nOur card with our new content should look like this:\n\n![](/images/tailwind-travel-site/3-card-content.jpg)\n\nNow let's add our button and our card will be complete\n\n```html\n<div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n  <img class=\"w-full h-56\" src=\"https://source.unsplash.com/600x400/?italy\" />\n\n  <div class=\"px-6 py-4\">\n    <div class=\"font-bold text-xl mb-2\">Italy</div>\n    <p class=\"text-gray-700 text-base\">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n      quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n      nihil.\n    </p>\n  </div>\n\n  <div class=\"flex justify-end px-6 py-4\">\n    <button\n      class=\"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n    >\n      Get a Quote\n    </button>\n  </div>\n</div>\n```\n\nTailwind CSS classes:\n\n| Class                    | Value                                        |\n| ------------------------ | -------------------------------------------- |\n| flex                     | display: flex;                               |\n| justify-end              | justify-content: flex-end;                   |\n| px-6                     | padding-right: 1.5rem; padding-left: 1.5rem; |\n| py-4                     | padding-top: 1rem; padding-bottom: 1rem;     |\n| bg-transparent           | background-color: transparent;               |\n| hover:bg-blue-500        | hover:background-color: #4299e1;             |\n| text-blue-700            | color: #2b6cb0;                              |\n| font-semibold            | font-weight: 600;                            |\n| hover:text-white         | hover:color: #fff;                           |\n| py-2                     | padding-top: 0.5rem; padding-bottom: 0.5rem; |\n| px-4                     | padding-right: 1rem; padding-left: 1rem;     |\n| border border-blue-500   | border-color: #4299e1;                       |\n| hover:border-transparent | hover:border-color: transparent;             |\n| rounded                  | border-radius: 0.25rem;                      |\n\nOur finished card should now look like this:\n\n![](/images/tailwind-travel-site/4-completed-card.jpg)\n\nNow with our card complete, we simply need to duplicate our `italy.html` file and rename it to whatever destinations we like. I am going to create 2 new cards `brazil.html` and `iceland.html` and then include them inside of `popular-destinations.html` like so:\n\n```html\n<section class=\"container mx-auto mt-6\">\n  <h2 class=\"text-3xl mb-6\">Popular Destinations</h2>\n  <include src=\"./cards/italy.html\"></include>\n  <include src=\"./cards/brazil.html\"></include>\n  <include src=\"./cards/iceland.html\"></include>\n</section>\n```\n\nNow all we need to do is modify the title and the Unsplash image for each new card.\n\n```html\n<!-- brazil.html -->\n<div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n  <img class=\"w-full h-56\" src=\"https://source.unsplash.com/600x400/?brazil\" />\n\n  <div class=\"px-6 py-4\">\n    <div class=\"font-bold text-xl mb-2\">Brazil</div>\n    <p class=\"text-gray-700 text-base\">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n      quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n      nihil.\n    </p>\n  </div>\n\n  <div class=\"flex justify-end px-6 py-4\">\n    <button\n      class=\"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n    >\n      Get a Quote\n    </button>\n  </div>\n</div>\n```\n\n```html\n<!-- iceland.html -->\n<div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n  <img class=\"w-full h-56\" src=\"https://source.unsplash.com/600x400/?iceland\" />\n\n  <div class=\"px-6 py-4\">\n    <div class=\"font-bold text-xl mb-2\">Iceland</div>\n    <p class=\"text-gray-700 text-base\">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n      quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n      nihil.\n    </p>\n  </div>\n\n  <div class=\"flex justify-end px-6 py-4\">\n    <button\n      class=\"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n    >\n      Get a Quote\n    </button>\n  </div>\n</div>\n```\n\n![](/images/tailwind-travel-site/5-cards-column.jpg)\n\nNext we need to put our cards in a single row and a 3-column grid. We can do this very easily with Tailwind CSS flexbox classes.\n\nWe just need to add our new grid to `popular-destinations.html` like so:\n\n```html\n<section class=\"container mx-auto mt-6\">\n  <h2 class=\"text-3xl mb-6\">Popular Destinations</h2>\n\n  <div class=\"flex mb-4\">\n    <div class=\"w-1/3\">\n      <include src=\"./cards/italy.html\"></include>\n    </div>\n    <div class=\"w-1/3\">\n      <include src=\"./cards/brazil.html\"></include>\n    </div>\n    <div class=\"w-1/3\">\n      <include src=\"./cards/iceland.html\"></include>\n    </div>\n  </div>\n</section>\n```\n\nNow our popular destinations section should look like this:\n\n![](/images/tailwind-travel-site/6-cards-row.jpg)\n\nLet's make 3 more cards and create another row so we have a total of 6 popular destinations. Duplicate one of your cards, with a new name for each destination. I am going to create ` japan.html``fiji.html ` & `germany.html`\n\nNow all we need to do is duplicate our grid and include our new files.\n\n```html\n<section class=\"container mx-auto mt-6\">\n  <h2 class=\"text-3xl mb-6\">Popular Destinations</h2>\n\n  <div class=\"flex mb-4\">\n    <div class=\"w-1/3\">\n      <include src=\"./cards/italy.html\"></include>\n    </div>\n    <div class=\"w-1/3\">\n      <include src=\"./cards/brazil.html\"></include>\n    </div>\n    <div class=\"w-1/3\">\n      <include src=\"./cards/iceland.html\"></include>\n    </div>\n  </div>\n\n  <div class=\"flex mb-4\">\n    <div class=\"w-1/3\">\n      <include src=\"./cards/japan.html\"></include>\n    </div>\n    <div class=\"w-1/3\">\n      <include src=\"./cards/fiji.html\"></include>\n    </div>\n    <div class=\"w-1/3\">\n      <include src=\"./cards/germany.html\"></include>\n    </div>\n  </div>\n</section>\n```\n\n![](/images/tailwind-travel-site/7-six-cards.jpg)\n\nThat's it! Now our popular destinations sections is complete 😏\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `4-popular-destinations`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 4-popular-destinations\n```\n"},{"slug":"tailwind-css-travel-site-5-features-section","category":"blog","title":"Tailwind CSS Travel Site - 5. Features Section","description":"In this tutorial, we are going to build the features section for our travel site in Tailwind CSS","tags":["tailwind-css-travel-site"],"body":"\nIn this lesson, we are going to be building the popular destinations section of our travel site.\n\nThe final result will look like:\n\n![](/images/tailwind-travel-site/4-features-background-1.jpg)\n\nYou can pick up where we last left off, by cloning the previous tutorial's branch with git.\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 4-popular-destinations\n```\n\n**This branch also contains images and svg's that we will use in this section, so please make sure you grab those.**\n\nAt this point in our tutorial, you should be getting quite familiar with how the classes in Tailwind CSS work and what they mean. So for the rest of the tutorials, I will not be creating tables which list what each class means. If you come across a class you do not recognize, please use the search in their docs to look it up.\n\nFirst, let's create our new partial `features.html` and add it to our `src/partials` directory. Then include it in `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Home | FunTravel</title>\n    <link rel=\"stylesheet\" href=\"./css/main.css\" />\n  </head>\n\n  <body>\n    <include src=\"./partials/nav.html\"></include>\n    <include src=\"./partials/hero.html\"></include>\n    <include src=\"./partials/quote-form.html\"></include>\n    <include src=\"./partials/popular-destinations.html\"></include>\n    <include src=\"./partials/features.html\"></include>\n\n    <script src=\"./js/main.js\"></script>\n  </body>\n</html>\n```\n\nNext, we will add the illustration image and our headings inside of `features.html`\n\n```html\n<section class=\"better-to-buy relative mt-48\">\n  <div class=\"carry-on-illustration pt-32\">\n    <img class=\"w-64 mx-auto\" src=\"./images/carry-on-colour.svg\" alt=\"\" />\n  </div>\n  <h2 class=\"text-center text-4xl mt-8\">What makes FunTravel the best?</h2>\n  <p class=\"text-center text-lg text-gray-600 mt-8 w-1/2 mx-auto\">\n    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Blanditiis\n    voluptas quisquam eius quo temporibus qui adipisci maxime, tempora, dolor ex\n    officiis sapiente reprehenderit eaque unde recusandae rerum odio neque\n    alias.\n  </p>\n</section>\n```\n\nOur features section should now look like this:\n\n![](/images/tailwind-travel-site/1-illustration-headings-1.jpg)\n\n**Just a reminder that if you are wondering where you can find this *par*ticular image/svg of the woman walking with her suitcase, it is located in the GitHub repo listed above under branch `4-popular-destinations`**\n\n- These illustrations come from [Drawkit.io](http://drawkit.io/)\n\nNext, we will add the 3 features.\n\n```html\n<section class=\"better-to-buy relative mt-48\">\n  <div class=\"carry-on-illustration pt-32\">\n    <img class=\"w-64 mx-auto\" src=\"./images/carry-on-colour.svg\" alt=\"\" />\n  </div>\n\n  <h2 class=\"text-center text-4xl mt-8\">What makes FunTravel the best?</h2>\n\n  <p class=\"text-center text-lg text-gray-600 mt-8 w-1/2 mx-auto\">\n    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Blanditiis\n    voluptas quisquam eius quo temporibus qui adipisci maxime, tempora, dolor ex\n    officiis sapiente reprehenderit eaque unde recusandae rerum odio neque\n    alias.\n  </p>\n\n  <div class=\"flex mt-8 container mx-auto\">\n    <!-- Best Plans Guarantee -->\n    <div class=\"w-1/3 p-8\">\n      <h3 class=\"text-lg text-center my-4\">Best Plans Guarantee</h3>\n      <p class=\"text-center text-gray-600\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Est explicabo\n        quibusdam, iure libero debitis exercitationem quos aspernatur.!\n      </p>\n    </div>\n\n    <!-- Best Prices Guarantee -->\n    <div class=\"w-1/3 p-8\">\n      <h3 class=\"text-lg text-center my-4\">Best Prices Guarantee</h3>\n      <p class=\"text-center text-gray-600\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Est explicabo\n        quibusdam, iure libero debitis exercitationem quos aspernatur.!\n      </p>\n    </div>\n\n    <!-- Money Back Guarantee -->\n    <div class=\"w-1/3 p-8\">\n      <h3 class=\"text-lg text-center my-4\">Money Back Guarantee</h3>\n      <p class=\"text-center text-gray-600\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Est explicabo\n        quibusdam, iure libero debitis exercitationem quos aspernatur.!\n      </p>\n    </div>\n  </div>\n</section>\n```\n\nOur features sections now looks like:\n\n![](/images/tailwind-travel-site/2-features-without-icons.jpg)\n\nLet's add some nice icons above each feature to make this section look better.\n\nIcon 1:\n\n```html\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  class=\"w-24 mx-auto\"\n>\n  <path\n    style=\"fill: #A5B3BB;\"\n    d=\"M4 3h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2zm16 12V7a2 2 0 0 1-2-2H6a2 2 0 0 1-2 2v8a2 2 0 0 1 2 2h12c0-1.1.9-2 2-2zM8 7h8a1 1 0 0 1 0 2H8a1 1 0 1 1 0-2z\"\n  ></path>\n  <path\n    style=\"fill: #0D2B3E;\"\n    d=\"M11.65 18.23a4 4 0 1 1 4.7 0l2.5 3.44-2.23-.18-1.48 1.68-.59-4.2a4.04 4.04 0 0 1-1.1 0l-.6 4.2-1.47-1.68-2.23.18 2.5-3.44zM14 17a2 2 0 1 0 0-4 2 2 0 0 0 0 4z\"\n  ></path>\n</svg>\n```\n\nIcon 2:\n\n```html\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  class=\"w-24 mx-auto\"\n>\n  <path\n    style=\"fill: #A5B3BB;\"\n    d=\"M2 5c0 1.1.9 2 2 2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5zm16 11a2 2 0 1 0 0-4 2 2 0 0 0 0 4z\"\n  ></path>\n  <path\n    style=\"fill: #0D2B3E;\"\n    d=\"M4 3h11a2 2 0 0 1 2 2v2H4a2 2 0 1 1 0-4z\"\n  ></path>\n</svg>\n```\n\nIcon 3:\n\n```html\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  class=\"w-24 mx-auto\"\n>\n  <path\n    style=\"fill: #A5B3BB;\"\n    d=\"M13 4.8l2.92 6.8a1 1 0 0 1 .08.4v8a2 2 0 0 1-2 2H8a4.28 4.28 0 0 1-3.7-2.45L2.07 14.4A1 1 0 0 1 2 14v-2a3 3 0 0 1 3-3h4V5a3 3 0 0 1 3-3 1 1 0 0 1 1 1v1.8z\"\n  ></path>\n  <rect\n    width=\"4\"\n    height=\"11\"\n    x=\"18\"\n    y=\"11\"\n    style=\"fill: #0D2B3E;\"\n    rx=\"1\"\n  ></rect>\n</svg>\n```\n\nFinished markup with icons added:\n\n```html\n<section class=\"better-to-buy relative mt-48\">\n  <div class=\"carry-on-illustration pt-32\">\n    <img class=\"w-64 mx-auto\" src=\"./images/carry-on-colour.svg\" alt=\"\" />\n  </div>\n\n  <h2 class=\"text-center text-4xl mt-8\">What makes FunTravel the best?</h2>\n\n  <p class=\"text-center text-lg text-gray-600 mt-8 w-1/2 mx-auto\">\n    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Blanditiis\n    voluptas quisquam eius quo temporibus qui adipisci maxime, tempora, dolor ex\n    officiis sapiente reprehenderit eaque unde recusandae rerum odio neque\n    alias.\n  </p>\n\n  <div class=\"flex mt-8 container mx-auto\">\n    <!-- Best Plans Guarantee -->\n    <div class=\"w-1/3 p-8\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        class=\"w-24 mx-auto\"\n      >\n        <path\n          style=\"fill: #A5B3BB;\"\n          d=\"M4 3h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2zm16 12V7a2 2 0 0 1-2-2H6a2 2 0 0 1-2 2v8a2 2 0 0 1 2 2h12c0-1.1.9-2 2-2zM8 7h8a1 1 0 0 1 0 2H8a1 1 0 1 1 0-2z\"\n        ></path>\n        <path\n          style=\"fill: #0D2B3E;\"\n          d=\"M11.65 18.23a4 4 0 1 1 4.7 0l2.5 3.44-2.23-.18-1.48 1.68-.59-4.2a4.04 4.04 0 0 1-1.1 0l-.6 4.2-1.47-1.68-2.23.18 2.5-3.44zM14 17a2 2 0 1 0 0-4 2 2 0 0 0 0 4z\"\n        ></path>\n      </svg>\n      <h3 class=\"text-lg text-center my-4\">Best Plans Guarantee</h3>\n      <p class=\"text-center text-gray-600\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Est explicabo\n        quibusdam, iure libero debitis exercitationem quos aspernatur.!\n      </p>\n    </div>\n\n    <!-- Best Prices Guarantee -->\n    <div class=\"w-1/3 p-8\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        class=\"w-24 mx-auto\"\n      >\n        <path\n          style=\"fill: #A5B3BB;\"\n          d=\"M2 5c0 1.1.9 2 2 2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5zm16 11a2 2 0 1 0 0-4 2 2 0 0 0 0 4z\"\n        ></path>\n        <path\n          style=\"fill: #0D2B3E;\"\n          d=\"M4 3h11a2 2 0 0 1 2 2v2H4a2 2 0 1 1 0-4z\"\n        ></path>\n      </svg>\n      <h3 class=\"text-lg text-center my-4\">Best Prices Guarantee</h3>\n      <p class=\"text-center text-gray-600\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Est explicabo\n        quibusdam, iure libero debitis exercitationem quos aspernatur.!\n      </p>\n    </div>\n\n    <!-- Money Back Guarantee -->\n    <div class=\"w-1/3 p-8\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        class=\"w-24 mx-auto\"\n      >\n        <path\n          style=\"fill: #A5B3BB;\"\n          d=\"M13 4.8l2.92 6.8a1 1 0 0 1 .08.4v8a2 2 0 0 1-2 2H8a4.28 4.28 0 0 1-3.7-2.45L2.07 14.4A1 1 0 0 1 2 14v-2a3 3 0 0 1 3-3h4V5a3 3 0 0 1 3-3 1 1 0 0 1 1 1v1.8z\"\n        ></path>\n        <rect\n          width=\"4\"\n          height=\"11\"\n          x=\"18\"\n          y=\"11\"\n          style=\"fill: #0D2B3E;\"\n          rx=\"1\"\n        ></rect>\n      </svg>\n      <h3 class=\"text-lg text-center my-4\">Money Back Guarantee</h3>\n      <p class=\"text-center text-gray-600\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Est explicabo\n        quibusdam, iure libero debitis exercitationem quos aspernatur.!\n      </p>\n    </div>\n  </div>\n</section>\n```\n\nOur features section should now look like:\n\n![](/images/tailwind-travel-site/3-features-complete.jpg)\n\nWe can even get a little fancier with some custom CSS by adding a cool diagonal background color. Add the following css to `main.css`\n\n```css\n.better-to-buy:before {\n  content: \"\";\n  position: absolute;\n  z-index: -1;\n  width: 100%;\n  height: 115%;\n  top: 0;\n  -webkit-transform: skewY(-12deg);\n  transform: skewY(-12deg);\n  background: #f6f9fc;\n}\n```\n\nNow this features section has a little more style, design and \"pop.\"\n\n![](/images/tailwind-travel-site/4-features-background.jpg)\n\nThat's it! Now our features sections is complete 🔥\n\nOur travel site so far looks like:\n\n![](/images/tailwind-travel-site/5-full-screenshot.jpg)\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `1-installing-tailwind-css`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 5-features-section\n```\n"},{"slug":"tailwind-css-travel-site-6-callouts-section","category":"blog","title":"Tailwind CSS Travel Site - 6. Callouts Section","description":"In this tutorial, we are going to build the callouts section for our travel site in Tailwind CSS","tags":["tailwind-css-travel-site"],"body":"\nIn this lesson, we are going to be building the callouts section of our travel site.\n\nThe final result will look like:\n\n![](/images/tailwind-travel-site/5-four-callouts-1.jpg)\n\nYou can pick up where we last left off, by cloning the previous tutorial's branch with git.\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 5-features-section\n```\n\nFirst, let's create a new partial called `callouts.html` and include it in our `src/partials` directory and then include it in our `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Home | FunTravel</title>\n    <link rel=\"stylesheet\" href=\"./css/main.css\" />\n  </head>\n\n  <body>\n    <include src=\"./partials/nav.html\"></include>\n    <include src=\"./partials/hero.html\"></include>\n    <include src=\"./partials/quote-form.html\"></include>\n    <include src=\"./partials/popular-destinations.html\"></include>\n    <include src=\"./partials/features.html\"></include>\n    <include src=\"./partials/callouts.html\"></include>\n\n    <script src=\"./js/main.js\"></script>\n  </body>\n</html>\n```\n\nThen we will add our travel tickets illustration.\n\n```html\n<section class=\"plan-types relative container mx-auto mt-48 pb-24\">\n  <!-- Travel Tickets Illustration -->\n  <div class=\"travel-tickets-illustration pt-32\">\n    <img\n      class=\"travel-tickets w-1/3 absolute\"\n      src=\"./images/travel-tickets-colour.svg\"\n      alt=\"\"\n    />\n  </div>\n</section>\n```\n\nIt should look like this.\n\n![](/images/tailwind-travel-site/1-tickets.jpg)\n\nNext, let's add our first callout\n\n```html\n<section class=\"plan-types relative container mx-auto mt-48 pb-24\">\n  <!-- Travel Tickets Illustration -->\n  <div class=\"travel-tickets-illustration pt-32\">\n    <img\n      class=\"travel-tickets w-1/3 absolute\"\n      src=\"./images/travel-tickets-colour.svg\"\n      alt=\"\"\n    />\n  </div>\n\n  <!-- Callout 1 -->\n  <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n    <div\n      class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n      style=\"background-image: url(https://source.unsplash.com/600x400/?nature)\"\n    ></div>\n    <div\n      class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n    >\n      <div class=\"mb-8\">\n        <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 1</div>\n        <p class=\"text-gray-700 text-base\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n          quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n          nihil.\n        </p>\n      </div>\n    </div>\n  </div>\n</section>\n```\n\nNow if you look at our page, our tickets are overlapping our card.\n\n![](/images/tailwind-travel-site/2-tickets-covering-card.jpg)\n\nLet's add some custom css to position these tickets in a better spot. Add the following to main.css\n\n```css\n.travel-tickets {\n  right: 0;\n  top: -200px;\n  transform: rotate(-15deg);\n  z-index: -1;\n}\n```\n\n![](/images/tailwind-travel-site/3-tickets-moved.jpg)\n\nMuch better 😎\n\nNow we will add another callout before we put it inside of a 2 column grid\n\nHere is the markup before we add the grid\n\n```html\n<section class=\"plan-types relative container mx-auto mt-48 pb-24\">\n  <!-- Travel Tickets Illustration -->\n  <div class=\"travel-tickets-illustration pt-32\">\n    <img\n      class=\"travel-tickets w-1/3 absolute\"\n      src=\"./images/travel-tickets-colour.svg\"\n      alt=\"\"\n    />\n  </div>\n\n  <!-- Callout 1 -->\n  <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n    <div\n      class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n      style=\"background-image: url(https://source.unsplash.com/600x400/?nature)\"\n    ></div>\n    <div\n      class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n    >\n      <div class=\"mb-8\">\n        <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 1</div>\n        <p class=\"text-gray-700 text-base\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n          quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n          nihil.\n        </p>\n      </div>\n    </div>\n  </div>\n\n  <!-- Callout 2 -->\n  <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n    <div\n      class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n      style=\"background-image: url(https://source.unsplash.com/600x400/?business)\"\n    ></div>\n    <div\n      class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n    >\n      <div class=\"mb-8\">\n        <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 2</div>\n        <p class=\"text-gray-700 text-base\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n          quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n          nihil.\n        </p>\n      </div>\n    </div>\n  </div>\n</section>\n```\n\nHere is the markup with the 2 column grid\n\n```html\n<section class=\"plan-types relative container mx-auto mt-48 pb-24\">\n  <!-- Travel Tickets Illustration -->\n  <div class=\"travel-tickets-illustration pt-32\">\n    <img\n      class=\"travel-tickets w-1/3 absolute\"\n      src=\"./images/travel-tickets-colour.svg\"\n      alt=\"\"\n    />\n  </div>\n\n  <!-- Row #1 -->\n  <div class=\"flex mb-4\">\n    <div class=\"w-1/2 mr-8\">\n      <!-- Callout 1 -->\n      <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n        <div\n          class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n          style=\"background-image: url(https://source.unsplash.com/600x400/?nature)\"\n        ></div>\n        <div\n          class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n        >\n          <div class=\"mb-8\">\n            <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 1</div>\n            <p class=\"text-gray-700 text-base\">\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n              Voluptatibus quia, nulla! Maiores et perferendis eaque,\n              exercitationem praesentium nihil.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"w-1/2\">\n      <!-- Callout 2 -->\n      <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n        <div\n          class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n          style=\"background-image: url(https://source.unsplash.com/600x400/?business)\"\n        ></div>\n        <div\n          class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n        >\n          <div class=\"mb-8\">\n            <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 2</div>\n            <p class=\"text-gray-700 text-base\">\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n              Voluptatibus quia, nulla! Maiores et perferendis eaque,\n              exercitationem praesentium nihil.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n```\n\nHere is what our callouts now look like.\n\n![](/images/tailwind-travel-site/4-two-callouts-colum.jpg)\n\nNow all we have to do is duplicate our 2 callouts and the grid and change the images and titles.\n\n```html\n<section class=\"plan-types relative container mx-auto mt-48 pb-24\">\n  <!-- Travel Tickets Illustration -->\n  <div class=\"travel-tickets-illustration pt-32\">\n    <img\n      class=\"travel-tickets w-1/3 absolute\"\n      src=\"./images/travel-tickets-colour.svg\"\n      alt=\"\"\n    />\n  </div>\n\n  <!-- Row #1 -->\n  <div class=\"flex mb-4\">\n    <div class=\"w-1/2 mr-8\">\n      <!-- Callout 1 -->\n      <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n        <div\n          class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n          style=\"background-image: url(https://source.unsplash.com/600x400/?nature)\"\n        ></div>\n        <div\n          class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n        >\n          <div class=\"mb-8\">\n            <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 1</div>\n            <p class=\"text-gray-700 text-base\">\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n              Voluptatibus quia, nulla! Maiores et perferendis eaque,\n              exercitationem praesentium nihil.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"w-1/2\">\n      <!-- Callout 2 -->\n      <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n        <div\n          class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n          style=\"background-image: url(https://source.unsplash.com/600x400/?business)\"\n        ></div>\n        <div\n          class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n        >\n          <div class=\"mb-8\">\n            <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 2</div>\n            <p class=\"text-gray-700 text-base\">\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n              Voluptatibus quia, nulla! Maiores et perferendis eaque,\n              exercitationem praesentium nihil.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Row #2 -->\n  <div class=\"flex mb-4\">\n    <div class=\"w-1/2 mr-8\">\n      <!-- Callout 3 -->\n      <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n        <div\n          class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n          style=\"background-image: url(https://source.unsplash.com/600x400/?ocean)\"\n        ></div>\n        <div\n          class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n        >\n          <div class=\"mb-8\">\n            <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 3</div>\n            <p class=\"text-gray-700 text-base\">\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n              Voluptatibus quia, nulla! Maiores et perferendis eaque,\n              exercitationem praesentium nihil.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"w-1/2\">\n      <!-- Callout 4 -->\n      <div class=\"w-full mx-auto lg:max-w-full lg:flex shadow-2xl\">\n        <div\n          class=\"plan-image h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden bg-center\"\n          style=\"background-image: url(https://source.unsplash.com/600x400/?work)\"\n        ></div>\n        <div\n          class=\"bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\"\n        >\n          <div class=\"mb-8\">\n            <div class=\"text-gray-900 font-bold text-xl mb-2\">Callout 4</div>\n            <p class=\"text-gray-700 text-base\">\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n              Voluptatibus quia, nulla! Maiores et perferendis eaque,\n              exercitationem praesentium nihil.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n```\n\nOur final callouts section now looks like:\n\n![](/images/tailwind-travel-site/5-four-callouts.jpg)\n\nThat's it! Now our callouts sections is complete 🔥\n\nOur travel site so far looks like:\n\n![](/images/tailwind-travel-site/6-full-page.jpg)\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `1-installing-tailwind-css`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 6-callouts-section\n```\n"},{"slug":"tailwind-css-travel-site-7-testimonial-section","category":"blog","title":"Tailwind CSS Travel Site - 7. Testimonial Section","description":"In this tutorial, we are going to build the testimonial section for our travel site in Tailwind CSS","tags":["tailwind-css-travel-site"],"body":"\nIn this lesson, we are going to be building the testimonial section of our travel site.\n\nThe final result will look like:\n\n![](/images/tailwind-travel-site/3-testimonial-final-1.jpg)\n\nYou can pick up where we last left off, by cloning the previous tutorial's branch with git.\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 6-callouts-section\n```\n\nFirst, let's create a new `testimonial.html` partial in `src/partials`. Then let's include it in `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Home | FunTravel</title>\n    <link rel=\"stylesheet\" href=\"./css/main.css\" />\n  </head>\n\n  <body>\n    <include src=\"./partials/nav.html\"></include>\n    <include src=\"./partials/hero.html\"></include>\n    <include src=\"./partials/quote-form.html\"></include>\n    <include src=\"./partials/popular-destinations.html\"></include>\n    <include src=\"./partials/features.html\"></include>\n    <include src=\"./partials/callouts.html\"></include>\n    <include src=\"./partials/testimonial.html\"></include>\n\n    <script src=\"./js/main.js\"></script>\n  </body>\n</html>\n```\n\nNow let's add in our testimonial markup.\n\n```html\n<section class=\"container mx-auto\">\n  <div class=\"testimonial-container w-1/2 mx-auto relative pb-32\">\n    <p class=\"testimonial italic text-3xl\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla dolorem,\n      aspernatur odit sit aliquam, natus reprehenderit maxime voluptatibus nisi\n      assumenda, sequi velit delectus ducimus neque voluptatum a. Reiciendis,\n      obcaecati modi?\n    </p>\n\n    <!-- Citation -->\n    <div class=\"flex items-center mt-6\">\n      <img\n        class=\"w-10 h-10 rounded-full mr-4\"\n        src=\"./images/jonathan.jpg\"\n        alt=\"Avatar of Jonathan Reinink\"\n      />\n      <div class=\"\">\n        <p class=\"text-gray-900 leading-none\">Larry Silver</p>\n        <p class=\"text-gray-600 text-sm\">Aug 18</p>\n      </div>\n    </div>\n  </div>\n</section>\n```\n\nWhich looks like:\n\n![](/images/tailwind-travel-site/1-testimonial.jpg)\n\nTo make this look a little more \"designed\" we can add a quote svg icon like so:\n\n```html\n<section class=\"container mx-auto\">\n  <div class=\"testimonial-container w-1/2 mx-auto relative pb-32\">\n    <div class=\"quotes w-24 absolute\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        version=\"1.1\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 100 125\"\n        style=\"fill: #ccc;\"\n        xml:space=\"preserve\"\n      >\n        <path\n          class=\"st0\"\n          d=\"M75.6,40.5c11,0,19.9,9,19.9,20c0,11-9,20-20,20s-20-9-20-20c0-22.1,17.9-40,40-40  C95.5,20.5,82.4,25.4,75.6,40.5z M45.5,60.5c0,11-9,20-20,20s-20-9-20-20l0,0c0-22.1,17.9-40,40-40c0,0-13.1,4.9-19.9,20  C36.6,40.5,45.5,49.5,45.5,60.5z\"\n        />\n      </svg>\n    </div>\n\n    <p class=\"testimonial italic text-3xl\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla dolorem,\n      aspernatur odit sit aliquam, natus reprehenderit maxime voluptatibus nisi\n      assumenda, sequi velit delectus ducimus neque voluptatum a. Reiciendis,\n      obcaecati modi?\n    </p>\n\n    <!-- Citation -->\n    <div class=\"flex items-center mt-6\">\n      <img\n        class=\"w-10 h-10 rounded-full mr-4\"\n        src=\"./images/jonathan.jpg\"\n        alt=\"Avatar of Jonathan Reinink\"\n      />\n      <div class=\"\">\n        <p class=\"text-gray-900 leading-none\">Larry Silver</p>\n        <p class=\"text-gray-600 text-sm\">Aug 18</p>\n      </div>\n    </div>\n  </div>\n</section>\n```\n\nWhich now looks like:\n\n![](/images/tailwind-travel-site/2-quotes-1.jpg)\n\nLet's add some custom css to reposition the icon and change the color. Add the following css to `main.css`\n\n```css\n.quotes {\n  top: -50px;\n  left: -50px;\n  z-index: -1;\n}\n\n.testimonial {\n  z-index: 2;\n}\n```\n\nNow our testimonial looks like:\n\n![](/images/tailwind-travel-site/3-testimonial-final.jpg)\n\nThat's it! Now our testimonial section is complete 🔥\n\nOur travel site so far looks like:\n\n![](/images/tailwind-travel-site/4-full-page.jpg)\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `1-installing-tailwind-css`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 7-testimonial-section\n```\n"},{"slug":"tailwind-css-travel-site-8-footer-purgecss","category":"blog","title":"Tailwind CSS Travel Site - 8. Footer Section & PurgeCSS","description":"In this tutorial, we are going to build the footer section for our travel site in Tailwind CSS. We are also going to use PurgeCSS to reduce our production bundle size","tags":["tailwind-css-travel-site"],"body":"\nIn this lesson, we are going to be building the footer section of our travel site, and integrating PurgeCSS to reduce our bundle size\n\nThe final result will look like:\n\n![](/images/tailwind-travel-site/1-footer-1.jpg)\n\nYou can pick up where we last left off, by cloning the previous tutorial's branch with git.\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 7-testimonial-section\n```\n\nFor the footer, I am just going to modify a footer I found from [Sitepoint](https://www.sitepoint.com/tailwind-unique-beautiful-websites/).\n\nFirst, let's create a new `footer.html` partial in `src/partials` and include it in our `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Home | FunTravel</title>\n    <link rel=\"stylesheet\" href=\"./css/main.css\" />\n  </head>\n\n  <body>\n    <include src=\"./partials/nav.html\"></include>\n    <include src=\"./partials/hero.html\"></include>\n    <include src=\"./partials/quote-form.html\"></include>\n    <include src=\"./partials/popular-destinations.html\"></include>\n    <include src=\"./partials/features.html\"></include>\n    <include src=\"./partials/callouts.html\"></include>\n    <include src=\"./partials/testimonial.html\"></include>\n    <include src=\"./partials/footer.html\"></include>\n\n    <script src=\"./js/main.js\"></script>\n  </body>\n</html>\n```\n\nAdd the following markup to `footer.html`\n\n```html\n<div class=\"w-full bg-blue-900\">\n  <div class=\"flex flex-wrap text-center text-white\">\n    <!-- ABOUT COLUMN -->\n\n    <div class=\"w-full md:w-1/3 p-5 border-r border-blue-800 md:text-left\">\n      <div class=\"my-6 ml-3 text-xl font-semibold\">ABOUT US</div>\n      <p class=\"p-3 text-gray-400\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ac est\n        massa. Donec eget elementum sapien, tincidunt tempor nunc. Cras sodales\n        id ipsum at convallis.\n      </p>\n      <p class=\"p-3 text-gray-400\">\n        Morbi tristique massa nec massa auctor, at scelerisque felis\n        consectetur. Morbi tempus et odio sit amet feugiat. Maecenas dignissim a\n        turpis in molestie. Fusce tincidunt vestibulum iaculis.\n      </p>\n    </div>\n\n    <!-- CONTACTS COLUMN -->\n\n    <div class=\"w-full md:w-1/3 p-5 border-r border-blue-800\">\n      <div class=\"my-6 text-xl font-semibold\">CONTACT US</div>\n      <p class=\"mt-8 text-gray-400\">\n        A108 Adam Street <br />\n        New York, NY 535022 <br />\n        United States <br />\n        <strong>Phone:</strong> +1 5589 55488 55 <br />\n        <strong>Email:</strong> info@funtravel.com\n      </p>\n    </div>\n\n    <!-- FORM COLUMN -->\n\n    <div class=\"w-full md:w-1/3 p-5\">\n      <div class=\"mt-6 text-xl font-semibold\">SAY Hi!</div>\n      <form class=\"w-4/5 mx-auto mt-2 px-6 pt-6 pb-4 rounded\">\n        <div class=\"flex items-center mb-4\">\n          <input\n            class=\"w-full h-10 p-2 border-b border-blue-800 bg-blue-900 text-white\"\n            type=\"text\"\n            placeholder=\"Username\"\n          />\n        </div>\n        <div class=\"flex items-center mb-4\">\n          <input\n            class=\"w-full h-10 p-2 border-b border-blue-800 bg-blue-900 text-white\"\n            type=\"text\"\n            placeholder=\"Email\"\n          />\n        </div>\n        <div class=\"mb-6\">\n          <textarea\n            class=\"w-full h-24 px-2 pt-2 border-b-2 border-blue-800 bg-blue-900 text-white\"\n            placeholder=\"Message\"\n          ></textarea>\n        </div>\n        <div class=\"flex justify-between items-center\">\n          <button\n            class=\"w-full py-2 px-4 rounded bg-blue-500 hover:bg-blue-700 text-white font-bold\"\n            type=\"button\"\n          >\n            SEND\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n```\n\nOur footer looks like:\n\n![](/images/tailwind-travel-site/1-footer.jpg)\n\nOur complete travel site looks like:\n\n![](/images/tailwind-travel-site/2-full-page.jpg)\n\n## Purge CSS\n\nNow that we have completed our site, we need to get it ready for production. Let's run our `build` command for parcel and take a look at how big our bundle size is.\n\n```bash\nnpm run build\n```\n\nYou should see something similar to the following\n\n      Built in 8.45s.\n\n      dist/main.4a75d9d1.css                     853.15 KB    3.77s\n      dist/hero.ba103b23.jpg                      454.1 KB     80ms\n      dist/main.4a75d9d1.css.map                 324.13 KB     35ms\n      dist/jonathan.3233769a.jpg                  25.58 KB     79ms\n      dist/index.html                             13.76 KB    4.59s\n      dist/travel-tickets-colour.0885fda2.svg      8.21 KB     78ms\n      dist/carry-on-colour.1cebe4f7.svg            4.63 KB    914ms\n      dist/main.f84e1103.js                        1.11 KB     45ms\n      dist/main.f84e1103.js.map                       99 B     34ms\n\nNotice how large our `main.css` file is! It is over `853kb!!`. The reason is that the entire Tailwind CSS library is being included. However, we only want to include the classes we are actually using, which is where [Purge CSS](https://purgecss.com/) comes in.\n\nFirst we need to install PurgeCSS\n\n```bash\n  npm install @fullhuman/postcss-purgecss --save-dev\n```\n\nThen we need to add it to our `postcss.config.js` file\n\n```js\nconst purgecss = require(\"@fullhuman/postcss-purgecss\")({\n  // Specify the paths to all of the template files in your project\n  content: [\"./src/**/*.html\"],\n\n  // Include any special characters you're using in this regular expression\n  defaultExtractor: (content) => content.match(/[\\w-/:]+(?<!:)/g) || [],\n});\n\nmodule.exports = {\n  plugins: [\n    require(\"tailwindcss\"),\n    require(\"autoprefixer\"),\n    ...(process.env.NODE_ENV === \"production\" ? [purgecss] : []),\n  ],\n};\n```\n\nWe are only enabling PurgeCSS in production mode. So PurgeCSS will not run when we are using the dev server, only when we do a production build.\n\nWe then need to make a slight modification to our `main.css` file:\n\n```css\n/* purgecss start ignore */\n@tailwind base;\n@tailwind components;\n/* purgecss end ignore */\n@tailwind utilities;\n\n.better-to-buy:before {\n  content: \"\";\n  position: absolute;\n  z-index: -1;\n  width: 100%;\n  height: 115%;\n  top: 0;\n  -webkit-transform: skewY(-12deg);\n  transform: skewY(-12deg);\n  background: #f6f9fc;\n}\n\n.heading-container {\n  height: 65vh;\n  top: -50px;\n}\n\n.hero img {\n  height: 65vh;\n}\n\n.quote-form {\n  margin-top: -45px;\n  opacity: 0.99;\n  z-index: 10;\n}\n\n.quotes {\n  top: -50px;\n  left: -50px;\n  z-index: -1;\n}\n\n.testimonial {\n  z-index: 2;\n}\n\n.travel-tickets {\n  right: 0;\n  top: -200px;\n  transform: rotate(-15deg);\n  z-index: -1;\n}\n```\n\n**This is all of the custom CSS we needed in order to build our travel site!**\n\nLet's run our build command again and see the results:\n\n      npm run build\n\n      Built in 2.83s.\n\n      dist/hero.ba103b23.jpg                     454.1 KB     51ms\n      dist/jonathan.3233769a.jpg                 25.58 KB     48ms\n      dist/index.html                            13.76 KB    1.50s\n      dist/main.b9e98fe1.css                      8.45 KB    1.28s\n      dist/travel-tickets-colour.0885fda2.svg     8.21 KB     47ms\n      dist/main.b9e98fe1.css.map                  5.07 KB      5ms\n      dist/carry-on-colour.1cebe4f7.svg           4.63 KB     49ms\n      dist/main.f84e1103.js                       1.11 KB     47ms\n      dist/main.f84e1103.js.map                      99 B      2ms\n\nOur `main.css` file is now only `8.45KB!!` 🔥\n\nSo that wraps up this tutorial. I hope you enjoyed it and learned how powerful and fun it is to build sites with Tailwind CSS.\n\nYou can download a copy of the completed tutorial from the repo [here](https://github.com/robertguss/simple-starter-kit). Each section of the tutorial is within its own branch. The branch for this article is `1-installing-tailwind-css`\n\nOr you can do it via git with:\n\n```bash\ngit clone git@github.com:robertguss/howtocode.io-tailwind-css-landing-page.git\n\ngit checkout 8-footer-purge-css\n```\n"},{"slug":"understanding-closures-in-javascript","category":"blog","title":"Understanding Scope and Closures in Javascript","description":"Learn and understand how scope and closures work in JavaScript.","tags":["javascript"],"body":"\nClosures are one of the more 'advanced' topics in JavaScript, and there is much confusion around them. I think a large part of the confusion comes from trying to explain what they are with too many technical details.\n\nIn this article, I am going to do my best to explain what closures are and how they work. Understanding them is essential for all JS developers. Not only do you need to understand them for your daily work, but you will almost certainly be asked to define them at virtually every job interview you have.\n\nFrom the MDN docs:\n\n> A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.\n\nSee what I mean about definitions being a bit too technical. Let's break this down a bit and see what this means with some examples, but before we do, let's first talk about `scope`.\n\n## Scope\n\nThe way I like to think about `scope` is to ask myself a simple question, \"Who has access to this?\" Whenever I come across a variable, and I need to understand the scope in which is exits, I simply ask myself the question, \"Who has access to this?\" This simple question is how I best understand scope.\n\n> You can think of scope like a gate. Scope restricts the access to something. A gate intendeds to keep whatever is inside of it, from getting out, and whatever is outside of it, from getting in.\n\nLet see an example:\n\n```js\nvar foo = \"Hello World!\";\n\n/*\n  ... More code below ...\n*/\n```\n\nIn this trivial example, the variable `foo` is declared in what is known as the `global scope`. This means that any of the code below the variable `foo` would have access to it.\n\nFor example:\n\n```js\nvar foo = \"Hello World!\";\n\nfunction greeting() {\n  console.log(foo);\n}\n\ngreeting();\n\n/*\n  The result of the code above is: Hello World!\n*/\n```\n\nSince foo is declared inside of the `global scope` everything has access to it.\n\nHow about this:\n\n```js\nfunction greeting() {\n  var foo = \"Hello World!\";\n}\n\ngreeting();\n\nconsole.log(foo);\n\n/*\n  The result of the code above is: Uncaught ReferenceError: foo is not defined\n*/\n```\n\nThe variable `foo` is scoped, or technically `lexically scoped` within the `greeting()` function. Only code inside of the `greeting()` function has access to the variable `foo`.\n\n---\n\n> Aside: Hoisting\n\nIf we take that same example and now do this:\n\n```js\nfunction greeting() {\n  foo = \"Hello World!\";\n}\n\ngreeting();\n\nconsole.log(foo);\n\n/*\n  The result of the code above is: Hello World!\n*/\n```\n\nThis is because of hoisting. To better understand hoisting, check out my article on [Understanding Hoisting in JavaScript](/understanding-hoisting-in-javascript/)\n\n---\n\n## Closure\n\nNow that we have a better understanding of `scope` let's look at an example of a closure.\n\n```js\nfunction speak() {\n  var message = \"Hello World!\";\n\n  function say() {\n    console.log(message);\n  }\n\n  say();\n}\n\nspeak();\n\n/*\n  The result of the code above is: Hello World!\n*/\n```\n\nLet's break this down a bit to understand better what is going on here.\n\nWe first declare a function called `speak()`. Inside of the `speak()` function, also known as the 'body' of the function, we create a `local variable` called `message`. We also create an inner function called `say()`. Since the `say()` function is within the body of the `speak()` function, it has access to the variables declared within it. The `say()` function is a closure, as it has access to the `message` variable since this variable is inside of the `speak()` function.\n\nAnother way to look at this, is to think of the brackets, `{}`, of the `speak()` function as acting like a gate. Those brackets **WILL** allow whatever is **inside of them** access to its contents, but it will **NOT** allow access to anything **outside** of them.\n\nHere is a more technical definition from the MDN docs:\n\n> This is an example of lexical scoping, which describes how a parser resolves variable names when functions are nested. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. **Nested functions have access to variables declared in their outer scope**.\n\nSo if we were to come across a piece of code like this, we would simply need to ask ourselvs the question, \"Who has access to the `message` variable?\" Understanding `scope` and `closures` is how we answer that question.\n\nLet's take a look at another example:\n\n```js\nfunction speak() {\n  var message = \"Hello World!\";\n\n  function say() {\n    console.log(message);\n  }\n\n  return say;\n}\n\nvar greeting = speak();\ngreeting();\n\n/*\n  The result of the code above is: Hello World!\n*/\n```\n\nNotice how in this example we are not executing or `invoking` the `say()` function within the body of the `speak()` function, like the previous example. Instead, we are returning the function `say()`. The reason this works is because of `closure`.\n\nFrom the MDN Docs:\n\n> The reason is that functions in JavaScript form closures. A closure is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time the closure was created.\n\n## Wrap Up\n\nI hope this helps clarify some of the confusion around closures. There is plenty more than can be said on the topic, but I wanted to try and explain this concept as simply and clearly as I could. If you are hungry for more, I have some recommended resources below for further learning.\n\n## Additional Resources\n\n- [MDN - Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)\n- [Fun Fun Function - Closures](https://youtu.be/CQqwU2Ixu-U)\n- [Master the JavaScript Interview: What is a Closure?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36)\n- [What you need to know as a JavaScript Developer](https://www.toptal.com/javascript#hiring-guide)\n"},{"slug":"understanding-hoisting-in-javascript","category":"blog","title":"Understanding Hoisting in Javascript","description":"In this article, I discuss the concept of hoisting in JavaScript.","tags":["javascript"],"body":"\nHoisting in one of the more 'advanced' topics in JavaScript, but every JS developer needs to understand it. It is one of the odd 'quirks' or 'weird parts' of the language. This concept can get quite technical because it has to do with how the JS engine compiles and executes JS code. Before digging into the details, let's look at some simple examples.\n\n```js\nfunction greeting(name) {\n  console.log(\"Hello \" + name);\n}\n\ngreeting(\"John\");\n\n/*\n  The result of the code above is: \"Hello John\"\n*/\n```\n\nWe would expect that after running this code, we would see the string 'Hello John' printed to the console. What would happen if we switch the function invocation and the function declaration order?\n\n```js\ngreeting(\"John\");\n\nfunction greeting(name) {\n  console.log(\"Hello \" + name);\n}\n\n/*\n  The result of the code above is: \"Hello John\"\n*/\n```\n\nSurprisingly we get the same result! How does the greeting function still execute even though it is not declared until after we invoke it? The answer... hoisting!\n\n---\n\n> Aside: Defining terms\n\nBefore we get into the technical details of hoisting, I want to make sure I clarify some terminology I used above. A `function declaration` is when you write and create a function, like so:\n\n```js\n// Function declaration\nfunction greeting(name) {\n  console.log(\"Hello \" + name);\n}\n```\n\nA `function invocation` is when you 'invoke' or execute the function. Like so:\n\n```js\n// Function invocation or 'invoking the function'\ngreeting(\"John\");\n```\n\n---\n\n## How hoisting works (the technical parts)\n\nHere is a definition from the [MDN docs on hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting).\n\n**Conceptually, for example, a strict definition of hoisting suggests that variable and function declarations are physically moved to the top of your code, but this is not in fact what happens. Instead, the variable and function declarations are put into memory during the compile phase, but stay exactly where you typed them in your code.**\n\nFirst, did you notice that in their definition, they mention both `variables` and `function` declarations. Later on we will look at how variable hoisting works as well, but for now, let's simply focus on `function declarations`.\n\nA common misconception about hoisting is that many people think that the JS engine, actually moves up or 'hoists' your `function declaration` to the top of the page. It is easy to understand why, as that is what it appears to be doing.\n\nLet's look at that example again:\n\n```js\ngreeting(\"John\");\n\nfunction greeting(name) {\n  console.log(\"Hello \" + name);\n}\n\n/*\n  The result of the code above is: \"Hello John\"\n*/\n```\n\nIt is as if the JS engine, is doing this:\n\n```js\nfunction greeting(name) {\n  console.log(\"Hello \" + name);\n}\n\ngreeting(\"John\");\n\n/*\n  The result of the code above is: \"Hello John\"\n*/\n```\n\nHowever, that is not what is happening. To understand what is going on, we need to understand `execution contexts`.\n\n## Execution Context - Creation Phase (Phase 1)\n\nThe JS engine creates something that is called the `execution context`, and is created in two phases. The first phases is called the `creation` phase.\n\nDuring this phase of the `execution context`, the JS engine setups up space in memory for `variables` and `functions`. What this means is that before your code begins to be executed line by line, the JS engine has already\ncreated space in memory for your `variables` and `functions`. Therefore, since the JS engine has these `variables` and `functions` already in memory, your code has access to them! This is how 'hoisting' works under the hood.\n\nThis is also why it appears like the JS engine has moved your code to the top. It hasn't moved anything, the engine already knows about your `variables` and `functions`, and when your code is executed it finds them already existing in memory.\n\n## Execution Context - Execution Phase (Phase 2)\n\nDuring this phase, the JS engine executes your code from top to bottom, line by line. Let's take a look at a variable example to help solidify the difference between these two phases.\n\n```js\nconsole.log(foo);\n\nvar foo = \"Hello World!\";\n\n/*\n  The result of the code above is: undefined\n*/\n```\n\nThis might not seem all that surprising, but take a look at this example:\n\n```js\nconsole.log(foo);\n\n/*\n  The result of the code above is: Uncaught ReferenceError: foo is not defined\n*/\n```\n\nSo what exactly is going on here? In the first example, when the JS engine is in the `creation phase` of the `execution context` it will automatically assign a value of `undefined` to our variable `foo`. This is why when we try to `console.log(foo)` even though `foo` has not been `assigned` it prints `undefined` to the console. You can think of `undefined` as being a placeholder, until later on when it expects to see `foo` actually assigned to some `value`.\n\nIn the second example, the reason why we are getting a reference error, is because at first, `foo` has a value of `undefined`, however, since `foo` is never `assigned` a value later on we get `Uncaught ReferenceError: foo is not defined`.\n\nSo as we can see by these two examples, the JS engine has already created space in memory for our `variable`. It does the same for our `function declarations`.\n\n_**It is always best to not rely upon hoisting and to write your code in such a way as to not utilize it. It will make your code easier to read, reason about, and debug.**_\n\n## Preventing function hoisting\n\nThere are a couple of ways to prevent hoisting of our functions. The first, the most obvious, is to declare our functions before executing them.\n\nLike so:\n\n```js\nfunction greeting(name) {\n  console.log(\"Hello \" + name);\n}\n\ngreeting(\"John\");\n\n/*\n  The result of the code above is: \"Hello John\"\n*/\n```\n\n## Function Expression\n\nThe other method is to use what is known as a `function expression`. A `function expression` is when you both `declare` & `assign` a function at the same time. Like so:\n\n```js\nvar greeting = function (name) {\n  console.log(\"Hello \" + name);\n};\n```\n\n_**An easy way to remember the difference between a `function declaration` & a `function expression` is that `function expressions` have an `=` to the left of them. `Function declarations` do not have an `=` sign, only `function expressions` do.**_\n\nLet's see if this will prevent hoisting:\n\n```js\ngreeting(\"John\");\n\nvar greeting = function (name) {\n  console.log(\"Hello \" + name);\n};\n\n/*\n  The result of the code above is: Uncaught TypeError: greeting is not a function\n*/\n```\n\nIt does! Since we are both `declaring` & `assigning` this function at the same time, the JS engine does not 'hoist' it.\n\n## Variable Hoisting\n\nLet's now look at another example using both a `function` and `variables`.\n\n```js\nfunction hoisting() {\n  a = \"foo\";\n  var b = \"bar\";\n}\n\nhoisting();\nconsole.log(a);\nconsole.log(b);\n\n/*\n  The result of the code above is:\n  foo\n  Uncaught ReferenceError: b is not defined\n*/\n```\n\nThis is because the variable `a` is undeclared, and therefor the JS engine creates it as a `global variable`. All undeclared variables are `global variables`.\n\nVariable `b` however is `not defined` because `b` is declared, and also, it's scope is limited to within the body of the `hoisting()` function.\n\n`b` is therefore not accessible outside of the function.\n\n## The `Let` Keyword\n\nIn an earlier example, we saw the following:\n\n```js\nconsole.log(foo);\n\nvar foo = \"Hello World!\";\n\n/*\n  The result of the code above is: undefined\n*/\n```\n\nIf we instead use the `let` keyword, look at what happens:\n\n```js\nconsole.log(foo);\n\nlet foo = \"Hello World!\";\n\n/*\n  The result of the code above is: \n  Uncaught ReferenceError: Cannot access 'foo' before initialization\n*/\n```\n\nThis newer keyword in JS will prevent us from getting back `undefined` and will throw a reference error. This is why you should probably be using the `let` keyword or the `const` keyword instead of `var` going forward.\n\n## Wrap Up\n\nI hope this helps clarify the issues & confusion around hoisting. Knowing this will help you to write better code that is easier to read, reason about & debug.\n"},{"slug":"understanding-map-filter-and-reduce-in-javascript","category":"blog","title":"Understanding Map, Filter & Reduce in Javascript","description":"Map, Filter & Reduce are three of the most important array methods you need to learn and master as a JavaScript developer.","tags":["javascript"],"body":"\n[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [Filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) & [Reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) are three of the most important array methods you need to learn and master as a JavaScript developer. Knowing all three of them is like having a Swiss Army knife for dealing with data in arrays.\n\n## Map\n\nFrom the MDN Docs:\n\n> The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.\n\n```js\nconst array = [1, 2, 3, 4, 5];\n\nconst map = array.map((x) => x * 2);\n\nconsole.log(map);\n\n/*\n  The result of the code above is: [2, 4, 6, 8, 10]\n*/\n```\n\nTypically, the `map()` method is used when you want to iterate over each element in the array and perform some type of transformation on it, like we did above where we multiplied each number in the array by 2.\n\nYou can also use `map()` to get data out of an array, similar to how you might use a `for` loop. In the below example, I have an `array` of user `objects`. If I want only to get the names of each user, I would do this:\n\n```js\nconst users = [\n  { id: 1, name: \"John Doe\" },\n  { id: 2, name: \"Jane\" },\n  { id: 3, name: \"Robert\" },\n  { id: 4, name: \"Jill\" },\n];\n\nconst userNames = users.map((user) => user.name);\n\nconsole.log(userNames);\n\n/*\n  The result of the code above is: [\"John Doe\", \"Jane\", \"Robert\", \"Jill\"]\n*/\n```\n\n## Filter\n\nFrom the MDN Docs:\n\n> The filter() method creates a new array with all elements that pass the test implemented by the provided function.\n\nThe filter method does what its name implies. It filters out items from an array, based upon some criteria you provide. Let's use an earlier example and see how this works by only returning numbers that are greater than 3. So we only want `4` & `5` in this case:\n\n```js\nconst array = [1, 2, 3, 4, 5];\n\nconst filter = array.filter((number) => number > 3);\n\nconsole.log(filter);\n\n/*\n  The result of the code above is: [4, 5]\n*/\n```\n\n> The filter method will always return a new array with less items than the original array had, since you are `filtering` out certain elements from the original array.\n\n## Reduce\n\nFrom the MDN Docs:\n\n> The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.\n\nThe `reduce()` method interates over each element in an array and 'reduces' all of the values to a single value. Let's take an earlier example and add up all of the numbers in a given array, like so:\n\n```js\nconst array = [1, 2, 3, 4, 5];\n\nconst reduce = array.reduce((accumulator, number) => accumulator + number);\n\nconsole.log(reduce);\n\n/*\n  The result of the code above is: 15\n*/\n```\n\n## Wrap Up\n\nI hope you now have a better understanding of these 3 array methods and can see just how useful they are. I know the examples are somewhat trivial, but if you start using these methods in your day to day work, your JS code will improve immensely. There is a lot more that can be said on each of these, which is why I have linked to the MDN docs and some helpful YouTube videos below if you want to learn more.\n\n## Additional Resources\n\n- [MDN - Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n- [MDN - Filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n- [MDN - Reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n- [Fun Fun Function - Map](https://www.youtube.com/watch?v=bCqtb-Z5YGQ)\n- [Fun Fun Function - Reduce](https://www.youtube.com/watch?v=Wl98eZpkp-c)\n"},{"slug":"what-is-zettelkasten","category":"blog","title":"What is Zettelkasten?","description":"Zettelkasten is a method of taking notes that allowed German Sociologist Niklas Lumann to publish over 50 books and 600 articles during his lifetime","tags":["productivity","writing"],"body":"\nPhoto by <a href=\"https://unsplash.com/@qwitka?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Maksym Kaharlytskyi</a> on <a href=\"https://unsplash.com/s/photos/filing-cabinet?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n\n## History\n\nThe word Zettelkasten is a German word that means \"slip box.\" However, it is commonly used to refer to a system of note-taking, which was popularized by a German Sociologist name Niklas Luhmann.\n\nDuring his lifetime, Luhmann created over 90,000 notes in his Zettelkasten which allowed him to publish over 50 books and over 600 articles. His estate also contains over 150 unfinished manuscripts, one of which is over 1,000 pages long.\n\nSo what exactly is a Zettelkasten and how does it work?\n\n## The Zettelkasten Method\n\nLuhmann's Zettelkasten and note-taking method is rather simple which is what makes it so profound. Here is how it works:\n\n1. Capture a single thought, in your own words, in a single note. The goal here is to make sure that the note has all of the context you need so that you will understand it at a later point in time, without needing to look up the source of where it came from.\n2. Link this note with other notes within your Zettelkasten system. Herein, lies the key and the secret of the entire system and method. What makes a Zettelkasten powerful, is not the notes themselves, but _their relationship to one another_. You can think of this like hypertext on the web, where one page links to another. This system of linking notes mimics what our brains naturally do, i.e [Neuroplasticity](https://en.wikipedia.org/wiki/Neuroplasticity). The Zettelkasten becomes a \"second brain\" that you build externally to yourself.\n\nNow let's learn how we can create one.\n\n## How to create your own Zettelkasten\n\nI am going to be describing my process, which is not necessarily the \"right way.\" Truth be told, there really isn't one. The most important thing is that you find a process that works for you. You are building your own personal knowledge management system, aka a \"second brain\" for yourself, so feel free to adapt and modify the method to suite your own needs.\n\nI will be describing my method in the context of taking notes on a book, but my process is identical for any medium.\n\n## Literature Notes\n\nBefore I begin reading the book I will create a new note in [Obsidian](https://obsidian.md/). This new note will be considered a \"literature note.\" A literature note is simply a note where I capture my own thoughts about something that I am reading in the book. The key here is not to copy and paste or write down verbatim, a passage or sentence from the book. The intent is to take the time to really think about this thought, internalize it, and write it down in my own words. Once I have captured the thought or idea in my own words, I move on and keep reading. I continue this process of taking notes until I finish reading the book.\n\nBy the end of the book I will have several notes of my own thoughts and ideas, from various concepts I learned from the book.\n\n### Confession & Full Transparency\n\nThere are times when an author's words are so well written and perfectly encapsulate an idea that I cannot possibly word it any better. In that case, I capture the idea as a quote, and make sure I know that it is a quote and not my own thinking. I will also make note of the page number to reference where this quote came from.\n\n## Permanent Notes\n\nSo now that the book is finished and I have a single \"literature note\" with lot's of notes, ideas, quotes, etc. I then review all of these thoughts and ideas and determine which ones I would like to turn into \"permanent notes.\"\n\nPermanent notes are atomic.\n\nAtomic means they contain all of the context necessary to understand the thought or idea, without needing to look up the source from which it came from. The meaning is self-contained within the note itself.\n\nSo which notes become permanent notes?\n\nPermanent notes are thoughts or ideas that I feel are important and do not want to forget. Once I find a thought or idea from my literature note that I want to turn into a permanent note, I will create a brand new note for it.\n\nI will typically expand upon the idea to make sure it encapsulates the context and everything it needs to be understood by me in the future. I don't write more than a couple of paragraphs typically.\n\nThe goal here is not to write a lot of words, simplicity and brevity are key. Write down the minimum amount of information needed to capture the idea so it can be understood on its own, by you, at some point in the future.\n\nHere is an example of one of my permanent notes.\n\n```markdown\n# We often mask our lack of understanding using complicated vocabulary and jargon\n\nThe use of complicated and/or sophisticated language is often used to hide the fact that we do not fully understand what we are talking about. Being able to speak in simple vocabulary, use simple illustrations, etc., demonstrates our full comprehension of a subject.\n\nIf we can explain our subject to a child, then this is a good indicator that we do not have any gaps in our understanding.\n\n> If you require complicated terminology to explain what you know, you have no flexibility. When someone asks you a question, you can only repeat what you’ve already said.\n> -- https://fs.blog/2021/02/feynman-learning-technique/\n\nSee: [[Perfection is achieved when there is nothing left to take away]]\n\n---\n\nDate: 2021-06-02\nStatus: #permanent\n```\n\n## Linking Notes\n\nIn the example above you will notice a link, `[[Perfection is achieved when there is nothing left to take away]]` which links to another note within my Zettelkasten.\n\nThis is what that note looks like:\n\n```markdown\n# Perfection is achieved when there is nothing left to take away\n\n> Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\n\n---\n\nAuthor: Antoine de Saint-Exupéry\nSource: Airman’s Odyssey. https://www.goodreads.com/work/best_book/11753-airman-s-odyssey.\nType: #quote\n```\n\nThis is the power of using the Zettelkasten method. By linking notes together, you are creating new connections and pathways between various types of information and thought &mdash; and remember, these are your own thoughts.\n\nAs you begin to add more notes into your Zettelkasten the connections between those notes grows. The more you put into your Zettelkasten the more you get out of it. This is why Luhmann's Zettelkasten of over 90,000 notes allowed him to write as many books and articles as he did.\n\n## The Goal of a Zettelkasten is writing\n\n> I only do what is easy. I only write when I immediately know how to do it, if I falter for a moment, I put the matter aside and do something else\n> -- Niklas Luhmann from \"How to take Smart Notes\" by Sönke Ahrens page 15\n\nWhen Luhmann began to write a new article or book, he would simply open his Zettelkasten and follow the links between his notes. He would then take all of the notes that made the most sense for his subject and use them as his outline and first draft.\n\nHis Zettelkasten provided the framework for his new projects which meant he **never started from a blank page**. He had a vast collection of thousands of notes from which he could draw inspiration, insight, and inquiry &mdash; all of these insights from his Zettelkasten were his own thoughts. After writing his first draft, he would then do further research to fill in any gaps in his arguments and then publish.\n\nLuhmann would typically work on several books at the same time, which is why he was so prolific as an author. Working on multiple projects also kept him from ever getting \"stuck.\" Listen to what he would do, in his own words, whenever he was felt stuck:\n\n> I always work on different manuscripts at the same time. With this method, to work on different things simultaneously, I never encounter any blockages.\n> -- Niklas Luhmann from \"How to take Smart Notes\" by Sönke Ahrens page 141\n\n## Resources for learning more\n\nThis article really only scratches the surface as the proverbial \"rabbit hole\" goes quite deep when it comes to Zettelkasten, Personal Knowledge Management, Building a Second brain, etc. If you want to take the \"red pill\" and go deeper, here are some great resources:\n\n- [https://zettelkasten.de/](https://zettelkasten.de/introduction/#luhmann-s-zettelkasten)\n- [How to Take Smart Notes by Sönke Ahrens](https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y)\n- [Andy Matuschak's Notes](https://notes.andymatuschak.org/Evergreen_notes)\n- [YouTube - Linking Your Thinking](https://www.youtube.com/channel/UC85D7ERwhke7wVqskV_DZUA)\n- [YouTube - Bryan Jenks](https://www.youtube.com/channel/UCfhSB16X9MXhzSFe_H7XbHg)\n- [Obsidan Forums](https://forum.obsidian.md/)\n"},{"slug":"why-writing-is-important-for-software-developers","category":"blog","title":"Why Writing is Important for Software Developers","description":"This is my personal story of how I taught myself how to code and got hired as a junior developer in 5 months.","tags":["career-advice","writing"],"body":"\nPhoto by <a href=\"https://unsplash.com/@aaronburden?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\" target=\"_blank\">Aaron Burden</a> on <a href=\"https://unsplash.com/s/photos/writing?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\" target=\"_blank\">Unsplash</a>\n\n## Writing is thinking out loud.\n\nIf you want to become a great software developer than you need to be a great writer. I am quite surprised to find so few people talking about how important your writing skills are within the world of software development. Being able to clearly articulate your thoughts is practically a superpower, because most people struggle to do it well.\n\nJust think about how much writing you need to do as a software developer, that does not involve writing code. Emails, Slack, documentation, readme's, code comments, git commit messages, pull requests, code reviews, etc. I think it would be fair to say that most developers write more words than code every day, and yet I never hear of a developer talking about how they need to improve as a writer. Being able to write great code is incredibly important, please don't misunderstand me, however, being a great writer is even more so.\n\n## Great writers are great thinkers.\n\nI mentioned earlier that writing is thinking out loud. When you are reading someone else's words, you are reading their thoughts after them. Those words are the result of their thinking. The same can be said about code. When you are doing a code review, or checking out the source code of some open source project, you are reading someone else's thoughts after them.\n\nThis is why when you read great writing you are actually reading great thinking. When you see well written, concise, simple and easy to reason about code, you are reading great thinking. The common denominator is great thinking in both cases.\n\nSo how do you become a better thinker? By becoming a better writer. How do you become a better writer? By becoming a better reader and by writing a lot.\n\n## There are no shortcuts\n\nI am sure you have heard something along the lines of, \"a great developer is a lazy developer.\" This is true and the sentiment often refers to the fact that great developers automate as much as possible. We possess the power to wield computers however we wish, and when we use this power to delegate much of our work, we are considered \"lazy\" which is an admirable trait.\n\nThe trait of being a \"lazy\" developer does not hold water however when it comes to being a great writer. Great writers are anything but lazy. Great writers show up, each and every day, and write -- and they write a lot! There simply are no shortcuts to becoming better at writing. The more and more you write the better you will become at it, but you have to put in the work.\n\nThere are no shortcuts.\n\nThe beautiful thing about this, is that by recognizing this you already have a leg up on the competition, if you are willing to put in the work. Most people are not willing to put in the work required to become a great writer, and this gives you a significant advantage.\n\n## Natural talent only gets you so far\n\nI am sure many of you reading this now are thinking, \"but I am not a great writer.\" Very few of us are born great writers, we become great writers by the act of writing... a lot!\n\nI was quite fortunate to study at a very prestigious music school in college and was surrounded by what felt like thousands of modern day Mozart's. I was the underdog. I couldn't read music, I never had a private music lesson in my life before attending school, and here I was surrounded by kids with perfect pitch, who traveled the world playing with some of the best symphonies on the planet, had record deals, you name it. On the surface it seemed like I didn't belong, and maybe that was true, at least at first. However, what I brought to the table and what made me stand out from all of them was my work ethic.\n\nYou see, many of them were quite arrogant and relied solely upon their natural God given talent. I was not gifted with as much talent as most of them, but I worked harder than all of them. Eventually, I surpassed them, because of my hard work ethic. Developing a hard work ethic was one of the greatest lessons I learned while studying there as it has catapulted my career ever since.\n\nThe same is true for you and your writing. Not everyone is born a Hemingway, and even he had to write a lot to develop his tremendous talent.\n\nMost people are not born great, they become great.\n\nYou simply need to write more than the competition and eventually you will surpass them. There is a limit to how far natural talent will get you, but there is not limit to how far you can get with a strong work ethic. So work hard at your writing and hone those skills on a regular basis, every day if possible.\n\n## Establish a daily writing habit\n\nEstablishing habits becomes increasingly more difficult the older you become, so start to establish a daily writing habit as early as possible. You don't have to write 5,000 words a day, you simply need to exercise your writing muscles. If you only have 10 minutes, than work with what you have. Writing for 10 minutes a day is more effective than not writing at all.\n\n## Writing to throw it all away\n\nOften times people get stuck staring at the blank page because they cannot think about anything to write about. They think they have to write something perfect, well edited, well informed, with a sophisticated vocabulary. That may be true if you are writing for a large publication or trying to write a NY times best seller, but you are doing none of those things. You are writing emails, Slack messages, documentation, etc.\n\nWhen you sit down to write every day, just write, knowing that you can simply throw it all away. What is most important is showing up and practicing your writing each and every day. If you really have no ideas, write about how you have no ideas, and how you are feeling about that. Write about what you would like to accomplish that day, or what you are grateful for, etc. Just write!\n\n## Practice in Public\n\nFinally, the last thing I would like to mention is the importance of practicing your writing in public. If you don't have a blog, start one. If you don't want to write a blog, post on Twitter or your social media platform of choice on a regular basis. Here is the thing, if you are just starting out, no one is going to read what you write anyways, so what are you so concerned about? Just start writing.\n\nOver time your writing will improve and you will start to gain some attention and begin to build a small audience. As your audience grows, so will your writing skills. The both grow naturally and organically together, so stop worrying and just start writing and publishing as often as possible.\n\n## Wrap Up\n\nWriting is incredibly important as a software developer and will serve you well for the rest of your career and your life. Establish a daily writing habit starting today. The benefits will far exceed anything you can imagine.\n"}]